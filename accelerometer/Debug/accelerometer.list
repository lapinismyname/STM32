
accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1e4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800a36c  0800a36c  0000b36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a388  0800a388  0000c07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a388  0800a388  0000b388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a390  0800a390  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a390  0800a390  0000b390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a394  0800a394  0000b394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800a398  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000aa4  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b20  20000b20  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a7c9  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004640  00000000  00000000  00026875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  0002aeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a4  00000000  00000000  0002c468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025670  00000000  00000000  0002d50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ebee  00000000  00000000  00052b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0551  00000000  00000000  0007176a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00141cbb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d6c  00000000  00000000  00141d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00147a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a354 	.word	0x0800a354

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800a354 	.word	0x0800a354

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <Delayms>:
/**
 * @brief  Delays for amount of milli seconds
 * @param  millis: Number of milliseconds for delay
 * @retval None
 */
__STATIC_INLINE void Delayms(uint32_t millis) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	/* Use HAL library for delay ms purpose */
	HAL_Delay(millis);
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f006 fb99 	bl	8006bf8 <HAL_Delay>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fcdb 	bl	8000e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f88d 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f9b3 	bl	8000848 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e2:	f000 f8f3 	bl	80006cc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e6:	f000 f91f 	bl	8000728 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004ea:	f000 f94d 	bl	8000788 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004ee:	f009 fadb 	bl	8009aa8 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004f2:	f000 f97f 	bl	80007f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  TM_LIS302DL_LIS3DSH_t Axes_Data;

      /* Initialize system */
      SystemInit();
 80004f6:	f000 fc8f 	bl	8000e18 <SystemInit>

      /* Init delay */
      TM_DELAY_Init();
 80004fa:	f006 fabd 	bl	8006a78 <TM_DELAY_Init>

      /* Initialize LEDs */
      TM_DISCO_LedInit();
 80004fe:	f006 fbb1 	bl	8006c64 <TM_DISCO_LedInit>

      /* Detect proper device */
      if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8000502:	f006 fd23 	bl	8006f4c <TM_LIS302DL_LIS3DSH_Detect>
 8000506:	4603      	mov	r3, r0
 8000508:	2b01      	cmp	r3, #1
 800050a:	d108      	bne.n	800051e <main+0x4e>
          /* Turn on GREEN and RED */
          TM_DISCO_LedOn(LED_GREEN | LED_RED);
 800050c:	4b38      	ldr	r3, [pc, #224]	@ (80005f0 <main+0x120>)
 800050e:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000512:	619a      	str	r2, [r3, #24]
          /* Initialize LIS302DL */
          TM_LIS302DL_LIS3DSH_Init(TM_LIS302DL_Sensitivity_2_3G, TM_LIS302DL_Filter_2Hz);
 8000514:	2104      	movs	r1, #4
 8000516:	2005      	movs	r0, #5
 8000518:	f006 fd3c 	bl	8006f94 <TM_LIS302DL_LIS3DSH_Init>
 800051c:	e013      	b.n	8000546 <main+0x76>
      } else if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 800051e:	f006 fd15 	bl	8006f4c <TM_LIS302DL_LIS3DSH_Detect>
 8000522:	4603      	mov	r3, r0
 8000524:	2b02      	cmp	r3, #2
 8000526:	d108      	bne.n	800053a <main+0x6a>
          /* Turn on BLUE and ORANGE */
          TM_DISCO_LedOn(LED_BLUE | LED_ORANGE);
 8000528:	4b31      	ldr	r3, [pc, #196]	@ (80005f0 <main+0x120>)
 800052a:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 800052e:	619a      	str	r2, [r3, #24]
          /* Initialize LIS3DSH */
          TM_LIS302DL_LIS3DSH_Init(TM_LIS3DSH_Sensitivity_2G, TM_LIS3DSH_Filter_800Hz);
 8000530:	2100      	movs	r1, #0
 8000532:	2000      	movs	r0, #0
 8000534:	f006 fd2e 	bl	8006f94 <TM_LIS302DL_LIS3DSH_Init>
 8000538:	e005      	b.n	8000546 <main+0x76>
      } else {
          /* Device is not recognized */

          /* Turn on ALL leds */
          TM_DISCO_LedOn(LED_GREEN | LED_RED | LED_BLUE | LED_ORANGE);
 800053a:	4b2d      	ldr	r3, [pc, #180]	@ (80005f0 <main+0x120>)
 800053c:	f44f 4270 	mov.w	r2, #61440	@ 0xf000
 8000540:	619a      	str	r2, [r3, #24]

          /* Infinite loop */
          while (1);
 8000542:	bf00      	nop
 8000544:	e7fd      	b.n	8000542 <main+0x72>
      }

      /* Delay for 2 seconds */
      Delayms(2000);
 8000546:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800054a:	f7ff ffb5 	bl	80004b8 <Delayms>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800054e:	f009 fad1 	bl	8009af4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    /* Read axes data from initialized accelerometer */
            TM_LIS302DL_LIS3DSH_ReadAxes(&Axes_Data);
 8000552:	463b      	mov	r3, r7
 8000554:	4618      	mov	r0, r3
 8000556:	f006 fd4d 	bl	8006ff4 <TM_LIS302DL_LIS3DSH_ReadAxes>

            while (HAL_UART_Transmit(&huart2, (uint8_t*) &Axes_Data, sizeof(Axes_Data), 0xFFFF) != HAL_OK);
 800055a:	bf00      	nop
 800055c:	4639      	mov	r1, r7
 800055e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000562:	2206      	movs	r2, #6
 8000564:	4823      	ldr	r0, [pc, #140]	@ (80005f4 <main+0x124>)
 8000566:	f004 fd5e 	bl	8005026 <HAL_UART_Transmit>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d1f5      	bne.n	800055c <main+0x8c>

            while (!(huart2.Instance->SR & USART_SR_TC));
 8000570:	bf00      	nop
 8000572:	4b20      	ldr	r3, [pc, #128]	@ (80005f4 <main+0x124>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800057c:	2b00      	cmp	r3, #0
 800057e:	d0f8      	beq.n	8000572 <main+0xa2>

            /* Turn LEDS on or off */
            /* Check X axes */
            if (Axes_Data.X > 200) TM_DISCO_LedOn(LED_RED);
 8000580:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000584:	2bc8      	cmp	r3, #200	@ 0xc8
 8000586:	dd04      	ble.n	8000592 <main+0xc2>
 8000588:	4b19      	ldr	r3, [pc, #100]	@ (80005f0 <main+0x120>)
 800058a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800058e:	619a      	str	r2, [r3, #24]
 8000590:	e003      	b.n	800059a <main+0xca>
            else TM_DISCO_LedOff(LED_RED);
 8000592:	4b17      	ldr	r3, [pc, #92]	@ (80005f0 <main+0x120>)
 8000594:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000598:	619a      	str	r2, [r3, #24]

            if (Axes_Data.X < -200) TM_DISCO_LedOn(LED_GREEN);
 800059a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800059e:	f113 0fc8 	cmn.w	r3, #200	@ 0xc8
 80005a2:	da04      	bge.n	80005ae <main+0xde>
 80005a4:	4b12      	ldr	r3, [pc, #72]	@ (80005f0 <main+0x120>)
 80005a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005aa:	619a      	str	r2, [r3, #24]
 80005ac:	e003      	b.n	80005b6 <main+0xe6>
            else TM_DISCO_LedOff(LED_GREEN);
 80005ae:	4b10      	ldr	r3, [pc, #64]	@ (80005f0 <main+0x120>)
 80005b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80005b4:	619a      	str	r2, [r3, #24]

            /* Check Y axes */
            if (Axes_Data.Y > 200) TM_DISCO_LedOn(LED_ORANGE);
 80005b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005ba:	2bc8      	cmp	r3, #200	@ 0xc8
 80005bc:	dd04      	ble.n	80005c8 <main+0xf8>
 80005be:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <main+0x120>)
 80005c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005c4:	619a      	str	r2, [r3, #24]
 80005c6:	e003      	b.n	80005d0 <main+0x100>
            else TM_DISCO_LedOff(LED_ORANGE);
 80005c8:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <main+0x120>)
 80005ca:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80005ce:	619a      	str	r2, [r3, #24]

            if (Axes_Data.Y < -200) TM_DISCO_LedOn(LED_BLUE);
 80005d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005d4:	f113 0fc8 	cmn.w	r3, #200	@ 0xc8
 80005d8:	da04      	bge.n	80005e4 <main+0x114>
 80005da:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <main+0x120>)
 80005dc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80005e0:	619a      	str	r2, [r3, #24]
 80005e2:	e7b4      	b.n	800054e <main+0x7e>
            else TM_DISCO_LedOff(LED_BLUE);
 80005e4:	4b02      	ldr	r3, [pc, #8]	@ (80005f0 <main+0x120>)
 80005e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80005ea:	619a      	str	r2, [r3, #24]
    MX_USB_HOST_Process();
 80005ec:	e7af      	b.n	800054e <main+0x7e>
 80005ee:	bf00      	nop
 80005f0:	40020c00 	.word	0x40020c00
 80005f4:	2000018c 	.word	0x2000018c

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	@ 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	@ 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f009 fe16 	bl	800a238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b28      	ldr	r3, [pc, #160]	@ (80006c4 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	4a27      	ldr	r2, [pc, #156]	@ (80006c4 <SystemClock_Config+0xcc>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	@ 0x40
 800062c:	4b25      	ldr	r3, [pc, #148]	@ (80006c4 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b22      	ldr	r3, [pc, #136]	@ (80006c8 <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a21      	ldr	r2, [pc, #132]	@ (80006c8 <SystemClock_Config+0xd0>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1f      	ldr	r3, [pc, #124]	@ (80006c8 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800065c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000668:	2308      	movs	r3, #8
 800066a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800066c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000670:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000676:	2307      	movs	r3, #7
 8000678:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	4618      	mov	r0, r3
 8000680:	f003 fe1e 	bl	80042c0 <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800068a:	f000 f9cf 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2302      	movs	r3, #2
 8000694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800069e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2105      	movs	r1, #5
 80006ac:	4618      	mov	r0, r3
 80006ae:	f004 f87f 	bl	80047b0 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006b8:	f000 f9b8 	bl	8000a2c <Error_Handler>
  }
}
 80006bc:	bf00      	nop
 80006be:	3750      	adds	r7, #80	@ 0x50
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_I2C1_Init+0x50>)
 80006d2:	4a13      	ldr	r2, [pc, #76]	@ (8000720 <MX_I2C1_Init+0x54>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <MX_I2C1_Init+0x50>)
 80006d8:	4a12      	ldr	r2, [pc, #72]	@ (8000724 <MX_I2C1_Init+0x58>)
 80006da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <MX_I2C1_Init+0x50>)
 80006ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f6:	4b09      	ldr	r3, [pc, #36]	@ (800071c <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	@ (800071c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	@ (800071c <MX_I2C1_Init+0x50>)
 800070a:	f002 fff5 	bl	80036f8 <HAL_I2C_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000714:	f000 f98a 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000098 	.word	0x20000098
 8000720:	40005400 	.word	0x40005400
 8000724:	000186a0 	.word	0x000186a0

08000728 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800072c:	4b13      	ldr	r3, [pc, #76]	@ (800077c <MX_I2S3_Init+0x54>)
 800072e:	4a14      	ldr	r2, [pc, #80]	@ (8000780 <MX_I2S3_Init+0x58>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000732:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_I2S3_Init+0x54>)
 8000734:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000738:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_I2S3_Init+0x54>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_I2S3_Init+0x54>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000746:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <MX_I2S3_Init+0x54>)
 8000748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800074c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_I2S3_Init+0x54>)
 8000750:	4a0c      	ldr	r2, [pc, #48]	@ (8000784 <MX_I2S3_Init+0x5c>)
 8000752:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_I2S3_Init+0x54>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_I2S3_Init+0x54>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_I2S3_Init+0x54>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_I2S3_Init+0x54>)
 8000768:	f003 f90a 	bl	8003980 <HAL_I2S_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000772:	f000 f95b 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000ec 	.word	0x200000ec
 8000780:	40003c00 	.word	0x40003c00
 8000784:	00017700 	.word	0x00017700

08000788 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800078c:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <MX_SPI1_Init+0x64>)
 800078e:	4a18      	ldr	r2, [pc, #96]	@ (80007f0 <MX_SPI1_Init+0x68>)
 8000790:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000792:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <MX_SPI1_Init+0x64>)
 8000794:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000798:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800079a:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_SPI1_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_SPI1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_SPI1_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_SPI1_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_SPI1_Init+0x64>)
 80007b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_SPI1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007cc:	4b07      	ldr	r3, [pc, #28]	@ (80007ec <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_SPI1_Init+0x64>)
 80007d4:	220a      	movs	r2, #10
 80007d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	@ (80007ec <MX_SPI1_Init+0x64>)
 80007da:	f004 fb4b 	bl	8004e74 <HAL_SPI_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007e4:	f000 f922 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000134 	.word	0x20000134
 80007f0:	40013000 	.word	0x40013000

080007f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <MX_USART2_UART_Init+0x50>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fe:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 800082c:	f004 fbab 	bl	8004f86 <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000836:	f000 f8f9 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000018c 	.word	0x2000018c
 8000844:	40004400 	.word	0x40004400

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	@ 0x30
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
 8000862:	4b6c      	ldr	r3, [pc, #432]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a6b      	ldr	r2, [pc, #428]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 8000868:	f043 0310 	orr.w	r3, r3, #16
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b69      	ldr	r3, [pc, #420]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0310 	and.w	r3, r3, #16
 8000876:	61bb      	str	r3, [r7, #24]
 8000878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	4b65      	ldr	r3, [pc, #404]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a64      	ldr	r2, [pc, #400]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b62      	ldr	r3, [pc, #392]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b5e      	ldr	r3, [pc, #376]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a5d      	ldr	r2, [pc, #372]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b5b      	ldr	r3, [pc, #364]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b57      	ldr	r3, [pc, #348]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a56      	ldr	r2, [pc, #344]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b54      	ldr	r3, [pc, #336]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	4b50      	ldr	r3, [pc, #320]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a4f      	ldr	r2, [pc, #316]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b4d      	ldr	r3, [pc, #308]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b49      	ldr	r3, [pc, #292]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a48      	ldr	r2, [pc, #288]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 80008f4:	f043 0308 	orr.w	r3, r3, #8
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b46      	ldr	r3, [pc, #280]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0308 	and.w	r3, r3, #8
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2108      	movs	r1, #8
 800090a:	4843      	ldr	r0, [pc, #268]	@ (8000a18 <MX_GPIO_Init+0x1d0>)
 800090c:	f000 fdc0 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000910:	2201      	movs	r2, #1
 8000912:	2101      	movs	r1, #1
 8000914:	4841      	ldr	r0, [pc, #260]	@ (8000a1c <MX_GPIO_Init+0x1d4>)
 8000916:	f000 fdbb 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800091a:	2200      	movs	r2, #0
 800091c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000920:	483f      	ldr	r0, [pc, #252]	@ (8000a20 <MX_GPIO_Init+0x1d8>)
 8000922:	f000 fdb5 	bl	8001490 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000926:	2308      	movs	r3, #8
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4836      	ldr	r0, [pc, #216]	@ (8000a18 <MX_GPIO_Init+0x1d0>)
 800093e:	f000 fc0b 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000942:	2301      	movs	r3, #1
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4830      	ldr	r0, [pc, #192]	@ (8000a1c <MX_GPIO_Init+0x1d4>)
 800095a:	f000 fbfd 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800095e:	2308      	movs	r3, #8
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800096e:	2305      	movs	r3, #5
 8000970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4828      	ldr	r0, [pc, #160]	@ (8000a1c <MX_GPIO_Init+0x1d4>)
 800097a:	f000 fbed 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800097e:	2301      	movs	r3, #1
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000982:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4824      	ldr	r0, [pc, #144]	@ (8000a24 <MX_GPIO_Init+0x1dc>)
 8000994:	f000 fbe0 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000998:	2304      	movs	r3, #4
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	481f      	ldr	r0, [pc, #124]	@ (8000a28 <MX_GPIO_Init+0x1e0>)
 80009ac:	f000 fbd4 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009c2:	2305      	movs	r3, #5
 80009c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4816      	ldr	r0, [pc, #88]	@ (8000a28 <MX_GPIO_Init+0x1e0>)
 80009ce:	f000 fbc3 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009d2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009d6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	480d      	ldr	r0, [pc, #52]	@ (8000a20 <MX_GPIO_Init+0x1d8>)
 80009ec:	f000 fbb4 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f0:	2302      	movs	r3, #2
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4804      	ldr	r0, [pc, #16]	@ (8000a18 <MX_GPIO_Init+0x1d0>)
 8000a06:	f000 fba7 	bl	8001158 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3730      	adds	r7, #48	@ 0x30
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020c00 	.word	0x40020c00
 8000a24:	40020000 	.word	0x40020000
 8000a28:	40020400 	.word	0x40020400

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <Error_Handler+0x8>

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	4a0f      	ldr	r2, [pc, #60]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a76:	2007      	movs	r0, #7
 8000a78:	f000 fb2c 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800

08000a88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	@ 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a19      	ldr	r2, [pc, #100]	@ (8000b0c <HAL_I2C_MspInit+0x84>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d12c      	bne.n	8000b04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	4a17      	ldr	r2, [pc, #92]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aba:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ac6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000acc:	2312      	movs	r3, #18
 8000ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <HAL_I2C_MspInit+0x8c>)
 8000ae4:	f000 fb38 	bl	8001158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af0:	4a07      	ldr	r2, [pc, #28]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000af2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000af6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af8:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <HAL_I2C_MspInit+0x88>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	@ 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020400 	.word	0x40020400

08000b18 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08e      	sub	sp, #56	@ 0x38
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a31      	ldr	r2, [pc, #196]	@ (8000c08 <HAL_I2S_MspInit+0xf0>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d15a      	bne.n	8000bfe <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b4c:	23c0      	movs	r3, #192	@ 0xc0
 8000b4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f004 f849 	bl	8004bf0 <HAL_RCCEx_PeriphCLKConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b64:	f7ff ff62 	bl	8000a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	4b27      	ldr	r3, [pc, #156]	@ (8000c0c <HAL_I2S_MspInit+0xf4>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b70:	4a26      	ldr	r2, [pc, #152]	@ (8000c0c <HAL_I2S_MspInit+0xf4>)
 8000b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b78:	4b24      	ldr	r3, [pc, #144]	@ (8000c0c <HAL_I2S_MspInit+0xf4>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <HAL_I2S_MspInit+0xf4>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8000c0c <HAL_I2S_MspInit+0xf4>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b94:	4b1d      	ldr	r3, [pc, #116]	@ (8000c0c <HAL_I2S_MspInit+0xf4>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <HAL_I2S_MspInit+0xf4>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba8:	4a18      	ldr	r2, [pc, #96]	@ (8000c0c <HAL_I2S_MspInit+0xf4>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb0:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <HAL_I2S_MspInit+0xf4>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bcc:	2306      	movs	r3, #6
 8000bce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480e      	ldr	r0, [pc, #56]	@ (8000c10 <HAL_I2S_MspInit+0xf8>)
 8000bd8:	f000 fabe 	bl	8001158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bdc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bee:	2306      	movs	r3, #6
 8000bf0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4806      	ldr	r0, [pc, #24]	@ (8000c14 <HAL_I2S_MspInit+0xfc>)
 8000bfa:	f000 faad 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bfe:	bf00      	nop
 8000c00:	3738      	adds	r7, #56	@ 0x38
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40003c00 	.word	0x40003c00
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020000 	.word	0x40020000
 8000c14:	40020800 	.word	0x40020800

08000c18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	@ 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a19      	ldr	r2, [pc, #100]	@ (8000c9c <HAL_SPI_MspInit+0x84>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d12b      	bne.n	8000c92 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c42:	4a17      	ldr	r2, [pc, #92]	@ (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <HAL_SPI_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c72:	23e0      	movs	r3, #224	@ 0xe0
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c82:	2305      	movs	r3, #5
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <HAL_SPI_MspInit+0x8c>)
 8000c8e:	f000 fa63 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	@ 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40013000 	.word	0x40013000
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	@ 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a19      	ldr	r2, [pc, #100]	@ (8000d2c <HAL_UART_MspInit+0x84>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d12b      	bne.n	8000d22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <HAL_UART_MspInit+0x88>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	4a17      	ldr	r2, [pc, #92]	@ (8000d30 <HAL_UART_MspInit+0x88>)
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <HAL_UART_MspInit+0x88>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <HAL_UART_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	4a10      	ldr	r2, [pc, #64]	@ (8000d30 <HAL_UART_MspInit+0x88>)
 8000cf0:	f043 0308 	orr.w	r3, r3, #8
 8000cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <HAL_UART_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	f003 0308 	and.w	r3, r3, #8
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d02:	2360      	movs	r3, #96	@ 0x60
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d12:	2307      	movs	r3, #7
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <HAL_UART_MspInit+0x8c>)
 8000d1e:	f000 fa1b 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d22:	bf00      	nop
 8000d24:	3728      	adds	r7, #40	@ 0x28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40004400 	.word	0x40004400
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020c00 	.word	0x40020c00

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <NMI_Handler+0x4>

08000d40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <MemManage_Handler+0x4>

08000d50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8e:	f005 fead 	bl	8006aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d9c:	4802      	ldr	r0, [pc, #8]	@ (8000da8 <OTG_FS_IRQHandler+0x10>)
 8000d9e:	f000 fe71 	bl	8001a84 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200005f8 	.word	0x200005f8

08000dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db4:	4a14      	ldr	r2, [pc, #80]	@ (8000e08 <_sbrk+0x5c>)
 8000db6:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <_sbrk+0x60>)
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc0:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <_sbrk+0x64>)
 8000dca:	4a12      	ldr	r2, [pc, #72]	@ (8000e14 <_sbrk+0x68>)
 8000dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d207      	bcs.n	8000dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ddc:	f009 fa44 	bl	800a268 <__errno>
 8000de0:	4603      	mov	r3, r0
 8000de2:	220c      	movs	r2, #12
 8000de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	e009      	b.n	8000e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dec:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df2:	4b07      	ldr	r3, [pc, #28]	@ (8000e10 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	4a05      	ldr	r2, [pc, #20]	@ (8000e10 <_sbrk+0x64>)
 8000dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20020000 	.word	0x20020000
 8000e0c:	00000400 	.word	0x00000400
 8000e10:	200001d4 	.word	0x200001d4
 8000e14:	20000b20 	.word	0x20000b20

08000e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <SystemInit+0x20>)
 8000e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e22:	4a05      	ldr	r2, [pc, #20]	@ (8000e38 <SystemInit+0x20>)
 8000e24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e40:	f7ff ffea 	bl	8000e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e44:	480c      	ldr	r0, [pc, #48]	@ (8000e78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e46:	490d      	ldr	r1, [pc, #52]	@ (8000e7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e48:	4a0d      	ldr	r2, [pc, #52]	@ (8000e80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f009 fa03 	bl	800a274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6e:	f7ff fb2f 	bl	80004d0 <main>
  bx  lr    
 8000e72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e7c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e80:	0800a398 	.word	0x0800a398
  ldr r2, =_sbss
 8000e84:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e88:	20000b20 	.word	0x20000b20

08000e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC_IRQHandler>
	...

08000e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e94:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed0 <HAL_Init+0x40>)
 8000e9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <HAL_Init+0x40>)
 8000ea6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eac:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	@ (8000ed0 <HAL_Init+0x40>)
 8000eb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f000 f90b 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f000 f808 	bl	8000ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec4:	f7ff fdb8 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023c00 	.word	0x40023c00

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <HAL_InitTick+0x54>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <HAL_InitTick+0x58>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 f923 	bl	800113e <HAL_SYSTICK_Config>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00e      	b.n	8000f20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d80a      	bhi.n	8000f1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f000 f8eb 	bl	80010ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f14:	4a06      	ldr	r2, [pc, #24]	@ (8000f30 <HAL_InitTick+0x5c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e000      	b.n	8000f20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000004 	.word	0x20000004

08000f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	@ (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	db0b      	blt.n	8000fc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 021f 	and.w	r2, r3, #31
 8000fb0:	4907      	ldr	r1, [pc, #28]	@ (8000fd0 <__NVIC_EnableIRQ+0x38>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	2001      	movs	r0, #1
 8000fba:	fa00 f202 	lsl.w	r2, r0, r2
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000e100 	.word	0xe000e100

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	@ (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	@ (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	@ 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	@ 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a0:	d301      	bcc.n	80010a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00f      	b.n	80010c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a6:	4a0a      	ldr	r2, [pc, #40]	@ (80010d0 <SysTick_Config+0x40>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ae:	210f      	movs	r1, #15
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f7ff ff8e 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b8:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <SysTick_Config+0x40>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010be:	4b04      	ldr	r3, [pc, #16]	@ (80010d0 <SysTick_Config+0x40>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff29 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010fc:	f7ff ff3e 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 8001100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff ff8e 	bl	8001028 <NVIC_EncodePriority>
 800110c:	4602      	mov	r2, r0
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5d 	bl	8000fd4 <__NVIC_SetPriority>
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff31 	bl	8000f98 <__NVIC_EnableIRQ>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffa2 	bl	8001090 <SysTick_Config>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	@ 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e16b      	b.n	800144c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001174:	2201      	movs	r2, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	f040 815a 	bne.w	8001446 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	2b01      	cmp	r3, #1
 800119c:	d005      	beq.n	80011aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d130      	bne.n	800120c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e0:	2201      	movs	r2, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f003 0201 	and.w	r2, r3, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b03      	cmp	r3, #3
 8001216:	d017      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d123      	bne.n	800129c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	69b9      	ldr	r1, [r7, #24]
 8001298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0203 	and.w	r2, r3, #3
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80b4 	beq.w	8001446 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b60      	ldr	r3, [pc, #384]	@ (8001464 <HAL_GPIO_Init+0x30c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e6:	4a5f      	ldr	r2, [pc, #380]	@ (8001464 <HAL_GPIO_Init+0x30c>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001464 <HAL_GPIO_Init+0x30c>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001468 <HAL_GPIO_Init+0x310>)
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a52      	ldr	r2, [pc, #328]	@ (800146c <HAL_GPIO_Init+0x314>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d02b      	beq.n	800137e <HAL_GPIO_Init+0x226>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a51      	ldr	r2, [pc, #324]	@ (8001470 <HAL_GPIO_Init+0x318>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d025      	beq.n	800137a <HAL_GPIO_Init+0x222>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a50      	ldr	r2, [pc, #320]	@ (8001474 <HAL_GPIO_Init+0x31c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d01f      	beq.n	8001376 <HAL_GPIO_Init+0x21e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4f      	ldr	r2, [pc, #316]	@ (8001478 <HAL_GPIO_Init+0x320>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d019      	beq.n	8001372 <HAL_GPIO_Init+0x21a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4e      	ldr	r2, [pc, #312]	@ (800147c <HAL_GPIO_Init+0x324>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d013      	beq.n	800136e <HAL_GPIO_Init+0x216>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4d      	ldr	r2, [pc, #308]	@ (8001480 <HAL_GPIO_Init+0x328>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d00d      	beq.n	800136a <HAL_GPIO_Init+0x212>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4c      	ldr	r2, [pc, #304]	@ (8001484 <HAL_GPIO_Init+0x32c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d007      	beq.n	8001366 <HAL_GPIO_Init+0x20e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4b      	ldr	r2, [pc, #300]	@ (8001488 <HAL_GPIO_Init+0x330>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_GPIO_Init+0x20a>
 800135e:	2307      	movs	r3, #7
 8001360:	e00e      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001362:	2308      	movs	r3, #8
 8001364:	e00c      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001366:	2306      	movs	r3, #6
 8001368:	e00a      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800136a:	2305      	movs	r3, #5
 800136c:	e008      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800136e:	2304      	movs	r3, #4
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001372:	2303      	movs	r3, #3
 8001374:	e004      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001376:	2302      	movs	r3, #2
 8001378:	e002      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800137e:	2300      	movs	r3, #0
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	f002 0203 	and.w	r2, r2, #3
 8001386:	0092      	lsls	r2, r2, #2
 8001388:	4093      	lsls	r3, r2
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001390:	4935      	ldr	r1, [pc, #212]	@ (8001468 <HAL_GPIO_Init+0x310>)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139e:	4b3b      	ldr	r3, [pc, #236]	@ (800148c <HAL_GPIO_Init+0x334>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c2:	4a32      	ldr	r2, [pc, #200]	@ (800148c <HAL_GPIO_Init+0x334>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c8:	4b30      	ldr	r3, [pc, #192]	@ (800148c <HAL_GPIO_Init+0x334>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ec:	4a27      	ldr	r2, [pc, #156]	@ (800148c <HAL_GPIO_Init+0x334>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <HAL_GPIO_Init+0x334>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001416:	4a1d      	ldr	r2, [pc, #116]	@ (800148c <HAL_GPIO_Init+0x334>)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800141c:	4b1b      	ldr	r3, [pc, #108]	@ (800148c <HAL_GPIO_Init+0x334>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001440:	4a12      	ldr	r2, [pc, #72]	@ (800148c <HAL_GPIO_Init+0x334>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3301      	adds	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	2b0f      	cmp	r3, #15
 8001450:	f67f ae90 	bls.w	8001174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3724      	adds	r7, #36	@ 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40013800 	.word	0x40013800
 800146c:	40020000 	.word	0x40020000
 8001470:	40020400 	.word	0x40020400
 8001474:	40020800 	.word	0x40020800
 8001478:	40020c00 	.word	0x40020c00
 800147c:	40021000 	.word	0x40021000
 8001480:	40021400 	.word	0x40021400
 8001484:	40021800 	.word	0x40021800
 8001488:	40021c00 	.word	0x40021c00
 800148c:	40013c00 	.word	0x40013c00

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
 800149c:	4613      	mov	r3, r2
 800149e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a0:	787b      	ldrb	r3, [r7, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014ac:	e003      	b.n	80014b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	041a      	lsls	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	619a      	str	r2, [r3, #24]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af02      	add	r7, sp, #8
 80014c8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e059      	b.n	8001588 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d106      	bne.n	80014f4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f008 fb38 	bl	8009b64 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2203      	movs	r2, #3
 80014f8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001502:	d102      	bne.n	800150a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f004 f9b9 	bl	8005886 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7c1a      	ldrb	r2, [r3, #16]
 800151c:	f88d 2000 	strb.w	r2, [sp]
 8001520:	3304      	adds	r3, #4
 8001522:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001524:	f004 f93a 	bl	800579c <USB_CoreInit>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d005      	beq.n	800153a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2202      	movs	r2, #2
 8001532:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e026      	b.n	8001588 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2101      	movs	r1, #1
 8001540:	4618      	mov	r0, r3
 8001542:	f004 f9b1 	bl	80058a8 <USB_SetCurrentMode>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2202      	movs	r2, #2
 8001550:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e017      	b.n	8001588 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7c1a      	ldrb	r2, [r3, #16]
 8001560:	f88d 2000 	strb.w	r2, [sp]
 8001564:	3304      	adds	r3, #4
 8001566:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001568:	f004 fb54 	bl	8005c14 <USB_HostInit>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d005      	beq.n	800157e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2202      	movs	r2, #2
 8001576:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e004      	b.n	8001588 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b08b      	sub	sp, #44	@ 0x2c
 8001594:	af04      	add	r7, sp, #16
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	4608      	mov	r0, r1
 800159a:	4611      	mov	r1, r2
 800159c:	461a      	mov	r2, r3
 800159e:	4603      	mov	r3, r0
 80015a0:	70fb      	strb	r3, [r7, #3]
 80015a2:	460b      	mov	r3, r1
 80015a4:	70bb      	strb	r3, [r7, #2]
 80015a6:	4613      	mov	r3, r2
 80015a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80015aa:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80015ac:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <HAL_HCD_HC_Init+0x2c>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e09d      	b.n	80016f8 <HAL_HCD_HC_Init+0x168>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80015c4:	78fa      	ldrb	r2, [r7, #3]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	1a9b      	subs	r3, r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	3319      	adds	r3, #25
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015d8:	78fa      	ldrb	r2, [r7, #3]
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	3314      	adds	r3, #20
 80015e8:	787a      	ldrb	r2, [r7, #1]
 80015ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015ec:	78fa      	ldrb	r2, [r7, #3]
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	1a9b      	subs	r3, r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	3315      	adds	r3, #21
 80015fc:	78fa      	ldrb	r2, [r7, #3]
 80015fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001600:	78fa      	ldrb	r2, [r7, #3]
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	3326      	adds	r3, #38	@ 0x26
 8001610:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001614:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001616:	78fa      	ldrb	r2, [r7, #3]
 8001618:	78bb      	ldrb	r3, [r7, #2]
 800161a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800161e:	b2d8      	uxtb	r0, r3
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	1a9b      	subs	r3, r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	3316      	adds	r3, #22
 800162e:	4602      	mov	r2, r0
 8001630:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	4619      	mov	r1, r3
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 fbc8 	bl	8001dcc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800163c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001640:	2b00      	cmp	r3, #0
 8001642:	da0a      	bge.n	800165a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001644:	78fa      	ldrb	r2, [r7, #3]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	3317      	adds	r3, #23
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
 8001658:	e009      	b.n	800166e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800165a:	78fa      	ldrb	r2, [r7, #3]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	1a9b      	subs	r3, r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	440b      	add	r3, r1
 8001668:	3317      	adds	r3, #23
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f004 fc32 	bl	8005edc <USB_GetHostSpeed>
 8001678:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800167a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800167e:	2b01      	cmp	r3, #1
 8001680:	d10b      	bne.n	800169a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001682:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001686:	2b01      	cmp	r3, #1
 8001688:	d107      	bne.n	800169a <HAL_HCD_HC_Init+0x10a>
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d104      	bne.n	800169a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2bbc      	cmp	r3, #188	@ 0xbc
 8001694:	d901      	bls.n	800169a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001696:	23bc      	movs	r3, #188	@ 0xbc
 8001698:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	1a9b      	subs	r3, r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	3318      	adds	r3, #24
 80016aa:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80016ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80016b0:	78fa      	ldrb	r2, [r7, #3]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	b298      	uxth	r0, r3
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	1a9b      	subs	r3, r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	3328      	adds	r3, #40	@ 0x28
 80016c4:	4602      	mov	r2, r0
 80016c6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	787c      	ldrb	r4, [r7, #1]
 80016d2:	78ba      	ldrb	r2, [r7, #2]
 80016d4:	78f9      	ldrb	r1, [r7, #3]
 80016d6:	9302      	str	r3, [sp, #8]
 80016d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	4623      	mov	r3, r4
 80016e6:	f004 fc21 	bl	8005f2c <USB_HC_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd90      	pop	{r4, r7, pc}

08001700 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_HCD_HC_Halt+0x1e>
 800171a:	2302      	movs	r3, #2
 800171c:	e00f      	b.n	800173e <HAL_HCD_HC_Halt+0x3e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	78fa      	ldrb	r2, [r7, #3]
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f004 ffb3 	bl	800669a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800173c:	7bfb      	ldrb	r3, [r7, #15]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	4608      	mov	r0, r1
 8001752:	4611      	mov	r1, r2
 8001754:	461a      	mov	r2, r3
 8001756:	4603      	mov	r3, r0
 8001758:	70fb      	strb	r3, [r7, #3]
 800175a:	460b      	mov	r3, r1
 800175c:	70bb      	strb	r3, [r7, #2]
 800175e:	4613      	mov	r3, r2
 8001760:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001762:	78fa      	ldrb	r2, [r7, #3]
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	1a9b      	subs	r3, r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	3317      	adds	r3, #23
 8001772:	78ba      	ldrb	r2, [r7, #2]
 8001774:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001776:	78fa      	ldrb	r2, [r7, #3]
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	440b      	add	r3, r1
 8001784:	3326      	adds	r3, #38	@ 0x26
 8001786:	787a      	ldrb	r2, [r7, #1]
 8001788:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800178a:	7c3b      	ldrb	r3, [r7, #16]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d114      	bne.n	80017ba <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001790:	78fa      	ldrb	r2, [r7, #3]
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	1a9b      	subs	r3, r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	332a      	adds	r3, #42	@ 0x2a
 80017a0:	2203      	movs	r2, #3
 80017a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017a4:	78fa      	ldrb	r2, [r7, #3]
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	1a9b      	subs	r3, r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	3319      	adds	r3, #25
 80017b4:	7f3a      	ldrb	r2, [r7, #28]
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	e009      	b.n	80017ce <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ba:	78fa      	ldrb	r2, [r7, #3]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	1a9b      	subs	r3, r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	332a      	adds	r3, #42	@ 0x2a
 80017ca:	2202      	movs	r2, #2
 80017cc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017ce:	787b      	ldrb	r3, [r7, #1]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	f200 8102 	bhi.w	80019da <HAL_HCD_HC_SubmitRequest+0x292>
 80017d6:	a201      	add	r2, pc, #4	@ (adr r2, 80017dc <HAL_HCD_HC_SubmitRequest+0x94>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	080019c5 	.word	0x080019c5
 80017e4:	080018b1 	.word	0x080018b1
 80017e8:	0800193b 	.word	0x0800193b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80017ec:	7c3b      	ldrb	r3, [r7, #16]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	f040 80f5 	bne.w	80019de <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80017f4:	78bb      	ldrb	r3, [r7, #2]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d12d      	bne.n	8001856 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80017fa:	8b3b      	ldrh	r3, [r7, #24]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d109      	bne.n	8001814 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001800:	78fa      	ldrb	r2, [r7, #3]
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	1a9b      	subs	r3, r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	333d      	adds	r3, #61	@ 0x3d
 8001810:	2201      	movs	r2, #1
 8001812:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001814:	78fa      	ldrb	r2, [r7, #3]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	333d      	adds	r3, #61	@ 0x3d
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10a      	bne.n	8001840 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800182a:	78fa      	ldrb	r2, [r7, #3]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	1a9b      	subs	r3, r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	332a      	adds	r3, #42	@ 0x2a
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800183e:	e0ce      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	1a9b      	subs	r3, r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	332a      	adds	r3, #42	@ 0x2a
 8001850:	2202      	movs	r2, #2
 8001852:	701a      	strb	r2, [r3, #0]
      break;
 8001854:	e0c3      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	1a9b      	subs	r3, r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	331a      	adds	r3, #26
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	f040 80b8 	bne.w	80019de <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800186e:	78fa      	ldrb	r2, [r7, #3]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	333c      	adds	r3, #60	@ 0x3c
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10a      	bne.n	800189a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	1a9b      	subs	r3, r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	332a      	adds	r3, #42	@ 0x2a
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
      break;
 8001898:	e0a1      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	1a9b      	subs	r3, r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	332a      	adds	r3, #42	@ 0x2a
 80018aa:	2202      	movs	r2, #2
 80018ac:	701a      	strb	r2, [r3, #0]
      break;
 80018ae:	e096      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018b0:	78bb      	ldrb	r3, [r7, #2]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d120      	bne.n	80018f8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	1a9b      	subs	r3, r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	333d      	adds	r3, #61	@ 0x3d
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10a      	bne.n	80018e2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018cc:	78fa      	ldrb	r2, [r7, #3]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	332a      	adds	r3, #42	@ 0x2a
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018e0:	e07e      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018e2:	78fa      	ldrb	r2, [r7, #3]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	332a      	adds	r3, #42	@ 0x2a
 80018f2:	2202      	movs	r2, #2
 80018f4:	701a      	strb	r2, [r3, #0]
      break;
 80018f6:	e073      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	333c      	adds	r3, #60	@ 0x3c
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10a      	bne.n	8001924 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	332a      	adds	r3, #42	@ 0x2a
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
      break;
 8001922:	e05d      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	332a      	adds	r3, #42	@ 0x2a
 8001934:	2202      	movs	r2, #2
 8001936:	701a      	strb	r2, [r3, #0]
      break;
 8001938:	e052      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800193a:	78bb      	ldrb	r3, [r7, #2]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d120      	bne.n	8001982 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	333d      	adds	r3, #61	@ 0x3d
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10a      	bne.n	800196c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	332a      	adds	r3, #42	@ 0x2a
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800196a:	e039      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	332a      	adds	r3, #42	@ 0x2a
 800197c:	2202      	movs	r2, #2
 800197e:	701a      	strb	r2, [r3, #0]
      break;
 8001980:	e02e      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001982:	78fa      	ldrb	r2, [r7, #3]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	1a9b      	subs	r3, r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	333c      	adds	r3, #60	@ 0x3c
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10a      	bne.n	80019ae <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	332a      	adds	r3, #42	@ 0x2a
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
      break;
 80019ac:	e018      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	1a9b      	subs	r3, r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	332a      	adds	r3, #42	@ 0x2a
 80019be:	2202      	movs	r2, #2
 80019c0:	701a      	strb	r2, [r3, #0]
      break;
 80019c2:	e00d      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	332a      	adds	r3, #42	@ 0x2a
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
      break;
 80019d8:	e002      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80019da:	bf00      	nop
 80019dc:	e000      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80019de:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	1a9b      	subs	r3, r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	332c      	adds	r3, #44	@ 0x2c
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	8b39      	ldrh	r1, [r7, #24]
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	1a9b      	subs	r3, r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4403      	add	r3, r0
 8001a04:	3334      	adds	r3, #52	@ 0x34
 8001a06:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a08:	78fa      	ldrb	r2, [r7, #3]
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	011b      	lsls	r3, r3, #4
 8001a10:	1a9b      	subs	r3, r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	334c      	adds	r3, #76	@ 0x4c
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a1c:	78fa      	ldrb	r2, [r7, #3]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	3338      	adds	r3, #56	@ 0x38
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a30:	78fa      	ldrb	r2, [r7, #3]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	1a9b      	subs	r3, r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3315      	adds	r3, #21
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a44:	78fa      	ldrb	r2, [r7, #3]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	334d      	adds	r3, #77	@ 0x4d
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	1a9b      	subs	r3, r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	3310      	adds	r3, #16
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	1d19      	adds	r1, r3, #4
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	799b      	ldrb	r3, [r3, #6]
 8001a72:	461a      	mov	r2, r3
 8001a74:	f004 fb86 	bl	8006184 <USB_HC_StartXfer>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop

08001a84 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f004 f87a 	bl	8005b94 <USB_GetMode>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	f040 80fb 	bne.w	8001c9e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f004 f83d 	bl	8005b2c <USB_ReadInterrupts>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80f1 	beq.w	8001c9c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f004 f834 	bl	8005b2c <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ace:	d104      	bne.n	8001ada <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001ad8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f004 f824 	bl	8005b2c <USB_ReadInterrupts>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001aee:	d104      	bne.n	8001afa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001af8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f004 f814 	bl	8005b2c <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b0e:	d104      	bne.n	8001b1a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f004 f804 	bl	8005b2c <USB_ReadInterrupts>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d103      	bne.n	8001b36 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2202      	movs	r2, #2
 8001b34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 fff6 	bl	8005b2c <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b4a:	d120      	bne.n	8001b8e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b54:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d113      	bne.n	8001b8e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b66:	2110      	movs	r1, #16
 8001b68:	6938      	ldr	r0, [r7, #16]
 8001b6a:	f003 fee9 	bl	8005940 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b6e:	6938      	ldr	r0, [r7, #16]
 8001b70:	f003 ff18 	bl	80059a4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7a5b      	ldrb	r3, [r3, #9]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d105      	bne.n	8001b88 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2101      	movs	r1, #1
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 f90a 	bl	8005d9c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f008 f869 	bl	8009c60 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 ffca 	bl	8005b2c <USB_ReadInterrupts>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ba2:	d102      	bne.n	8001baa <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f001 fd33 	bl	8003610 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 ffbc 	bl	8005b2c <USB_ReadInterrupts>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d106      	bne.n	8001bcc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f008 f832 	bl	8009c28 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2208      	movs	r2, #8
 8001bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f003 ffab 	bl	8005b2c <USB_ReadInterrupts>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001be0:	d139      	bne.n	8001c56 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f004 fd46 	bl	8006678 <USB_HC_ReadInterrupt>
 8001bec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e025      	b.n	8001c40 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d018      	beq.n	8001c3a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	015a      	lsls	r2, r3, #5
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c1e:	d106      	bne.n	8001c2e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	4619      	mov	r1, r3
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f905 	bl	8001e36 <HCD_HC_IN_IRQHandler>
 8001c2c:	e005      	b.n	8001c3a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	4619      	mov	r1, r3
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 ff67 	bl	8002b08 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	795b      	ldrb	r3, [r3, #5]
 8001c44:	461a      	mov	r2, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d3d3      	bcc.n	8001bf4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f003 ff66 	bl	8005b2c <USB_ReadInterrupts>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d101      	bne.n	8001c6e <HAL_HCD_IRQHandler+0x1ea>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_HCD_IRQHandler+0x1ec>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d014      	beq.n	8001c9e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0210 	bic.w	r2, r2, #16
 8001c82:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f001 fbe4 	bl	8003452 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699a      	ldr	r2, [r3, #24]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0210 	orr.w	r2, r2, #16
 8001c98:	619a      	str	r2, [r3, #24]
 8001c9a:	e000      	b.n	8001c9e <HAL_HCD_IRQHandler+0x21a>
      return;
 8001c9c:	bf00      	nop
    }
  }
}
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_HCD_Start+0x16>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e013      	b.n	8001ce2 <HAL_HCD_Start+0x3e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f004 f8ce 	bl	8005e6a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f003 fdc6 	bl	8005864 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_HCD_Stop+0x16>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e00d      	b.n	8001d1c <HAL_HCD_Stop+0x32>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f004 fe21 	bl	8006954 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f004 f870 	bl	8005e16 <USB_ResetPort>
 8001d36:	4603      	mov	r3, r0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	1a9b      	subs	r3, r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	334c      	adds	r3, #76	@ 0x4c
 8001d5c:	781b      	ldrb	r3, [r3, #0]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d76:	78fa      	ldrb	r2, [r7, #3]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	3338      	adds	r3, #56	@ 0x38
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f004 f8b2 	bl	8005f0a <USB_GetCurrentFrame>
 8001da6:	4603      	mov	r3, r0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f004 f88d 	bl	8005edc <USB_GetHostSpeed>
 8001dc2:	4603      	mov	r3, r0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001dd8:	78fa      	ldrb	r2, [r7, #3]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	331a      	adds	r3, #26
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001dec:	78fa      	ldrb	r2, [r7, #3]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	331b      	adds	r3, #27
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e00:	78fa      	ldrb	r2, [r7, #3]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3325      	adds	r3, #37	@ 0x25
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e14:	78fa      	ldrb	r2, [r7, #3]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	3324      	adds	r3, #36	@ 0x24
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	78fa      	ldrb	r2, [r7, #3]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 fe7c 	bl	8005b52 <USB_ReadChInterrupts>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d11a      	bne.n	8001e9a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	015a      	lsls	r2, r3, #5
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e70:	461a      	mov	r2, r3
 8001e72:	2304      	movs	r3, #4
 8001e74:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	334d      	adds	r3, #77	@ 0x4d
 8001e86:	2207      	movs	r2, #7
 8001e88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f004 fc01 	bl	800669a <USB_HC_Halt>
 8001e98:	e09e      	b.n	8001fd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 fe55 	bl	8005b52 <USB_ReadChInterrupts>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001eb2:	d11b      	bne.n	8001eec <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	015a      	lsls	r2, r3, #5
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ec6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001ec8:	78fa      	ldrb	r2, [r7, #3]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	1a9b      	subs	r3, r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	334d      	adds	r3, #77	@ 0x4d
 8001ed8:	2208      	movs	r2, #8
 8001eda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f004 fbd8 	bl	800669a <USB_HC_Halt>
 8001eea:	e075      	b.n	8001fd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	78fa      	ldrb	r2, [r7, #3]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 fe2c 	bl	8005b52 <USB_ReadChInterrupts>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d11a      	bne.n	8001f3a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	015a      	lsls	r2, r3, #5
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f10:	461a      	mov	r2, r3
 8001f12:	2308      	movs	r3, #8
 8001f14:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f16:	78fa      	ldrb	r2, [r7, #3]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	334d      	adds	r3, #77	@ 0x4d
 8001f26:	2206      	movs	r2, #6
 8001f28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	78fa      	ldrb	r2, [r7, #3]
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f004 fbb1 	bl	800669a <USB_HC_Halt>
 8001f38:	e04e      	b.n	8001fd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	4611      	mov	r1, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f003 fe05 	bl	8005b52 <USB_ReadChInterrupts>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f52:	d11b      	bne.n	8001f8c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f60:	461a      	mov	r2, r3
 8001f62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f68:	78fa      	ldrb	r2, [r7, #3]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	334d      	adds	r3, #77	@ 0x4d
 8001f78:	2209      	movs	r2, #9
 8001f7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f004 fb88 	bl	800669a <USB_HC_Halt>
 8001f8a:	e025      	b.n	8001fd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	78fa      	ldrb	r2, [r7, #3]
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f003 fddc 	bl	8005b52 <USB_ReadChInterrupts>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa0:	2b80      	cmp	r3, #128	@ 0x80
 8001fa2:	d119      	bne.n	8001fd8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	015a      	lsls	r2, r3, #5
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2380      	movs	r3, #128	@ 0x80
 8001fb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	1a9b      	subs	r3, r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	334d      	adds	r3, #77	@ 0x4d
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f004 fb61 	bl	800669a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 fdb6 	bl	8005b52 <USB_ReadChInterrupts>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ff0:	d112      	bne.n	8002018 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	78fa      	ldrb	r2, [r7, #3]
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f004 fb4d 	bl	800669a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800200c:	461a      	mov	r2, r3
 800200e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002012:	6093      	str	r3, [r2, #8]
 8002014:	f000 bd75 	b.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	78fa      	ldrb	r2, [r7, #3]
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f003 fd96 	bl	8005b52 <USB_ReadChInterrupts>
 8002026:	4603      	mov	r3, r0
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	f040 8128 	bne.w	8002282 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4413      	add	r3, r2
 800203a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800203e:	461a      	mov	r2, r3
 8002040:	2320      	movs	r3, #32
 8002042:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	331b      	adds	r3, #27
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d119      	bne.n	800208e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800205a:	78fa      	ldrb	r2, [r7, #3]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	331b      	adds	r3, #27
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	015a      	lsls	r2, r3, #5
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4413      	add	r3, r2
 8002076:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	0151      	lsls	r1, r2, #5
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	440a      	add	r2, r1
 8002084:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002088:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800208c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	799b      	ldrb	r3, [r3, #6]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d01b      	beq.n	80020ce <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	3330      	adds	r3, #48	@ 0x30
 80020a6:	6819      	ldr	r1, [r3, #0]
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ba:	78fa      	ldrb	r2, [r7, #3]
 80020bc:	1ac9      	subs	r1, r1, r3
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4403      	add	r3, r0
 80020ca:	3338      	adds	r3, #56	@ 0x38
 80020cc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80020ce:	78fa      	ldrb	r2, [r7, #3]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	1a9b      	subs	r3, r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	334d      	adds	r3, #77	@ 0x4d
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	3344      	adds	r3, #68	@ 0x44
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	015a      	lsls	r2, r3, #5
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002102:	461a      	mov	r2, r3
 8002104:	2301      	movs	r3, #1
 8002106:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002108:	78fa      	ldrb	r2, [r7, #3]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	3326      	adds	r3, #38	@ 0x26
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	3326      	adds	r3, #38	@ 0x26
 800212e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002130:	2b02      	cmp	r3, #2
 8002132:	d110      	bne.n	8002156 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f004 faac 	bl	800669a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4413      	add	r3, r2
 800214a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800214e:	461a      	mov	r2, r3
 8002150:	2310      	movs	r3, #16
 8002152:	6093      	str	r3, [r2, #8]
 8002154:	e03d      	b.n	80021d2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	3326      	adds	r3, #38	@ 0x26
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d00a      	beq.n	8002182 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	3326      	adds	r3, #38	@ 0x26
 800217c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800217e:	2b01      	cmp	r3, #1
 8002180:	d127      	bne.n	80021d2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002182:	78fb      	ldrb	r3, [r7, #3]
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4413      	add	r3, r2
 800218a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	78fa      	ldrb	r2, [r7, #3]
 8002192:	0151      	lsls	r1, r2, #5
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	440a      	add	r2, r1
 8002198:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800219c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80021a0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	334c      	adds	r3, #76	@ 0x4c
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	334c      	adds	r3, #76	@ 0x4c
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f007 fd55 	bl	8009c7c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	799b      	ldrb	r3, [r3, #6]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d13b      	bne.n	8002252 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80021da:	78fa      	ldrb	r2, [r7, #3]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	1a9b      	subs	r3, r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	3338      	adds	r3, #56	@ 0x38
 80021ea:	6819      	ldr	r1, [r3, #0]
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4403      	add	r3, r0
 80021fa:	3328      	adds	r3, #40	@ 0x28
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	440b      	add	r3, r1
 8002200:	1e59      	subs	r1, r3, #1
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4403      	add	r3, r0
 8002210:	3328      	adds	r3, #40	@ 0x28
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	fbb1 f3f3 	udiv	r3, r1, r3
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 8470 	beq.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	333c      	adds	r3, #60	@ 0x3c
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	f083 0301 	eor.w	r3, r3, #1
 800223a:	b2d8      	uxtb	r0, r3
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	333c      	adds	r3, #60	@ 0x3c
 800224a:	4602      	mov	r2, r0
 800224c:	701a      	strb	r2, [r3, #0]
 800224e:	f000 bc58 	b.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	333c      	adds	r3, #60	@ 0x3c
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	78fa      	ldrb	r2, [r7, #3]
 8002266:	f083 0301 	eor.w	r3, r3, #1
 800226a:	b2d8      	uxtb	r0, r3
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	333c      	adds	r3, #60	@ 0x3c
 800227a:	4602      	mov	r2, r0
 800227c:	701a      	strb	r2, [r3, #0]
 800227e:	f000 bc40 	b.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f003 fc61 	bl	8005b52 <USB_ReadChInterrupts>
 8002290:	4603      	mov	r3, r0
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	2b20      	cmp	r3, #32
 8002298:	d131      	bne.n	80022fe <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022a6:	461a      	mov	r2, r3
 80022a8:	2320      	movs	r3, #32
 80022aa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	331a      	adds	r3, #26
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	f040 841f 	bne.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	331b      	adds	r3, #27
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80022d8:	78fa      	ldrb	r2, [r7, #3]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	334d      	adds	r3, #77	@ 0x4d
 80022e8:	2203      	movs	r2, #3
 80022ea:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f004 f9d0 	bl	800669a <USB_HC_Halt>
 80022fa:	f000 bc02 	b.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f003 fc23 	bl	8005b52 <USB_ReadChInterrupts>
 800230c:	4603      	mov	r3, r0
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b02      	cmp	r3, #2
 8002314:	f040 8305 	bne.w	8002922 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002324:	461a      	mov	r2, r3
 8002326:	2302      	movs	r3, #2
 8002328:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	334d      	adds	r3, #77	@ 0x4d
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d114      	bne.n	800236a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	334d      	adds	r3, #77	@ 0x4d
 8002350:	2202      	movs	r2, #2
 8002352:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	334c      	adds	r3, #76	@ 0x4c
 8002364:	2201      	movs	r2, #1
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	e2cc      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	334d      	adds	r3, #77	@ 0x4d
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b06      	cmp	r3, #6
 800237e:	d114      	bne.n	80023aa <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	334d      	adds	r3, #77	@ 0x4d
 8002390:	2202      	movs	r2, #2
 8002392:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	334c      	adds	r3, #76	@ 0x4c
 80023a4:	2205      	movs	r2, #5
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	e2ac      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023aa:	78fa      	ldrb	r2, [r7, #3]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	1a9b      	subs	r3, r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	334d      	adds	r3, #77	@ 0x4d
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b07      	cmp	r3, #7
 80023be:	d00b      	beq.n	80023d8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	334d      	adds	r3, #77	@ 0x4d
 80023d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023d2:	2b09      	cmp	r3, #9
 80023d4:	f040 80a6 	bne.w	8002524 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	334d      	adds	r3, #77	@ 0x4d
 80023e8:	2202      	movs	r2, #2
 80023ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	3344      	adds	r3, #68	@ 0x44
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	1c59      	adds	r1, r3, #1
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4403      	add	r3, r0
 800240c:	3344      	adds	r3, #68	@ 0x44
 800240e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	3344      	adds	r3, #68	@ 0x44
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d943      	bls.n	80024ae <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002426:	78fa      	ldrb	r2, [r7, #3]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	3344      	adds	r3, #68	@ 0x44
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	331a      	adds	r3, #26
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d123      	bne.n	8002498 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002450:	78fa      	ldrb	r2, [r7, #3]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	331b      	adds	r3, #27
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	331c      	adds	r3, #28
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	78fa      	ldrb	r2, [r7, #3]
 8002488:	0151      	lsls	r1, r2, #5
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	440a      	add	r2, r1
 800248e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002496:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	334c      	adds	r3, #76	@ 0x4c
 80024a8:	2204      	movs	r2, #4
 80024aa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024ac:	e229      	b.n	8002902 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024ae:	78fa      	ldrb	r2, [r7, #3]
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	1a9b      	subs	r3, r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	334c      	adds	r3, #76	@ 0x4c
 80024be:	2202      	movs	r2, #2
 80024c0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	3326      	adds	r3, #38	@ 0x26
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00b      	beq.n	80024f0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024d8:	78fa      	ldrb	r2, [r7, #3]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	3326      	adds	r3, #38	@ 0x26
 80024e8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	f040 8209 	bne.w	8002902 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002506:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800250e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800251c:	461a      	mov	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002522:	e1ee      	b.n	8002902 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	334d      	adds	r3, #77	@ 0x4d
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b05      	cmp	r3, #5
 8002538:	f040 80c8 	bne.w	80026cc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	334d      	adds	r3, #77	@ 0x4d
 800254c:	2202      	movs	r2, #2
 800254e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	331b      	adds	r3, #27
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b01      	cmp	r3, #1
 8002564:	f040 81ce 	bne.w	8002904 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	3326      	adds	r3, #38	@ 0x26
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b03      	cmp	r3, #3
 800257c:	d16b      	bne.n	8002656 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	3348      	adds	r3, #72	@ 0x48
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	1c59      	adds	r1, r3, #1
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4403      	add	r3, r0
 800259e:	3348      	adds	r3, #72	@ 0x48
 80025a0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	1a9b      	subs	r3, r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	3348      	adds	r3, #72	@ 0x48
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d943      	bls.n	8002640 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	3348      	adds	r3, #72	@ 0x48
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	331b      	adds	r3, #27
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	3344      	adds	r3, #68	@ 0x44
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d809      	bhi.n	800260a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	331c      	adds	r3, #28
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800260a:	78fb      	ldrb	r3, [r7, #3]
 800260c:	015a      	lsls	r2, r3, #5
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4413      	add	r3, r2
 8002612:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	0151      	lsls	r1, r2, #5
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	440a      	add	r2, r1
 8002620:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002624:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002628:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800262a:	78fa      	ldrb	r2, [r7, #3]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	334c      	adds	r3, #76	@ 0x4c
 800263a:	2204      	movs	r2, #4
 800263c:	701a      	strb	r2, [r3, #0]
 800263e:	e014      	b.n	800266a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	334c      	adds	r3, #76	@ 0x4c
 8002650:	2202      	movs	r2, #2
 8002652:	701a      	strb	r2, [r3, #0]
 8002654:	e009      	b.n	800266a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	334c      	adds	r3, #76	@ 0x4c
 8002666:	2202      	movs	r2, #2
 8002668:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	3326      	adds	r3, #38	@ 0x26
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00b      	beq.n	8002698 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	3326      	adds	r3, #38	@ 0x26
 8002690:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002692:	2b02      	cmp	r3, #2
 8002694:	f040 8136 	bne.w	8002904 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026ae:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026b6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c4:	461a      	mov	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e11b      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	334d      	adds	r3, #77	@ 0x4d
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b03      	cmp	r3, #3
 80026e0:	f040 8081 	bne.w	80027e6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	334d      	adds	r3, #77	@ 0x4d
 80026f4:	2202      	movs	r2, #2
 80026f6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	331b      	adds	r3, #27
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	f040 80fa 	bne.w	8002904 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	334c      	adds	r3, #76	@ 0x4c
 8002720:	2202      	movs	r2, #2
 8002722:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	0151      	lsls	r1, r2, #5
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	440a      	add	r2, r1
 800273a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800273e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002742:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	0151      	lsls	r1, r2, #5
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	440a      	add	r2, r1
 800275a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800275e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002762:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002764:	78fb      	ldrb	r3, [r7, #3]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	78fa      	ldrb	r2, [r7, #3]
 8002774:	0151      	lsls	r1, r2, #5
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	440a      	add	r2, r1
 800277a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800277e:	f023 0320 	bic.w	r3, r3, #32
 8002782:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	3326      	adds	r3, #38	@ 0x26
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800279a:	78fa      	ldrb	r2, [r7, #3]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	3326      	adds	r3, #38	@ 0x26
 80027aa:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	f040 80a9 	bne.w	8002904 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	015a      	lsls	r2, r3, #5
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027c8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027d0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027de:	461a      	mov	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	e08e      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	334d      	adds	r3, #77	@ 0x4d
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d143      	bne.n	8002884 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	334d      	adds	r3, #77	@ 0x4d
 800280c:	2202      	movs	r2, #2
 800280e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	334c      	adds	r3, #76	@ 0x4c
 8002820:	2202      	movs	r2, #2
 8002822:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	3326      	adds	r3, #38	@ 0x26
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800283a:	78fa      	ldrb	r2, [r7, #3]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	1a9b      	subs	r3, r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	3326      	adds	r3, #38	@ 0x26
 800284a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800284c:	2b02      	cmp	r3, #2
 800284e:	d159      	bne.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002866:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800286e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800287c:	461a      	mov	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e03f      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	334d      	adds	r3, #77	@ 0x4d
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b08      	cmp	r3, #8
 8002898:	d126      	bne.n	80028e8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	334d      	adds	r3, #77	@ 0x4d
 80028aa:	2202      	movs	r2, #2
 80028ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	3344      	adds	r3, #68	@ 0x44
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	1c59      	adds	r1, r3, #1
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4403      	add	r3, r0
 80028ce:	3344      	adds	r3, #68	@ 0x44
 80028d0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80028d2:	78fa      	ldrb	r2, [r7, #3]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	334c      	adds	r3, #76	@ 0x4c
 80028e2:	2204      	movs	r2, #4
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e00d      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	334d      	adds	r3, #77	@ 0x4d
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	f000 8100 	beq.w	8002b00 <HCD_HC_IN_IRQHandler+0xcca>
 8002900:	e000      	b.n	8002904 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002902:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	334c      	adds	r3, #76	@ 0x4c
 8002914:	781a      	ldrb	r2, [r3, #0]
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	4619      	mov	r1, r3
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f007 f9ae 	bl	8009c7c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002920:	e0ef      	b.n	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f003 f911 	bl	8005b52 <USB_ReadChInterrupts>
 8002930:	4603      	mov	r3, r0
 8002932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002936:	2b40      	cmp	r3, #64	@ 0x40
 8002938:	d12f      	bne.n	800299a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002946:	461a      	mov	r2, r3
 8002948:	2340      	movs	r3, #64	@ 0x40
 800294a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	334d      	adds	r3, #77	@ 0x4d
 800295c:	2205      	movs	r2, #5
 800295e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	331a      	adds	r3, #26
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d109      	bne.n	800298a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002976:	78fa      	ldrb	r2, [r7, #3]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	3344      	adds	r3, #68	@ 0x44
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f003 fe81 	bl	800669a <USB_HC_Halt>
 8002998:	e0b3      	b.n	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	78fa      	ldrb	r2, [r7, #3]
 80029a0:	4611      	mov	r1, r2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f003 f8d5 	bl	8005b52 <USB_ReadChInterrupts>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b10      	cmp	r3, #16
 80029b0:	f040 80a7 	bne.w	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	3326      	adds	r3, #38	@ 0x26
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d11b      	bne.n	8002a02 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	3344      	adds	r3, #68	@ 0x44
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	334d      	adds	r3, #77	@ 0x4d
 80029ee:	2204      	movs	r2, #4
 80029f0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	4611      	mov	r1, r2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f003 fe4d 	bl	800669a <USB_HC_Halt>
 8002a00:	e03f      	b.n	8002a82 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a02:	78fa      	ldrb	r2, [r7, #3]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	3326      	adds	r3, #38	@ 0x26
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	3326      	adds	r3, #38	@ 0x26
 8002a28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d129      	bne.n	8002a82 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3344      	adds	r3, #68	@ 0x44
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	799b      	ldrb	r3, [r3, #6]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HCD_HC_IN_IRQHandler+0xc2a>
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	331b      	adds	r3, #27
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d110      	bne.n	8002a82 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a60:	78fa      	ldrb	r2, [r7, #3]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	334d      	adds	r3, #77	@ 0x4d
 8002a70:	2204      	movs	r2, #4
 8002a72:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f003 fe0c 	bl	800669a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a82:	78fa      	ldrb	r2, [r7, #3]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	331b      	adds	r3, #27
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d129      	bne.n	8002aec <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	331b      	adds	r3, #27
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	0151      	lsls	r1, r2, #5
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	440a      	add	r2, r1
 8002ac2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aca:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	0151      	lsls	r1, r2, #5
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	440a      	add	r2, r1
 8002ae2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ae6:	f043 0320 	orr.w	r3, r3, #32
 8002aea:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002af8:	461a      	mov	r2, r3
 8002afa:	2310      	movs	r3, #16
 8002afc:	6093      	str	r3, [r2, #8]
 8002afe:	e000      	b.n	8002b02 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b00:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f003 f813 	bl	8005b52 <USB_ReadChInterrupts>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d11b      	bne.n	8002b6e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	015a      	lsls	r2, r3, #5
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b42:	461a      	mov	r2, r3
 8002b44:	2304      	movs	r3, #4
 8002b46:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	334d      	adds	r3, #77	@ 0x4d
 8002b58:	2207      	movs	r2, #7
 8002b5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f003 fd98 	bl	800669a <USB_HC_Halt>
 8002b6a:	f000 bc6f 	b.w	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f002 ffeb 	bl	8005b52 <USB_ReadChInterrupts>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	f040 8082 	bne.w	8002c8c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b94:	461a      	mov	r2, r3
 8002b96:	2320      	movs	r3, #32
 8002b98:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	3319      	adds	r3, #25
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d124      	bne.n	8002bfa <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3319      	adds	r3, #25
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	334c      	adds	r3, #76	@ 0x4c
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	334d      	adds	r3, #77	@ 0x4d
 8002be8:	2203      	movs	r2, #3
 8002bea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f003 fd50 	bl	800669a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	331a      	adds	r3, #26
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	f040 841d 	bne.w	800344c <HCD_HC_OUT_IRQHandler+0x944>
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	331b      	adds	r3, #27
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f040 8411 	bne.w	800344c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	3326      	adds	r3, #38	@ 0x26
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d009      	beq.n	8002c54 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	331b      	adds	r3, #27
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	334d      	adds	r3, #77	@ 0x4d
 8002c64:	2203      	movs	r2, #3
 8002c66:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f003 fd12 	bl	800669a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	3344      	adds	r3, #68	@ 0x44
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e3df      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f002 ff5c 	bl	8005b52 <USB_ReadChInterrupts>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ca4:	d111      	bne.n	8002cca <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cb8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f003 fce9 	bl	800669a <USB_HC_Halt>
 8002cc8:	e3c0      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f002 ff3d 	bl	8005b52 <USB_ReadChInterrupts>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d168      	bne.n	8002db4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ce2:	78fa      	ldrb	r2, [r7, #3]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	3344      	adds	r3, #68	@ 0x44
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f002 ff27 	bl	8005b52 <USB_ReadChInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d0a:	2b40      	cmp	r3, #64	@ 0x40
 8002d0c:	d112      	bne.n	8002d34 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3319      	adds	r3, #25
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2340      	movs	r3, #64	@ 0x40
 8002d32:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	331b      	adds	r3, #27
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d019      	beq.n	8002d7e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	331b      	adds	r3, #27
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d5e:	78fb      	ldrb	r3, [r7, #3]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	0151      	lsls	r1, r2, #5
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	440a      	add	r2, r1
 8002d74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d7c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	334d      	adds	r3, #77	@ 0x4d
 8002da0:	2201      	movs	r2, #1
 8002da2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	4611      	mov	r1, r2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f003 fc74 	bl	800669a <USB_HC_Halt>
 8002db2:	e34b      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f002 fec8 	bl	8005b52 <USB_ReadChInterrupts>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc8:	2b40      	cmp	r3, #64	@ 0x40
 8002dca:	d139      	bne.n	8002e40 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	334d      	adds	r3, #77	@ 0x4d
 8002ddc:	2205      	movs	r2, #5
 8002dde:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	331a      	adds	r3, #26
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	3319      	adds	r3, #25
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	3344      	adds	r3, #68	@ 0x44
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	4611      	mov	r1, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f003 fc37 	bl	800669a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e38:	461a      	mov	r2, r3
 8002e3a:	2340      	movs	r3, #64	@ 0x40
 8002e3c:	6093      	str	r3, [r2, #8]
 8002e3e:	e305      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f002 fe82 	bl	8005b52 <USB_ReadChInterrupts>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d11a      	bne.n	8002e8e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e64:	461a      	mov	r2, r3
 8002e66:	2308      	movs	r3, #8
 8002e68:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e6a:	78fa      	ldrb	r2, [r7, #3]
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	334d      	adds	r3, #77	@ 0x4d
 8002e7a:	2206      	movs	r2, #6
 8002e7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	4611      	mov	r1, r2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f003 fc07 	bl	800669a <USB_HC_Halt>
 8002e8c:	e2de      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	78fa      	ldrb	r2, [r7, #3]
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f002 fe5b 	bl	8005b52 <USB_ReadChInterrupts>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b10      	cmp	r3, #16
 8002ea4:	d144      	bne.n	8002f30 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	3344      	adds	r3, #68	@ 0x44
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	334d      	adds	r3, #77	@ 0x4d
 8002eca:	2204      	movs	r2, #4
 8002ecc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	3319      	adds	r3, #25
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d114      	bne.n	8002f0e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3318      	adds	r3, #24
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	3319      	adds	r3, #25
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f003 fbbf 	bl	800669a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f28:	461a      	mov	r2, r3
 8002f2a:	2310      	movs	r3, #16
 8002f2c:	6093      	str	r3, [r2, #8]
 8002f2e:	e28d      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	78fa      	ldrb	r2, [r7, #3]
 8002f36:	4611      	mov	r1, r2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f002 fe0a 	bl	8005b52 <USB_ReadChInterrupts>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f44:	2b80      	cmp	r3, #128	@ 0x80
 8002f46:	d169      	bne.n	800301c <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	799b      	ldrb	r3, [r3, #6]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d111      	bne.n	8002f74 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	334d      	adds	r3, #77	@ 0x4d
 8002f60:	2207      	movs	r2, #7
 8002f62:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f003 fb94 	bl	800669a <USB_HC_Halt>
 8002f72:	e049      	b.n	8003008 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	3344      	adds	r3, #68	@ 0x44
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	1c59      	adds	r1, r3, #1
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4403      	add	r3, r0
 8002f94:	3344      	adds	r3, #68	@ 0x44
 8002f96:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3344      	adds	r3, #68	@ 0x44
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d922      	bls.n	8002ff4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	3344      	adds	r3, #68	@ 0x44
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	334c      	adds	r3, #76	@ 0x4c
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	334c      	adds	r3, #76	@ 0x4c
 8002fe6:	781a      	ldrb	r2, [r3, #0]
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	4619      	mov	r1, r3
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f006 fe45 	bl	8009c7c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ff2:	e009      	b.n	8003008 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	334c      	adds	r3, #76	@ 0x4c
 8003004:	2202      	movs	r2, #2
 8003006:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4413      	add	r3, r2
 8003010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003014:	461a      	mov	r2, r3
 8003016:	2380      	movs	r3, #128	@ 0x80
 8003018:	6093      	str	r3, [r2, #8]
 800301a:	e217      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f002 fd94 	bl	8005b52 <USB_ReadChInterrupts>
 800302a:	4603      	mov	r3, r0
 800302c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003034:	d11b      	bne.n	800306e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	334d      	adds	r3, #77	@ 0x4d
 8003046:	2209      	movs	r2, #9
 8003048:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f003 fb21 	bl	800669a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4413      	add	r3, r2
 8003060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003064:	461a      	mov	r2, r3
 8003066:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800306a:	6093      	str	r3, [r2, #8]
 800306c:	e1ee      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f002 fd6b 	bl	8005b52 <USB_ReadChInterrupts>
 800307c:	4603      	mov	r3, r0
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b02      	cmp	r3, #2
 8003084:	f040 81df 	bne.w	8003446 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4413      	add	r3, r2
 8003090:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003094:	461a      	mov	r2, r3
 8003096:	2302      	movs	r3, #2
 8003098:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	334d      	adds	r3, #77	@ 0x4d
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	f040 8093 	bne.w	80031d8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	334d      	adds	r3, #77	@ 0x4d
 80030c2:	2202      	movs	r2, #2
 80030c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	334c      	adds	r3, #76	@ 0x4c
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	3326      	adds	r3, #38	@ 0x26
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d00b      	beq.n	8003108 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	3326      	adds	r3, #38	@ 0x26
 8003100:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003102:	2b03      	cmp	r3, #3
 8003104:	f040 8190 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	799b      	ldrb	r3, [r3, #6]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d115      	bne.n	800313c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	333d      	adds	r3, #61	@ 0x3d
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	f083 0301 	eor.w	r3, r3, #1
 8003128:	b2d8      	uxtb	r0, r3
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	333d      	adds	r3, #61	@ 0x3d
 8003138:	4602      	mov	r2, r0
 800313a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	799b      	ldrb	r3, [r3, #6]
 8003140:	2b01      	cmp	r3, #1
 8003142:	f040 8171 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x920>
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	3334      	adds	r3, #52	@ 0x34
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8165 	beq.w	8003428 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	3334      	adds	r3, #52	@ 0x34
 800316e:	6819      	ldr	r1, [r3, #0]
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4403      	add	r3, r0
 800317e:	3328      	adds	r3, #40	@ 0x28
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	440b      	add	r3, r1
 8003184:	1e59      	subs	r1, r3, #1
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4403      	add	r3, r0
 8003194:	3328      	adds	r3, #40	@ 0x28
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	fbb1 f3f3 	udiv	r3, r1, r3
 800319c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 813f 	beq.w	8003428 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	333d      	adds	r3, #61	@ 0x3d
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	f083 0301 	eor.w	r3, r3, #1
 80031c2:	b2d8      	uxtb	r0, r3
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	333d      	adds	r3, #61	@ 0x3d
 80031d2:	4602      	mov	r2, r0
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	e127      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	334d      	adds	r3, #77	@ 0x4d
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d120      	bne.n	8003230 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	334d      	adds	r3, #77	@ 0x4d
 80031fe:	2202      	movs	r2, #2
 8003200:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	331b      	adds	r3, #27
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b01      	cmp	r3, #1
 8003216:	f040 8107 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	334c      	adds	r3, #76	@ 0x4c
 800322a:	2202      	movs	r2, #2
 800322c:	701a      	strb	r2, [r3, #0]
 800322e:	e0fb      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	334d      	adds	r3, #77	@ 0x4d
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b04      	cmp	r3, #4
 8003244:	d13a      	bne.n	80032bc <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	334d      	adds	r3, #77	@ 0x4d
 8003256:	2202      	movs	r2, #2
 8003258:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	334c      	adds	r3, #76	@ 0x4c
 800326a:	2202      	movs	r2, #2
 800326c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	331b      	adds	r3, #27
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b01      	cmp	r3, #1
 8003282:	f040 80d1 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	331b      	adds	r3, #27
 8003296:	2200      	movs	r2, #0
 8003298:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	78fa      	ldrb	r2, [r7, #3]
 80032aa:	0151      	lsls	r1, r2, #5
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	440a      	add	r2, r1
 80032b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b8:	6053      	str	r3, [r2, #4]
 80032ba:	e0b5      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	334d      	adds	r3, #77	@ 0x4d
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b05      	cmp	r3, #5
 80032d0:	d114      	bne.n	80032fc <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	334d      	adds	r3, #77	@ 0x4d
 80032e2:	2202      	movs	r2, #2
 80032e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	334c      	adds	r3, #76	@ 0x4c
 80032f6:	2202      	movs	r2, #2
 80032f8:	701a      	strb	r2, [r3, #0]
 80032fa:	e095      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	334d      	adds	r3, #77	@ 0x4d
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b06      	cmp	r3, #6
 8003310:	d114      	bne.n	800333c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	334d      	adds	r3, #77	@ 0x4d
 8003322:	2202      	movs	r2, #2
 8003324:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	334c      	adds	r3, #76	@ 0x4c
 8003336:	2205      	movs	r2, #5
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e075      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	334d      	adds	r3, #77	@ 0x4d
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b07      	cmp	r3, #7
 8003350:	d00a      	beq.n	8003368 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	334d      	adds	r3, #77	@ 0x4d
 8003362:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003364:	2b09      	cmp	r3, #9
 8003366:	d170      	bne.n	800344a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003368:	78fa      	ldrb	r2, [r7, #3]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	334d      	adds	r3, #77	@ 0x4d
 8003378:	2202      	movs	r2, #2
 800337a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	3344      	adds	r3, #68	@ 0x44
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	1c59      	adds	r1, r3, #1
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4403      	add	r3, r0
 800339c:	3344      	adds	r3, #68	@ 0x44
 800339e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	3344      	adds	r3, #68	@ 0x44
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d914      	bls.n	80033e0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	3344      	adds	r3, #68	@ 0x44
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	334c      	adds	r3, #76	@ 0x4c
 80033da:	2204      	movs	r2, #4
 80033dc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033de:	e022      	b.n	8003426 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	334c      	adds	r3, #76	@ 0x4c
 80033f0:	2202      	movs	r2, #2
 80033f2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800340a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003412:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003420:	461a      	mov	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003426:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	334c      	adds	r3, #76	@ 0x4c
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	4619      	mov	r1, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f006 fc1c 	bl	8009c7c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003444:	e002      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003446:	bf00      	nop
 8003448:	e000      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800344a:	bf00      	nop
  }
}
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b08a      	sub	sp, #40	@ 0x28
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003462:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	0c5b      	lsrs	r3, r3, #17
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003486:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d004      	beq.n	8003498 <HCD_RXQLVL_IRQHandler+0x46>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b05      	cmp	r3, #5
 8003492:	f000 80b6 	beq.w	8003602 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003496:	e0b7      	b.n	8003608 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 80b3 	beq.w	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	332c      	adds	r3, #44	@ 0x2c
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80a7 	beq.w	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	3338      	adds	r3, #56	@ 0x38
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	18d1      	adds	r1, r2, r3
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4403      	add	r3, r0
 80034dc:	3334      	adds	r3, #52	@ 0x34
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4299      	cmp	r1, r3
 80034e2:	f200 8083 	bhi.w	80035ec <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	332c      	adds	r3, #44	@ 0x2c
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	b292      	uxth	r2, r2
 8003500:	4619      	mov	r1, r3
 8003502:	f002 fabb 	bl	8005a7c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4613      	mov	r3, r2
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	332c      	adds	r3, #44	@ 0x2c
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	18d1      	adds	r1, r2, r3
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4613      	mov	r3, r2
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4403      	add	r3, r0
 800352a:	332c      	adds	r3, #44	@ 0x2c
 800352c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	3338      	adds	r3, #56	@ 0x38
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	18d1      	adds	r1, r2, r3
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4403      	add	r3, r0
 8003552:	3338      	adds	r3, #56	@ 0x38
 8003554:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	4413      	add	r3, r2
 800355e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	0cdb      	lsrs	r3, r3, #19
 8003566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800356a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4613      	mov	r3, r2
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	3328      	adds	r3, #40	@ 0x28
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4293      	cmp	r3, r2
 8003584:	d13f      	bne.n	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d03c      	beq.n	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	4413      	add	r3, r2
 8003594:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035a2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035aa:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035b8:	461a      	mov	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	333c      	adds	r3, #60	@ 0x3c
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	f083 0301 	eor.w	r3, r3, #1
 80035d4:	b2d8      	uxtb	r0, r3
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4613      	mov	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	333c      	adds	r3, #60	@ 0x3c
 80035e6:	4602      	mov	r2, r0
 80035e8:	701a      	strb	r2, [r3, #0]
      break;
 80035ea:	e00c      	b.n	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	334c      	adds	r3, #76	@ 0x4c
 80035fc:	2204      	movs	r2, #4
 80035fe:	701a      	strb	r2, [r3, #0]
      break;
 8003600:	e001      	b.n	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003606:	bf00      	nop
  }
}
 8003608:	bf00      	nop
 800360a:	3728      	adds	r7, #40	@ 0x28
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800363c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b02      	cmp	r3, #2
 8003646:	d10b      	bne.n	8003660 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d102      	bne.n	8003658 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f006 faf6 	bl	8009c44 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f043 0302 	orr.w	r3, r3, #2
 800365e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b08      	cmp	r3, #8
 8003668:	d132      	bne.n	80036d0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f043 0308 	orr.w	r3, r3, #8
 8003670:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b04      	cmp	r3, #4
 800367a:	d126      	bne.n	80036ca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	7a5b      	ldrb	r3, [r3, #9]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d113      	bne.n	80036ac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800368a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800368e:	d106      	bne.n	800369e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2102      	movs	r1, #2
 8003696:	4618      	mov	r0, r3
 8003698:	f002 fb80 	bl	8005d9c <USB_InitFSLSPClkSel>
 800369c:	e011      	b.n	80036c2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f002 fb79 	bl	8005d9c <USB_InitFSLSPClkSel>
 80036aa:	e00a      	b.n	80036c2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	79db      	ldrb	r3, [r3, #7]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d106      	bne.n	80036c2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036ba:	461a      	mov	r2, r3
 80036bc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80036c0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f006 fae8 	bl	8009c98 <HAL_HCD_PortEnabled_Callback>
 80036c8:	e002      	b.n	80036d0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f006 faf2 	bl	8009cb4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d103      	bne.n	80036e2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f043 0320 	orr.w	r3, r3, #32
 80036e0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036e8:	461a      	mov	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	6013      	str	r3, [r2, #0]
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e12b      	b.n	8003962 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fd f9b2 	bl	8000a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2224      	movs	r2, #36	@ 0x24
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0201 	bic.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800374a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800375a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800375c:	f001 fa20 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 8003760:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4a81      	ldr	r2, [pc, #516]	@ (800396c <HAL_I2C_Init+0x274>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d807      	bhi.n	800377c <HAL_I2C_Init+0x84>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4a80      	ldr	r2, [pc, #512]	@ (8003970 <HAL_I2C_Init+0x278>)
 8003770:	4293      	cmp	r3, r2
 8003772:	bf94      	ite	ls
 8003774:	2301      	movls	r3, #1
 8003776:	2300      	movhi	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	e006      	b.n	800378a <HAL_I2C_Init+0x92>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4a7d      	ldr	r2, [pc, #500]	@ (8003974 <HAL_I2C_Init+0x27c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	bf94      	ite	ls
 8003784:	2301      	movls	r3, #1
 8003786:	2300      	movhi	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e0e7      	b.n	8003962 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4a78      	ldr	r2, [pc, #480]	@ (8003978 <HAL_I2C_Init+0x280>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	0c9b      	lsrs	r3, r3, #18
 800379c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	4a6a      	ldr	r2, [pc, #424]	@ (800396c <HAL_I2C_Init+0x274>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d802      	bhi.n	80037cc <HAL_I2C_Init+0xd4>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	3301      	adds	r3, #1
 80037ca:	e009      	b.n	80037e0 <HAL_I2C_Init+0xe8>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	4a69      	ldr	r2, [pc, #420]	@ (800397c <HAL_I2C_Init+0x284>)
 80037d8:	fba2 2303 	umull	r2, r3, r2, r3
 80037dc:	099b      	lsrs	r3, r3, #6
 80037de:	3301      	adds	r3, #1
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	430b      	orrs	r3, r1
 80037e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	495c      	ldr	r1, [pc, #368]	@ (800396c <HAL_I2C_Init+0x274>)
 80037fc:	428b      	cmp	r3, r1
 80037fe:	d819      	bhi.n	8003834 <HAL_I2C_Init+0x13c>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	1e59      	subs	r1, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	fbb1 f3f3 	udiv	r3, r1, r3
 800380e:	1c59      	adds	r1, r3, #1
 8003810:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003814:	400b      	ands	r3, r1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_I2C_Init+0x138>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1e59      	subs	r1, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	fbb1 f3f3 	udiv	r3, r1, r3
 8003828:	3301      	adds	r3, #1
 800382a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382e:	e051      	b.n	80038d4 <HAL_I2C_Init+0x1dc>
 8003830:	2304      	movs	r3, #4
 8003832:	e04f      	b.n	80038d4 <HAL_I2C_Init+0x1dc>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d111      	bne.n	8003860 <HAL_I2C_Init+0x168>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1e58      	subs	r0, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6859      	ldr	r1, [r3, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	440b      	add	r3, r1
 800384a:	fbb0 f3f3 	udiv	r3, r0, r3
 800384e:	3301      	adds	r3, #1
 8003850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	e012      	b.n	8003886 <HAL_I2C_Init+0x18e>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1e58      	subs	r0, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6859      	ldr	r1, [r3, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	0099      	lsls	r1, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	fbb0 f3f3 	udiv	r3, r0, r3
 8003876:	3301      	adds	r3, #1
 8003878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf0c      	ite	eq
 8003880:	2301      	moveq	r3, #1
 8003882:	2300      	movne	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Init+0x196>
 800388a:	2301      	movs	r3, #1
 800388c:	e022      	b.n	80038d4 <HAL_I2C_Init+0x1dc>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10e      	bne.n	80038b4 <HAL_I2C_Init+0x1bc>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1e58      	subs	r0, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6859      	ldr	r1, [r3, #4]
 800389e:	460b      	mov	r3, r1
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	440b      	add	r3, r1
 80038a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a8:	3301      	adds	r3, #1
 80038aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038b2:	e00f      	b.n	80038d4 <HAL_I2C_Init+0x1dc>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1e58      	subs	r0, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6859      	ldr	r1, [r3, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	0099      	lsls	r1, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ca:	3301      	adds	r3, #1
 80038cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	6809      	ldr	r1, [r1, #0]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003902:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6911      	ldr	r1, [r2, #16]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68d2      	ldr	r2, [r2, #12]
 800390e:	4311      	orrs	r1, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	430b      	orrs	r3, r1
 8003916:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	000186a0 	.word	0x000186a0
 8003970:	001e847f 	.word	0x001e847f
 8003974:	003d08ff 	.word	0x003d08ff
 8003978:	431bde83 	.word	0x431bde83
 800397c:	10624dd3 	.word	0x10624dd3

08003980 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e128      	b.n	8003be4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a90      	ldr	r2, [pc, #576]	@ (8003bec <HAL_I2S_Init+0x26c>)
 80039aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7fd f8b3 	bl	8000b18 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80039c8:	f023 030f 	bic.w	r3, r3, #15
 80039cc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2202      	movs	r2, #2
 80039d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d060      	beq.n	8003aa0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039e6:	2310      	movs	r3, #16
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	e001      	b.n	80039f0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039ec:	2320      	movs	r3, #32
 80039ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d802      	bhi.n	80039fe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039fe:	2001      	movs	r0, #1
 8003a00:	f001 f9d8 	bl	8004db4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a04:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a0e:	d125      	bne.n	8003a5c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d010      	beq.n	8003a3a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	3305      	adds	r3, #5
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	e01f      	b.n	8003a7a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a56:	3305      	adds	r3, #5
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	e00e      	b.n	8003a7a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a76:	3305      	adds	r3, #5
 8003a78:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4a5c      	ldr	r2, [pc, #368]	@ (8003bf0 <HAL_I2S_Init+0x270>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	08db      	lsrs	r3, r3, #3
 8003a84:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	085b      	lsrs	r3, r3, #1
 8003a96:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	e003      	b.n	8003aa8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d902      	bls.n	8003ab4 <HAL_I2S_Init+0x134>
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	2bff      	cmp	r3, #255	@ 0xff
 8003ab2:	d907      	bls.n	8003ac4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab8:	f043 0210 	orr.w	r2, r3, #16
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e08f      	b.n	8003be4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	ea42 0103 	orr.w	r1, r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ae2:	f023 030f 	bic.w	r3, r3, #15
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6851      	ldr	r1, [r2, #4]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6892      	ldr	r2, [r2, #8]
 8003aee:	4311      	orrs	r1, r2
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	68d2      	ldr	r2, [r2, #12]
 8003af4:	4311      	orrs	r1, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6992      	ldr	r2, [r2, #24]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b06:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d161      	bne.n	8003bd4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a38      	ldr	r2, [pc, #224]	@ (8003bf4 <HAL_I2S_Init+0x274>)
 8003b14:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a37      	ldr	r2, [pc, #220]	@ (8003bf8 <HAL_I2S_Init+0x278>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d101      	bne.n	8003b24 <HAL_I2S_Init+0x1a4>
 8003b20:	4b36      	ldr	r3, [pc, #216]	@ (8003bfc <HAL_I2S_Init+0x27c>)
 8003b22:	e001      	b.n	8003b28 <HAL_I2S_Init+0x1a8>
 8003b24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	4932      	ldr	r1, [pc, #200]	@ (8003bf8 <HAL_I2S_Init+0x278>)
 8003b30:	428a      	cmp	r2, r1
 8003b32:	d101      	bne.n	8003b38 <HAL_I2S_Init+0x1b8>
 8003b34:	4a31      	ldr	r2, [pc, #196]	@ (8003bfc <HAL_I2S_Init+0x27c>)
 8003b36:	e001      	b.n	8003b3c <HAL_I2S_Init+0x1bc>
 8003b38:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003b3c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b40:	f023 030f 	bic.w	r3, r3, #15
 8003b44:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf8 <HAL_I2S_Init+0x278>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <HAL_I2S_Init+0x1d4>
 8003b50:	4b2a      	ldr	r3, [pc, #168]	@ (8003bfc <HAL_I2S_Init+0x27c>)
 8003b52:	e001      	b.n	8003b58 <HAL_I2S_Init+0x1d8>
 8003b54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b58:	2202      	movs	r2, #2
 8003b5a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a25      	ldr	r2, [pc, #148]	@ (8003bf8 <HAL_I2S_Init+0x278>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d101      	bne.n	8003b6a <HAL_I2S_Init+0x1ea>
 8003b66:	4b25      	ldr	r3, [pc, #148]	@ (8003bfc <HAL_I2S_Init+0x27c>)
 8003b68:	e001      	b.n	8003b6e <HAL_I2S_Init+0x1ee>
 8003b6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b7a:	d003      	beq.n	8003b84 <HAL_I2S_Init+0x204>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d103      	bne.n	8003b8c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	e001      	b.n	8003b90 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	897b      	ldrh	r3, [r7, #10]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003bbc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf8 <HAL_I2S_Init+0x278>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d101      	bne.n	8003bcc <HAL_I2S_Init+0x24c>
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bfc <HAL_I2S_Init+0x27c>)
 8003bca:	e001      	b.n	8003bd0 <HAL_I2S_Init+0x250>
 8003bcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bd0:	897a      	ldrh	r2, [r7, #10]
 8003bd2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3720      	adds	r7, #32
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	08003cf7 	.word	0x08003cf7
 8003bf0:	cccccccd 	.word	0xcccccccd
 8003bf4:	08003e0d 	.word	0x08003e0d
 8003bf8:	40003800 	.word	0x40003800
 8003bfc:	40003400 	.word	0x40003400

08003c00 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c48:	881a      	ldrh	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	1c9a      	adds	r2, r3, #2
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10e      	bne.n	8003c90 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c80:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7ff ffb8 	bl	8003c00 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003caa:	b292      	uxth	r2, r2
 8003cac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb2:	1c9a      	adds	r2, r3, #2
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10e      	bne.n	8003cee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cde:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff ff93 	bl	8003c14 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b086      	sub	sp, #24
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d13a      	bne.n	8003d88 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d109      	bne.n	8003d30 <I2S_IRQHandler+0x3a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d26:	2b40      	cmp	r3, #64	@ 0x40
 8003d28:	d102      	bne.n	8003d30 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff ffb4 	bl	8003c98 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d36:	2b40      	cmp	r3, #64	@ 0x40
 8003d38:	d126      	bne.n	8003d88 <I2S_IRQHandler+0x92>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d11f      	bne.n	8003d88 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7a:	f043 0202 	orr.w	r2, r3, #2
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ff50 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d136      	bne.n	8003e02 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d109      	bne.n	8003db2 <I2S_IRQHandler+0xbc>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da8:	2b80      	cmp	r3, #128	@ 0x80
 8003daa:	d102      	bne.n	8003db2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff ff45 	bl	8003c3c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d122      	bne.n	8003e02 <I2S_IRQHandler+0x10c>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d11b      	bne.n	8003e02 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003dd8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df4:	f043 0204 	orr.w	r2, r3, #4
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff13 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e02:	bf00      	nop
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a92      	ldr	r2, [pc, #584]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d101      	bne.n	8003e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e26:	4b92      	ldr	r3, [pc, #584]	@ (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e28:	e001      	b.n	8003e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a8b      	ldr	r2, [pc, #556]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d101      	bne.n	8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e44:	4b8a      	ldr	r3, [pc, #552]	@ (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e46:	e001      	b.n	8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e58:	d004      	beq.n	8003e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f040 8099 	bne.w	8003f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d107      	bne.n	8003e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f925 	bl	80040c8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d107      	bne.n	8003e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f9c8 	bl	8004228 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ea0:	d13a      	bne.n	8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d035      	beq.n	8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a6e      	ldr	r2, [pc, #440]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d101      	bne.n	8003eba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003eb6:	4b6e      	ldr	r3, [pc, #440]	@ (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eb8:	e001      	b.n	8003ebe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003eba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4969      	ldr	r1, [pc, #420]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ec6:	428b      	cmp	r3, r1
 8003ec8:	d101      	bne.n	8003ece <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003eca:	4b69      	ldr	r3, [pc, #420]	@ (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ecc:	e001      	b.n	8003ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003ece:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ed2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ed6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ee6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0a:	f043 0202 	orr.w	r2, r3, #2
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff fe88 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	f040 80c3 	bne.w	80040aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 80bd 	beq.w	80040aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f3e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a49      	ldr	r2, [pc, #292]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d101      	bne.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f4a:	4b49      	ldr	r3, [pc, #292]	@ (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f4c:	e001      	b.n	8003f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4944      	ldr	r1, [pc, #272]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f5a:	428b      	cmp	r3, r1
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f5e:	4b44      	ldr	r3, [pc, #272]	@ (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f60:	e001      	b.n	8003f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f66:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f6a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	f043 0204 	orr.w	r2, r3, #4
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff fe4a 	bl	8003c28 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f94:	e089      	b.n	80040aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d107      	bne.n	8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f8be 	bl	800412c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d107      	bne.n	8003fca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f8fd 	bl	80041c4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd0:	2b40      	cmp	r3, #64	@ 0x40
 8003fd2:	d12f      	bne.n	8004034 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d02a      	beq.n	8004034 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d101      	bne.n	8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ffa:	e001      	b.n	8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003ffc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4919      	ldr	r1, [pc, #100]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004008:	428b      	cmp	r3, r1
 800400a:	d101      	bne.n	8004010 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800400c:	4b18      	ldr	r3, [pc, #96]	@ (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800400e:	e001      	b.n	8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004010:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004014:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004018:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004026:	f043 0202 	orr.w	r2, r3, #2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff fdfa 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b08      	cmp	r3, #8
 800403c:	d136      	bne.n	80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b00      	cmp	r3, #0
 8004046:	d031      	beq.n	80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a07      	ldr	r2, [pc, #28]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d101      	bne.n	8004056 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004052:	4b07      	ldr	r3, [pc, #28]	@ (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004054:	e001      	b.n	800405a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004056:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4902      	ldr	r1, [pc, #8]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004062:	428b      	cmp	r3, r1
 8004064:	d106      	bne.n	8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004066:	4b02      	ldr	r3, [pc, #8]	@ (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004068:	e006      	b.n	8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800406a:	bf00      	nop
 800406c:	40003800 	.word	0x40003800
 8004070:	40003400 	.word	0x40003400
 8004074:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004078:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800407c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800408c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409a:	f043 0204 	orr.w	r2, r3, #4
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff fdc0 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040a8:	e000      	b.n	80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040aa:	bf00      	nop
}
 80040ac:	bf00      	nop
 80040ae:	3720      	adds	r7, #32
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	1c99      	adds	r1, r3, #2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6251      	str	r1, [r2, #36]	@ 0x24
 80040da:	881a      	ldrh	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d113      	bne.n	8004122 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004108:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d106      	bne.n	8004122 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff ffc9 	bl	80040b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	1c99      	adds	r1, r3, #2
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6251      	str	r1, [r2, #36]	@ 0x24
 800413e:	8819      	ldrh	r1, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1d      	ldr	r2, [pc, #116]	@ (80041bc <I2SEx_TxISR_I2SExt+0x90>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d101      	bne.n	800414e <I2SEx_TxISR_I2SExt+0x22>
 800414a:	4b1d      	ldr	r3, [pc, #116]	@ (80041c0 <I2SEx_TxISR_I2SExt+0x94>)
 800414c:	e001      	b.n	8004152 <I2SEx_TxISR_I2SExt+0x26>
 800414e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004152:	460a      	mov	r2, r1
 8004154:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d121      	bne.n	80041b2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a12      	ldr	r2, [pc, #72]	@ (80041bc <I2SEx_TxISR_I2SExt+0x90>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d101      	bne.n	800417c <I2SEx_TxISR_I2SExt+0x50>
 8004178:	4b11      	ldr	r3, [pc, #68]	@ (80041c0 <I2SEx_TxISR_I2SExt+0x94>)
 800417a:	e001      	b.n	8004180 <I2SEx_TxISR_I2SExt+0x54>
 800417c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	490d      	ldr	r1, [pc, #52]	@ (80041bc <I2SEx_TxISR_I2SExt+0x90>)
 8004188:	428b      	cmp	r3, r1
 800418a:	d101      	bne.n	8004190 <I2SEx_TxISR_I2SExt+0x64>
 800418c:	4b0c      	ldr	r3, [pc, #48]	@ (80041c0 <I2SEx_TxISR_I2SExt+0x94>)
 800418e:	e001      	b.n	8004194 <I2SEx_TxISR_I2SExt+0x68>
 8004190:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004194:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004198:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d106      	bne.n	80041b2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff ff81 	bl	80040b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40003800 	.word	0x40003800
 80041c0:	40003400 	.word	0x40003400

080041c4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68d8      	ldr	r0, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d6:	1c99      	adds	r1, r3, #2
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80041dc:	b282      	uxth	r2, r0
 80041de:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d113      	bne.n	8004220 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004206:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff ff4a 	bl	80040b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a20      	ldr	r2, [pc, #128]	@ (80042b8 <I2SEx_RxISR_I2SExt+0x90>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d101      	bne.n	800423e <I2SEx_RxISR_I2SExt+0x16>
 800423a:	4b20      	ldr	r3, [pc, #128]	@ (80042bc <I2SEx_RxISR_I2SExt+0x94>)
 800423c:	e001      	b.n	8004242 <I2SEx_RxISR_I2SExt+0x1a>
 800423e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004242:	68d8      	ldr	r0, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004248:	1c99      	adds	r1, r3, #2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800424e:	b282      	uxth	r2, r0
 8004250:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d121      	bne.n	80042ae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a12      	ldr	r2, [pc, #72]	@ (80042b8 <I2SEx_RxISR_I2SExt+0x90>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d101      	bne.n	8004278 <I2SEx_RxISR_I2SExt+0x50>
 8004274:	4b11      	ldr	r3, [pc, #68]	@ (80042bc <I2SEx_RxISR_I2SExt+0x94>)
 8004276:	e001      	b.n	800427c <I2SEx_RxISR_I2SExt+0x54>
 8004278:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	490d      	ldr	r1, [pc, #52]	@ (80042b8 <I2SEx_RxISR_I2SExt+0x90>)
 8004284:	428b      	cmp	r3, r1
 8004286:	d101      	bne.n	800428c <I2SEx_RxISR_I2SExt+0x64>
 8004288:	4b0c      	ldr	r3, [pc, #48]	@ (80042bc <I2SEx_RxISR_I2SExt+0x94>)
 800428a:	e001      	b.n	8004290 <I2SEx_RxISR_I2SExt+0x68>
 800428c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004290:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004294:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff ff03 	bl	80040b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40003800 	.word	0x40003800
 80042bc:	40003400 	.word	0x40003400

080042c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e267      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d075      	beq.n	80043ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042de:	4b88      	ldr	r3, [pc, #544]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d00c      	beq.n	8004304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ea:	4b85      	ldr	r3, [pc, #532]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d112      	bne.n	800431c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042f6:	4b82      	ldr	r3, [pc, #520]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004302:	d10b      	bne.n	800431c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	4b7e      	ldr	r3, [pc, #504]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d05b      	beq.n	80043c8 <HAL_RCC_OscConfig+0x108>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d157      	bne.n	80043c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e242      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004324:	d106      	bne.n	8004334 <HAL_RCC_OscConfig+0x74>
 8004326:	4b76      	ldr	r3, [pc, #472]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a75      	ldr	r2, [pc, #468]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e01d      	b.n	8004370 <HAL_RCC_OscConfig+0xb0>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800433c:	d10c      	bne.n	8004358 <HAL_RCC_OscConfig+0x98>
 800433e:	4b70      	ldr	r3, [pc, #448]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a6f      	ldr	r2, [pc, #444]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004344:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	4b6d      	ldr	r3, [pc, #436]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a6c      	ldr	r2, [pc, #432]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e00b      	b.n	8004370 <HAL_RCC_OscConfig+0xb0>
 8004358:	4b69      	ldr	r3, [pc, #420]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a68      	ldr	r2, [pc, #416]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800435e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	4b66      	ldr	r3, [pc, #408]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a65      	ldr	r2, [pc, #404]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800436a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800436e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d013      	beq.n	80043a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f002 fc68 	bl	8006c4c <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004380:	f002 fc64 	bl	8006c4c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	@ 0x64
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e207      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004392:	4b5b      	ldr	r3, [pc, #364]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0f0      	beq.n	8004380 <HAL_RCC_OscConfig+0xc0>
 800439e:	e014      	b.n	80043ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f002 fc54 	bl	8006c4c <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a8:	f002 fc50 	bl	8006c4c <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	@ 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e1f3      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ba:	4b51      	ldr	r3, [pc, #324]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0xe8>
 80043c6:	e000      	b.n	80043ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d063      	beq.n	800449e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e2:	4b47      	ldr	r3, [pc, #284]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d11c      	bne.n	8004428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ee:	4b44      	ldr	r3, [pc, #272]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d116      	bne.n	8004428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fa:	4b41      	ldr	r3, [pc, #260]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_RCC_OscConfig+0x152>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d001      	beq.n	8004412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e1c7      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004412:	4b3b      	ldr	r3, [pc, #236]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4937      	ldr	r1, [pc, #220]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004426:	e03a      	b.n	800449e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d020      	beq.n	8004472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004430:	4b34      	ldr	r3, [pc, #208]	@ (8004504 <HAL_RCC_OscConfig+0x244>)
 8004432:	2201      	movs	r2, #1
 8004434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004436:	f002 fc09 	bl	8006c4c <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800443e:	f002 fc05 	bl	8006c4c <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e1a8      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004450:	4b2b      	ldr	r3, [pc, #172]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445c:	4b28      	ldr	r3, [pc, #160]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	4925      	ldr	r1, [pc, #148]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800446c:	4313      	orrs	r3, r2
 800446e:	600b      	str	r3, [r1, #0]
 8004470:	e015      	b.n	800449e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004472:	4b24      	ldr	r3, [pc, #144]	@ (8004504 <HAL_RCC_OscConfig+0x244>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f002 fbe8 	bl	8006c4c <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004480:	f002 fbe4 	bl	8006c4c <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e187      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004492:	4b1b      	ldr	r3, [pc, #108]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d036      	beq.n	8004518 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d016      	beq.n	80044e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b2:	4b15      	ldr	r3, [pc, #84]	@ (8004508 <HAL_RCC_OscConfig+0x248>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b8:	f002 fbc8 	bl	8006c4c <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c0:	f002 fbc4 	bl	8006c4c <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e167      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80044d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x200>
 80044de:	e01b      	b.n	8004518 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e0:	4b09      	ldr	r3, [pc, #36]	@ (8004508 <HAL_RCC_OscConfig+0x248>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e6:	f002 fbb1 	bl	8006c4c <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ec:	e00e      	b.n	800450c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ee:	f002 fbad 	bl	8006c4c <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d907      	bls.n	800450c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e150      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
 8004500:	40023800 	.word	0x40023800
 8004504:	42470000 	.word	0x42470000
 8004508:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450c:	4b88      	ldr	r3, [pc, #544]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800450e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1ea      	bne.n	80044ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 8097 	beq.w	8004654 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004526:	2300      	movs	r3, #0
 8004528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800452a:	4b81      	ldr	r3, [pc, #516]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10f      	bne.n	8004556 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	4b7d      	ldr	r3, [pc, #500]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	4a7c      	ldr	r2, [pc, #496]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 8004540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004544:	6413      	str	r3, [r2, #64]	@ 0x40
 8004546:	4b7a      	ldr	r3, [pc, #488]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800454e:	60bb      	str	r3, [r7, #8]
 8004550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004552:	2301      	movs	r3, #1
 8004554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004556:	4b77      	ldr	r3, [pc, #476]	@ (8004734 <HAL_RCC_OscConfig+0x474>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455e:	2b00      	cmp	r3, #0
 8004560:	d118      	bne.n	8004594 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004562:	4b74      	ldr	r3, [pc, #464]	@ (8004734 <HAL_RCC_OscConfig+0x474>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a73      	ldr	r2, [pc, #460]	@ (8004734 <HAL_RCC_OscConfig+0x474>)
 8004568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800456c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456e:	f002 fb6d 	bl	8006c4c <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004576:	f002 fb69 	bl	8006c4c <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e10c      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004588:	4b6a      	ldr	r3, [pc, #424]	@ (8004734 <HAL_RCC_OscConfig+0x474>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f0      	beq.n	8004576 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d106      	bne.n	80045aa <HAL_RCC_OscConfig+0x2ea>
 800459c:	4b64      	ldr	r3, [pc, #400]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a0:	4a63      	ldr	r2, [pc, #396]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a8:	e01c      	b.n	80045e4 <HAL_RCC_OscConfig+0x324>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b05      	cmp	r3, #5
 80045b0:	d10c      	bne.n	80045cc <HAL_RCC_OscConfig+0x30c>
 80045b2:	4b5f      	ldr	r3, [pc, #380]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b6:	4a5e      	ldr	r2, [pc, #376]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045b8:	f043 0304 	orr.w	r3, r3, #4
 80045bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80045be:	4b5c      	ldr	r3, [pc, #368]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ca:	e00b      	b.n	80045e4 <HAL_RCC_OscConfig+0x324>
 80045cc:	4b58      	ldr	r3, [pc, #352]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d0:	4a57      	ldr	r2, [pc, #348]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045d8:	4b55      	ldr	r3, [pc, #340]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045dc:	4a54      	ldr	r2, [pc, #336]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045de:	f023 0304 	bic.w	r3, r3, #4
 80045e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d015      	beq.n	8004618 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f002 fb2e 	bl	8006c4c <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f2:	e00a      	b.n	800460a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f4:	f002 fb2a 	bl	8006c4c <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e0cb      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460a:	4b49      	ldr	r3, [pc, #292]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800460c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0ee      	beq.n	80045f4 <HAL_RCC_OscConfig+0x334>
 8004616:	e014      	b.n	8004642 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004618:	f002 fb18 	bl	8006c4c <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461e:	e00a      	b.n	8004636 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004620:	f002 fb14 	bl	8006c4c <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e0b5      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004636:	4b3e      	ldr	r3, [pc, #248]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1ee      	bne.n	8004620 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004642:	7dfb      	ldrb	r3, [r7, #23]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d105      	bne.n	8004654 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004648:	4b39      	ldr	r3, [pc, #228]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800464a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464c:	4a38      	ldr	r2, [pc, #224]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800464e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004652:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 80a1 	beq.w	80047a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800465e:	4b34      	ldr	r3, [pc, #208]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	2b08      	cmp	r3, #8
 8004668:	d05c      	beq.n	8004724 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d141      	bne.n	80046f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004672:	4b31      	ldr	r3, [pc, #196]	@ (8004738 <HAL_RCC_OscConfig+0x478>)
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004678:	f002 fae8 	bl	8006c4c <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004680:	f002 fae4 	bl	8006c4c <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e087      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004692:	4b27      	ldr	r3, [pc, #156]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69da      	ldr	r2, [r3, #28]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ac:	019b      	lsls	r3, r3, #6
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b4:	085b      	lsrs	r3, r3, #1
 80046b6:	3b01      	subs	r3, #1
 80046b8:	041b      	lsls	r3, r3, #16
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c0:	061b      	lsls	r3, r3, #24
 80046c2:	491b      	ldr	r1, [pc, #108]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004738 <HAL_RCC_OscConfig+0x478>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ce:	f002 fabd 	bl	8006c4c <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d6:	f002 fab9 	bl	8006c4c <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e05c      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e8:	4b11      	ldr	r3, [pc, #68]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCC_OscConfig+0x416>
 80046f4:	e054      	b.n	80047a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f6:	4b10      	ldr	r3, [pc, #64]	@ (8004738 <HAL_RCC_OscConfig+0x478>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f002 faa6 	bl	8006c4c <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004704:	f002 faa2 	bl	8006c4c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e045      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004716:	4b06      	ldr	r3, [pc, #24]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x444>
 8004722:	e03d      	b.n	80047a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d107      	bne.n	800473c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e038      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
 8004730:	40023800 	.word	0x40023800
 8004734:	40007000 	.word	0x40007000
 8004738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800473c:	4b1b      	ldr	r3, [pc, #108]	@ (80047ac <HAL_RCC_OscConfig+0x4ec>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d028      	beq.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d121      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004762:	429a      	cmp	r2, r3
 8004764:	d11a      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800476c:	4013      	ands	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004774:	4293      	cmp	r3, r2
 8004776:	d111      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004782:	085b      	lsrs	r3, r3, #1
 8004784:	3b01      	subs	r3, #1
 8004786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004788:	429a      	cmp	r2, r3
 800478a:	d107      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004798:	429a      	cmp	r2, r3
 800479a:	d001      	beq.n	80047a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800

080047b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0cc      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047c4:	4b68      	ldr	r3, [pc, #416]	@ (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d90c      	bls.n	80047ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d2:	4b65      	ldr	r3, [pc, #404]	@ (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047da:	4b63      	ldr	r3, [pc, #396]	@ (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d001      	beq.n	80047ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0b8      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d020      	beq.n	800483a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004804:	4b59      	ldr	r3, [pc, #356]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a58      	ldr	r2, [pc, #352]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800480e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800481c:	4b53      	ldr	r3, [pc, #332]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	4a52      	ldr	r2, [pc, #328]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004828:	4b50      	ldr	r3, [pc, #320]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	494d      	ldr	r1, [pc, #308]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	4313      	orrs	r3, r2
 8004838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d044      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d107      	bne.n	800485e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484e:	4b47      	ldr	r3, [pc, #284]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d119      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e07f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d003      	beq.n	800486e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800486a:	2b03      	cmp	r3, #3
 800486c:	d107      	bne.n	800487e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486e:	4b3f      	ldr	r3, [pc, #252]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e06f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487e:	4b3b      	ldr	r3, [pc, #236]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e067      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800488e:	4b37      	ldr	r3, [pc, #220]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f023 0203 	bic.w	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	4934      	ldr	r1, [pc, #208]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	4313      	orrs	r3, r2
 800489e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048a0:	f002 f9d4 	bl	8006c4c <HAL_GetTick>
 80048a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	e00a      	b.n	80048be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a8:	f002 f9d0 	bl	8006c4c <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e04f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048be:	4b2b      	ldr	r3, [pc, #172]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 020c 	and.w	r2, r3, #12
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d1eb      	bne.n	80048a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048d0:	4b25      	ldr	r3, [pc, #148]	@ (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d20c      	bcs.n	80048f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b22      	ldr	r3, [pc, #136]	@ (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e6:	4b20      	ldr	r3, [pc, #128]	@ (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e032      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004904:	4b19      	ldr	r3, [pc, #100]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4916      	ldr	r1, [pc, #88]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	4313      	orrs	r3, r2
 8004914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d009      	beq.n	8004936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004922:	4b12      	ldr	r3, [pc, #72]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	490e      	ldr	r1, [pc, #56]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	4313      	orrs	r3, r2
 8004934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004936:	f000 f821 	bl	800497c <HAL_RCC_GetSysClockFreq>
 800493a:	4602      	mov	r2, r0
 800493c:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	091b      	lsrs	r3, r3, #4
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	490a      	ldr	r1, [pc, #40]	@ (8004970 <HAL_RCC_ClockConfig+0x1c0>)
 8004948:	5ccb      	ldrb	r3, [r1, r3]
 800494a:	fa22 f303 	lsr.w	r3, r2, r3
 800494e:	4a09      	ldr	r2, [pc, #36]	@ (8004974 <HAL_RCC_ClockConfig+0x1c4>)
 8004950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004952:	4b09      	ldr	r3, [pc, #36]	@ (8004978 <HAL_RCC_ClockConfig+0x1c8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f7fc fabc 	bl	8000ed4 <HAL_InitTick>

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	40023c00 	.word	0x40023c00
 800496c:	40023800 	.word	0x40023800
 8004970:	0800a370 	.word	0x0800a370
 8004974:	20000000 	.word	0x20000000
 8004978:	20000004 	.word	0x20000004

0800497c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800497c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004980:	b094      	sub	sp, #80	@ 0x50
 8004982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	647b      	str	r3, [r7, #68]	@ 0x44
 8004988:	2300      	movs	r3, #0
 800498a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800498c:	2300      	movs	r3, #0
 800498e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004994:	4b79      	ldr	r3, [pc, #484]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 030c 	and.w	r3, r3, #12
 800499c:	2b08      	cmp	r3, #8
 800499e:	d00d      	beq.n	80049bc <HAL_RCC_GetSysClockFreq+0x40>
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	f200 80e1 	bhi.w	8004b68 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <HAL_RCC_GetSysClockFreq+0x34>
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d003      	beq.n	80049b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80049ae:	e0db      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049b0:	4b73      	ldr	r3, [pc, #460]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x204>)
 80049b2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80049b4:	e0db      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049b6:	4b73      	ldr	r3, [pc, #460]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0x208>)
 80049b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049ba:	e0d8      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049bc:	4b6f      	ldr	r3, [pc, #444]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049c6:	4b6d      	ldr	r3, [pc, #436]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d063      	beq.n	8004a9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d2:	4b6a      	ldr	r3, [pc, #424]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	099b      	lsrs	r3, r3, #6
 80049d8:	2200      	movs	r2, #0
 80049da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80049e6:	2300      	movs	r3, #0
 80049e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049ee:	4622      	mov	r2, r4
 80049f0:	462b      	mov	r3, r5
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	f04f 0100 	mov.w	r1, #0
 80049fa:	0159      	lsls	r1, r3, #5
 80049fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a00:	0150      	lsls	r0, r2, #5
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4621      	mov	r1, r4
 8004a08:	1a51      	subs	r1, r2, r1
 8004a0a:	6139      	str	r1, [r7, #16]
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a20:	4659      	mov	r1, fp
 8004a22:	018b      	lsls	r3, r1, #6
 8004a24:	4651      	mov	r1, sl
 8004a26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a2a:	4651      	mov	r1, sl
 8004a2c:	018a      	lsls	r2, r1, #6
 8004a2e:	4651      	mov	r1, sl
 8004a30:	ebb2 0801 	subs.w	r8, r2, r1
 8004a34:	4659      	mov	r1, fp
 8004a36:	eb63 0901 	sbc.w	r9, r3, r1
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a4e:	4690      	mov	r8, r2
 8004a50:	4699      	mov	r9, r3
 8004a52:	4623      	mov	r3, r4
 8004a54:	eb18 0303 	adds.w	r3, r8, r3
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	462b      	mov	r3, r5
 8004a5c:	eb49 0303 	adc.w	r3, r9, r3
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a6e:	4629      	mov	r1, r5
 8004a70:	024b      	lsls	r3, r1, #9
 8004a72:	4621      	mov	r1, r4
 8004a74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a78:	4621      	mov	r1, r4
 8004a7a:	024a      	lsls	r2, r1, #9
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a82:	2200      	movs	r2, #0
 8004a84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a8c:	f7fb fb9c 	bl	80001c8 <__aeabi_uldivmod>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4613      	mov	r3, r2
 8004a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a98:	e058      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a9a:	4b38      	ldr	r3, [pc, #224]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	099b      	lsrs	r3, r3, #6
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004aaa:	623b      	str	r3, [r7, #32]
 8004aac:	2300      	movs	r3, #0
 8004aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ab0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ab4:	4642      	mov	r2, r8
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	f04f 0000 	mov.w	r0, #0
 8004abc:	f04f 0100 	mov.w	r1, #0
 8004ac0:	0159      	lsls	r1, r3, #5
 8004ac2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac6:	0150      	lsls	r0, r2, #5
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4641      	mov	r1, r8
 8004ace:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ae4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ae8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004aec:	ebb2 040a 	subs.w	r4, r2, sl
 8004af0:	eb63 050b 	sbc.w	r5, r3, fp
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	00eb      	lsls	r3, r5, #3
 8004afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b02:	00e2      	lsls	r2, r4, #3
 8004b04:	4614      	mov	r4, r2
 8004b06:	461d      	mov	r5, r3
 8004b08:	4643      	mov	r3, r8
 8004b0a:	18e3      	adds	r3, r4, r3
 8004b0c:	603b      	str	r3, [r7, #0]
 8004b0e:	464b      	mov	r3, r9
 8004b10:	eb45 0303 	adc.w	r3, r5, r3
 8004b14:	607b      	str	r3, [r7, #4]
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b22:	4629      	mov	r1, r5
 8004b24:	028b      	lsls	r3, r1, #10
 8004b26:	4621      	mov	r1, r4
 8004b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	028a      	lsls	r2, r1, #10
 8004b30:	4610      	mov	r0, r2
 8004b32:	4619      	mov	r1, r3
 8004b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b36:	2200      	movs	r2, #0
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	61fa      	str	r2, [r7, #28]
 8004b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b40:	f7fb fb42 	bl	80001c8 <__aeabi_uldivmod>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4613      	mov	r3, r2
 8004b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	0c1b      	lsrs	r3, r3, #16
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	3301      	adds	r3, #1
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004b5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b66:	e002      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b68:	4b05      	ldr	r3, [pc, #20]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3750      	adds	r7, #80	@ 0x50
 8004b74:	46bd      	mov	sp, r7
 8004b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	00f42400 	.word	0x00f42400
 8004b84:	007a1200 	.word	0x007a1200

08004b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b8c:	4b03      	ldr	r3, [pc, #12]	@ (8004b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	20000000 	.word	0x20000000

08004ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ba4:	f7ff fff0 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	4b05      	ldr	r3, [pc, #20]	@ (8004bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	0a9b      	lsrs	r3, r3, #10
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	4903      	ldr	r1, [pc, #12]	@ (8004bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb6:	5ccb      	ldrb	r3, [r1, r3]
 8004bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	0800a380 	.word	0x0800a380

08004bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bcc:	f7ff ffdc 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	4b05      	ldr	r3, [pc, #20]	@ (8004be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	0b5b      	lsrs	r3, r3, #13
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	4903      	ldr	r1, [pc, #12]	@ (8004bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bde:	5ccb      	ldrb	r3, [r1, r3]
 8004be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40023800 	.word	0x40023800
 8004bec:	0800a380 	.word	0x0800a380

08004bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d105      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d035      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c18:	4b62      	ldr	r3, [pc, #392]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c1e:	f002 f815 	bl	8006c4c <HAL_GetTick>
 8004c22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c24:	e008      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c26:	f002 f811 	bl	8006c4c <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e0b0      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c38:	4b5b      	ldr	r3, [pc, #364]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1f0      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	019a      	lsls	r2, r3, #6
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	071b      	lsls	r3, r3, #28
 8004c50:	4955      	ldr	r1, [pc, #340]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c58:	4b52      	ldr	r3, [pc, #328]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c5e:	f001 fff5 	bl	8006c4c <HAL_GetTick>
 8004c62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c64:	e008      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c66:	f001 fff1 	bl	8006c4c <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e090      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c78:	4b4b      	ldr	r3, [pc, #300]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f0      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8083 	beq.w	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	4b44      	ldr	r3, [pc, #272]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9a:	4a43      	ldr	r2, [pc, #268]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ca2:	4b41      	ldr	r3, [pc, #260]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cae:	4b3f      	ldr	r3, [pc, #252]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a3e      	ldr	r2, [pc, #248]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cb8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cba:	f001 ffc7 	bl	8006c4c <HAL_GetTick>
 8004cbe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cc2:	f001 ffc3 	bl	8006c4c <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e062      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cd4:	4b35      	ldr	r3, [pc, #212]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f0      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ce0:	4b31      	ldr	r3, [pc, #196]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ce8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d02f      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d028      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d08:	4b29      	ldr	r3, [pc, #164]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d0e:	4b28      	ldr	r3, [pc, #160]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d14:	4a24      	ldr	r2, [pc, #144]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d1a:	4b23      	ldr	r3, [pc, #140]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d114      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d26:	f001 ff91 	bl	8006c4c <HAL_GetTick>
 8004d2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d2c:	e00a      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d2e:	f001 ff8d 	bl	8006c4c <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e02a      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d44:	4b18      	ldr	r3, [pc, #96]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0ee      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d5c:	d10d      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d5e:	4b12      	ldr	r3, [pc, #72]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d72:	490d      	ldr	r1, [pc, #52]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	608b      	str	r3, [r1, #8]
 8004d78:	e005      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d80:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004d84:	6093      	str	r3, [r2, #8]
 8004d86:	4b08      	ldr	r3, [pc, #32]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d88:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d92:	4905      	ldr	r1, [pc, #20]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	42470068 	.word	0x42470068
 8004da8:	40023800 	.word	0x40023800
 8004dac:	40007000 	.word	0x40007000
 8004db0:	42470e40 	.word	0x42470e40

08004db4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d13f      	bne.n	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004dd2:	4b24      	ldr	r3, [pc, #144]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d006      	beq.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004de8:	d12f      	bne.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004dea:	4b1f      	ldr	r3, [pc, #124]	@ (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004dec:	617b      	str	r3, [r7, #20]
          break;
 8004dee:	e02f      	b.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004df0:	4b1c      	ldr	r3, [pc, #112]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004df8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dfc:	d108      	bne.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dfe:	4b19      	ldr	r3, [pc, #100]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e06:	4a19      	ldr	r2, [pc, #100]	@ (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0c:	613b      	str	r3, [r7, #16]
 8004e0e:	e007      	b.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e10:	4b14      	ldr	r3, [pc, #80]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e18:	4a15      	ldr	r2, [pc, #84]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e20:	4b10      	ldr	r3, [pc, #64]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e26:	099b      	lsrs	r3, r3, #6
 8004e28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	fb02 f303 	mul.w	r3, r2, r3
 8004e32:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e34:	4b0b      	ldr	r3, [pc, #44]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e3a:	0f1b      	lsrs	r3, r3, #28
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e46:	617b      	str	r3, [r7, #20]
          break;
 8004e48:	e002      	b.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]
          break;
 8004e4e:	bf00      	nop
        }
      }
      break;
 8004e50:	e000      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004e52:	bf00      	nop
    }
  }
  return frequency;
 8004e54:	697b      	ldr	r3, [r7, #20]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40023800 	.word	0x40023800
 8004e68:	00bb8000 	.word	0x00bb8000
 8004e6c:	007a1200 	.word	0x007a1200
 8004e70:	00f42400 	.word	0x00f42400

08004e74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e07b      	b.n	8004f7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d108      	bne.n	8004ea0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e96:	d009      	beq.n	8004eac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	61da      	str	r2, [r3, #28]
 8004e9e:	e005      	b.n	8004eac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fb fea6 	bl	8000c18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ee2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f30:	ea42 0103 	orr.w	r1, r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f38:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	0c1b      	lsrs	r3, r3, #16
 8004f4a:	f003 0104 	and.w	r1, r3, #4
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f52:	f003 0210 	and.w	r2, r3, #16
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69da      	ldr	r2, [r3, #28]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b082      	sub	sp, #8
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e042      	b.n	800501e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d106      	bne.n	8004fb2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7fb fe7b 	bl	8000ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2224      	movs	r2, #36	@ 0x24
 8004fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fc8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f972 	bl	80052b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fde:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695a      	ldr	r2, [r3, #20]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ffe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b08a      	sub	sp, #40	@ 0x28
 800502a:	af02      	add	r7, sp, #8
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	603b      	str	r3, [r7, #0]
 8005032:	4613      	mov	r3, r2
 8005034:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b20      	cmp	r3, #32
 8005044:	d175      	bne.n	8005132 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <HAL_UART_Transmit+0x2c>
 800504c:	88fb      	ldrh	r3, [r7, #6]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e06e      	b.n	8005134 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2221      	movs	r2, #33	@ 0x21
 8005060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005064:	f001 fdf2 	bl	8006c4c <HAL_GetTick>
 8005068:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	88fa      	ldrh	r2, [r7, #6]
 800506e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	88fa      	ldrh	r2, [r7, #6]
 8005074:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800507e:	d108      	bne.n	8005092 <HAL_UART_Transmit+0x6c>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d104      	bne.n	8005092 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005088:	2300      	movs	r3, #0
 800508a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	61bb      	str	r3, [r7, #24]
 8005090:	e003      	b.n	800509a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005096:	2300      	movs	r3, #0
 8005098:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800509a:	e02e      	b.n	80050fa <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2200      	movs	r2, #0
 80050a4:	2180      	movs	r1, #128	@ 0x80
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f848 	bl	800513c <UART_WaitOnFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e03a      	b.n	8005134 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10b      	bne.n	80050dc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050d2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	3302      	adds	r3, #2
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	e007      	b.n	80050ec <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	781a      	ldrb	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	3301      	adds	r3, #1
 80050ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050fe:	b29b      	uxth	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1cb      	bne.n	800509c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2200      	movs	r2, #0
 800510c:	2140      	movs	r1, #64	@ 0x40
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 f814 	bl	800513c <UART_WaitOnFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e006      	b.n	8005134 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2220      	movs	r2, #32
 800512a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	e000      	b.n	8005134 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005132:	2302      	movs	r3, #2
  }
}
 8005134:	4618      	mov	r0, r3
 8005136:	3720      	adds	r7, #32
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	4613      	mov	r3, r2
 800514a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800514c:	e03b      	b.n	80051c6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005154:	d037      	beq.n	80051c6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005156:	f001 fd79 	bl	8006c4c <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	6a3a      	ldr	r2, [r7, #32]
 8005162:	429a      	cmp	r2, r3
 8005164:	d302      	bcc.n	800516c <UART_WaitOnFlagUntilTimeout+0x30>
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e03a      	b.n	80051e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	2b00      	cmp	r3, #0
 800517c:	d023      	beq.n	80051c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b80      	cmp	r3, #128	@ 0x80
 8005182:	d020      	beq.n	80051c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b40      	cmp	r3, #64	@ 0x40
 8005188:	d01d      	beq.n	80051c6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b08      	cmp	r3, #8
 8005196:	d116      	bne.n	80051c6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 f81d 	bl	80051ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2208      	movs	r2, #8
 80051b8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e00f      	b.n	80051e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4013      	ands	r3, r2
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	bf0c      	ite	eq
 80051d6:	2301      	moveq	r3, #1
 80051d8:	2300      	movne	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	461a      	mov	r2, r3
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d0b4      	beq.n	800514e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b095      	sub	sp, #84	@ 0x54
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	330c      	adds	r3, #12
 80051fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005208:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800520c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	330c      	adds	r3, #12
 8005214:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005216:	643a      	str	r2, [r7, #64]	@ 0x40
 8005218:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800521c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1e5      	bne.n	80051f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3314      	adds	r3, #20
 8005230:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	61fb      	str	r3, [r7, #28]
   return(result);
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	f023 0301 	bic.w	r3, r3, #1
 8005240:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3314      	adds	r3, #20
 8005248:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800524a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800524c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005250:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005252:	e841 2300 	strex	r3, r2, [r1]
 8005256:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1e5      	bne.n	800522a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005262:	2b01      	cmp	r3, #1
 8005264:	d119      	bne.n	800529a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	330c      	adds	r3, #12
 800526c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	60bb      	str	r3, [r7, #8]
   return(result);
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f023 0310 	bic.w	r3, r3, #16
 800527c:	647b      	str	r3, [r7, #68]	@ 0x44
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	330c      	adds	r3, #12
 8005284:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005286:	61ba      	str	r2, [r7, #24]
 8005288:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	6979      	ldr	r1, [r7, #20]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	613b      	str	r3, [r7, #16]
   return(result);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e5      	bne.n	8005266 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2220      	movs	r2, #32
 800529e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80052a8:	bf00      	nop
 80052aa:	3754      	adds	r7, #84	@ 0x54
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052b8:	b0c0      	sub	sp, #256	@ 0x100
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80052cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d0:	68d9      	ldr	r1, [r3, #12]
 80052d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	ea40 0301 	orr.w	r3, r0, r1
 80052dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	431a      	orrs	r2, r3
 80052ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	431a      	orrs	r2, r3
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800530c:	f021 010c 	bic.w	r1, r1, #12
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800531a:	430b      	orrs	r3, r1
 800531c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800531e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800532a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800532e:	6999      	ldr	r1, [r3, #24]
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	ea40 0301 	orr.w	r3, r0, r1
 800533a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4b8f      	ldr	r3, [pc, #572]	@ (8005580 <UART_SetConfig+0x2cc>)
 8005344:	429a      	cmp	r2, r3
 8005346:	d005      	beq.n	8005354 <UART_SetConfig+0xa0>
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	4b8d      	ldr	r3, [pc, #564]	@ (8005584 <UART_SetConfig+0x2d0>)
 8005350:	429a      	cmp	r2, r3
 8005352:	d104      	bne.n	800535e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005354:	f7ff fc38 	bl	8004bc8 <HAL_RCC_GetPCLK2Freq>
 8005358:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800535c:	e003      	b.n	8005366 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800535e:	f7ff fc1f 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 8005362:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005370:	f040 810c 	bne.w	800558c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005378:	2200      	movs	r2, #0
 800537a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800537e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005382:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005386:	4622      	mov	r2, r4
 8005388:	462b      	mov	r3, r5
 800538a:	1891      	adds	r1, r2, r2
 800538c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800538e:	415b      	adcs	r3, r3
 8005390:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005392:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005396:	4621      	mov	r1, r4
 8005398:	eb12 0801 	adds.w	r8, r2, r1
 800539c:	4629      	mov	r1, r5
 800539e:	eb43 0901 	adc.w	r9, r3, r1
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	f04f 0300 	mov.w	r3, #0
 80053aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053b6:	4690      	mov	r8, r2
 80053b8:	4699      	mov	r9, r3
 80053ba:	4623      	mov	r3, r4
 80053bc:	eb18 0303 	adds.w	r3, r8, r3
 80053c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053c4:	462b      	mov	r3, r5
 80053c6:	eb49 0303 	adc.w	r3, r9, r3
 80053ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80053de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053e2:	460b      	mov	r3, r1
 80053e4:	18db      	adds	r3, r3, r3
 80053e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80053e8:	4613      	mov	r3, r2
 80053ea:	eb42 0303 	adc.w	r3, r2, r3
 80053ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80053f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80053f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80053f8:	f7fa fee6 	bl	80001c8 <__aeabi_uldivmod>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4b61      	ldr	r3, [pc, #388]	@ (8005588 <UART_SetConfig+0x2d4>)
 8005402:	fba3 2302 	umull	r2, r3, r3, r2
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	011c      	lsls	r4, r3, #4
 800540a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800540e:	2200      	movs	r2, #0
 8005410:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005414:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005418:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800541c:	4642      	mov	r2, r8
 800541e:	464b      	mov	r3, r9
 8005420:	1891      	adds	r1, r2, r2
 8005422:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005424:	415b      	adcs	r3, r3
 8005426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005428:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800542c:	4641      	mov	r1, r8
 800542e:	eb12 0a01 	adds.w	sl, r2, r1
 8005432:	4649      	mov	r1, r9
 8005434:	eb43 0b01 	adc.w	fp, r3, r1
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005444:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005448:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800544c:	4692      	mov	sl, r2
 800544e:	469b      	mov	fp, r3
 8005450:	4643      	mov	r3, r8
 8005452:	eb1a 0303 	adds.w	r3, sl, r3
 8005456:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800545a:	464b      	mov	r3, r9
 800545c:	eb4b 0303 	adc.w	r3, fp, r3
 8005460:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005470:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005474:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005478:	460b      	mov	r3, r1
 800547a:	18db      	adds	r3, r3, r3
 800547c:	643b      	str	r3, [r7, #64]	@ 0x40
 800547e:	4613      	mov	r3, r2
 8005480:	eb42 0303 	adc.w	r3, r2, r3
 8005484:	647b      	str	r3, [r7, #68]	@ 0x44
 8005486:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800548a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800548e:	f7fa fe9b 	bl	80001c8 <__aeabi_uldivmod>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4611      	mov	r1, r2
 8005498:	4b3b      	ldr	r3, [pc, #236]	@ (8005588 <UART_SetConfig+0x2d4>)
 800549a:	fba3 2301 	umull	r2, r3, r3, r1
 800549e:	095b      	lsrs	r3, r3, #5
 80054a0:	2264      	movs	r2, #100	@ 0x64
 80054a2:	fb02 f303 	mul.w	r3, r2, r3
 80054a6:	1acb      	subs	r3, r1, r3
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054ae:	4b36      	ldr	r3, [pc, #216]	@ (8005588 <UART_SetConfig+0x2d4>)
 80054b0:	fba3 2302 	umull	r2, r3, r3, r2
 80054b4:	095b      	lsrs	r3, r3, #5
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80054bc:	441c      	add	r4, r3
 80054be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80054cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80054d0:	4642      	mov	r2, r8
 80054d2:	464b      	mov	r3, r9
 80054d4:	1891      	adds	r1, r2, r2
 80054d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80054d8:	415b      	adcs	r3, r3
 80054da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80054e0:	4641      	mov	r1, r8
 80054e2:	1851      	adds	r1, r2, r1
 80054e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80054e6:	4649      	mov	r1, r9
 80054e8:	414b      	adcs	r3, r1
 80054ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80054ec:	f04f 0200 	mov.w	r2, #0
 80054f0:	f04f 0300 	mov.w	r3, #0
 80054f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80054f8:	4659      	mov	r1, fp
 80054fa:	00cb      	lsls	r3, r1, #3
 80054fc:	4651      	mov	r1, sl
 80054fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005502:	4651      	mov	r1, sl
 8005504:	00ca      	lsls	r2, r1, #3
 8005506:	4610      	mov	r0, r2
 8005508:	4619      	mov	r1, r3
 800550a:	4603      	mov	r3, r0
 800550c:	4642      	mov	r2, r8
 800550e:	189b      	adds	r3, r3, r2
 8005510:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005514:	464b      	mov	r3, r9
 8005516:	460a      	mov	r2, r1
 8005518:	eb42 0303 	adc.w	r3, r2, r3
 800551c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800552c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005530:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005534:	460b      	mov	r3, r1
 8005536:	18db      	adds	r3, r3, r3
 8005538:	62bb      	str	r3, [r7, #40]	@ 0x28
 800553a:	4613      	mov	r3, r2
 800553c:	eb42 0303 	adc.w	r3, r2, r3
 8005540:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005542:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005546:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800554a:	f7fa fe3d 	bl	80001c8 <__aeabi_uldivmod>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	4b0d      	ldr	r3, [pc, #52]	@ (8005588 <UART_SetConfig+0x2d4>)
 8005554:	fba3 1302 	umull	r1, r3, r3, r2
 8005558:	095b      	lsrs	r3, r3, #5
 800555a:	2164      	movs	r1, #100	@ 0x64
 800555c:	fb01 f303 	mul.w	r3, r1, r3
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	3332      	adds	r3, #50	@ 0x32
 8005566:	4a08      	ldr	r2, [pc, #32]	@ (8005588 <UART_SetConfig+0x2d4>)
 8005568:	fba2 2303 	umull	r2, r3, r2, r3
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	f003 0207 	and.w	r2, r3, #7
 8005572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4422      	add	r2, r4
 800557a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800557c:	e106      	b.n	800578c <UART_SetConfig+0x4d8>
 800557e:	bf00      	nop
 8005580:	40011000 	.word	0x40011000
 8005584:	40011400 	.word	0x40011400
 8005588:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800558c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005590:	2200      	movs	r2, #0
 8005592:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005596:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800559a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800559e:	4642      	mov	r2, r8
 80055a0:	464b      	mov	r3, r9
 80055a2:	1891      	adds	r1, r2, r2
 80055a4:	6239      	str	r1, [r7, #32]
 80055a6:	415b      	adcs	r3, r3
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055ae:	4641      	mov	r1, r8
 80055b0:	1854      	adds	r4, r2, r1
 80055b2:	4649      	mov	r1, r9
 80055b4:	eb43 0501 	adc.w	r5, r3, r1
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	00eb      	lsls	r3, r5, #3
 80055c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055c6:	00e2      	lsls	r2, r4, #3
 80055c8:	4614      	mov	r4, r2
 80055ca:	461d      	mov	r5, r3
 80055cc:	4643      	mov	r3, r8
 80055ce:	18e3      	adds	r3, r4, r3
 80055d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055d4:	464b      	mov	r3, r9
 80055d6:	eb45 0303 	adc.w	r3, r5, r3
 80055da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055ee:	f04f 0200 	mov.w	r2, #0
 80055f2:	f04f 0300 	mov.w	r3, #0
 80055f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80055fa:	4629      	mov	r1, r5
 80055fc:	008b      	lsls	r3, r1, #2
 80055fe:	4621      	mov	r1, r4
 8005600:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005604:	4621      	mov	r1, r4
 8005606:	008a      	lsls	r2, r1, #2
 8005608:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800560c:	f7fa fddc 	bl	80001c8 <__aeabi_uldivmod>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4b60      	ldr	r3, [pc, #384]	@ (8005798 <UART_SetConfig+0x4e4>)
 8005616:	fba3 2302 	umull	r2, r3, r3, r2
 800561a:	095b      	lsrs	r3, r3, #5
 800561c:	011c      	lsls	r4, r3, #4
 800561e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005622:	2200      	movs	r2, #0
 8005624:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005628:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800562c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005630:	4642      	mov	r2, r8
 8005632:	464b      	mov	r3, r9
 8005634:	1891      	adds	r1, r2, r2
 8005636:	61b9      	str	r1, [r7, #24]
 8005638:	415b      	adcs	r3, r3
 800563a:	61fb      	str	r3, [r7, #28]
 800563c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005640:	4641      	mov	r1, r8
 8005642:	1851      	adds	r1, r2, r1
 8005644:	6139      	str	r1, [r7, #16]
 8005646:	4649      	mov	r1, r9
 8005648:	414b      	adcs	r3, r1
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	f04f 0300 	mov.w	r3, #0
 8005654:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005658:	4659      	mov	r1, fp
 800565a:	00cb      	lsls	r3, r1, #3
 800565c:	4651      	mov	r1, sl
 800565e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005662:	4651      	mov	r1, sl
 8005664:	00ca      	lsls	r2, r1, #3
 8005666:	4610      	mov	r0, r2
 8005668:	4619      	mov	r1, r3
 800566a:	4603      	mov	r3, r0
 800566c:	4642      	mov	r2, r8
 800566e:	189b      	adds	r3, r3, r2
 8005670:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005674:	464b      	mov	r3, r9
 8005676:	460a      	mov	r2, r1
 8005678:	eb42 0303 	adc.w	r3, r2, r3
 800567c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	67bb      	str	r3, [r7, #120]	@ 0x78
 800568a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005698:	4649      	mov	r1, r9
 800569a:	008b      	lsls	r3, r1, #2
 800569c:	4641      	mov	r1, r8
 800569e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056a2:	4641      	mov	r1, r8
 80056a4:	008a      	lsls	r2, r1, #2
 80056a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80056aa:	f7fa fd8d 	bl	80001c8 <__aeabi_uldivmod>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4611      	mov	r1, r2
 80056b4:	4b38      	ldr	r3, [pc, #224]	@ (8005798 <UART_SetConfig+0x4e4>)
 80056b6:	fba3 2301 	umull	r2, r3, r3, r1
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	2264      	movs	r2, #100	@ 0x64
 80056be:	fb02 f303 	mul.w	r3, r2, r3
 80056c2:	1acb      	subs	r3, r1, r3
 80056c4:	011b      	lsls	r3, r3, #4
 80056c6:	3332      	adds	r3, #50	@ 0x32
 80056c8:	4a33      	ldr	r2, [pc, #204]	@ (8005798 <UART_SetConfig+0x4e4>)
 80056ca:	fba2 2303 	umull	r2, r3, r2, r3
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056d4:	441c      	add	r4, r3
 80056d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056da:	2200      	movs	r2, #0
 80056dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80056de:	677a      	str	r2, [r7, #116]	@ 0x74
 80056e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80056e4:	4642      	mov	r2, r8
 80056e6:	464b      	mov	r3, r9
 80056e8:	1891      	adds	r1, r2, r2
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	415b      	adcs	r3, r3
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056f4:	4641      	mov	r1, r8
 80056f6:	1851      	adds	r1, r2, r1
 80056f8:	6039      	str	r1, [r7, #0]
 80056fa:	4649      	mov	r1, r9
 80056fc:	414b      	adcs	r3, r1
 80056fe:	607b      	str	r3, [r7, #4]
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800570c:	4659      	mov	r1, fp
 800570e:	00cb      	lsls	r3, r1, #3
 8005710:	4651      	mov	r1, sl
 8005712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005716:	4651      	mov	r1, sl
 8005718:	00ca      	lsls	r2, r1, #3
 800571a:	4610      	mov	r0, r2
 800571c:	4619      	mov	r1, r3
 800571e:	4603      	mov	r3, r0
 8005720:	4642      	mov	r2, r8
 8005722:	189b      	adds	r3, r3, r2
 8005724:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005726:	464b      	mov	r3, r9
 8005728:	460a      	mov	r2, r1
 800572a:	eb42 0303 	adc.w	r3, r2, r3
 800572e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	663b      	str	r3, [r7, #96]	@ 0x60
 800573a:	667a      	str	r2, [r7, #100]	@ 0x64
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005748:	4649      	mov	r1, r9
 800574a:	008b      	lsls	r3, r1, #2
 800574c:	4641      	mov	r1, r8
 800574e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005752:	4641      	mov	r1, r8
 8005754:	008a      	lsls	r2, r1, #2
 8005756:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800575a:	f7fa fd35 	bl	80001c8 <__aeabi_uldivmod>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4b0d      	ldr	r3, [pc, #52]	@ (8005798 <UART_SetConfig+0x4e4>)
 8005764:	fba3 1302 	umull	r1, r3, r3, r2
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	2164      	movs	r1, #100	@ 0x64
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	3332      	adds	r3, #50	@ 0x32
 8005776:	4a08      	ldr	r2, [pc, #32]	@ (8005798 <UART_SetConfig+0x4e4>)
 8005778:	fba2 2303 	umull	r2, r3, r2, r3
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	f003 020f 	and.w	r2, r3, #15
 8005782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4422      	add	r2, r4
 800578a:	609a      	str	r2, [r3, #8]
}
 800578c:	bf00      	nop
 800578e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005792:	46bd      	mov	sp, r7
 8005794:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005798:	51eb851f 	.word	0x51eb851f

0800579c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800579c:	b084      	sub	sp, #16
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	f107 001c 	add.w	r0, r7, #28
 80057aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d123      	bne.n	80057fe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80057ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d105      	bne.n	80057f2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f9dc 	bl	8005bb0 <USB_CoreReset>
 80057f8:	4603      	mov	r3, r0
 80057fa:	73fb      	strb	r3, [r7, #15]
 80057fc:	e01b      	b.n	8005836 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f9d0 	bl	8005bb0 <USB_CoreReset>
 8005810:	4603      	mov	r3, r0
 8005812:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005814:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005818:	2b00      	cmp	r3, #0
 800581a:	d106      	bne.n	800582a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005820:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	639a      	str	r2, [r3, #56]	@ 0x38
 8005828:	e005      	b.n	8005836 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005836:	7fbb      	ldrb	r3, [r7, #30]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d10b      	bne.n	8005854 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f043 0206 	orr.w	r2, r3, #6
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f043 0220 	orr.w	r2, r3, #32
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005854:	7bfb      	ldrb	r3, [r7, #15]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005860:	b004      	add	sp, #16
 8005862:	4770      	bx	lr

08005864 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f043 0201 	orr.w	r2, r3, #1
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f023 0201 	bic.w	r2, r3, #1
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d115      	bne.n	80058f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80058d6:	200a      	movs	r0, #10
 80058d8:	f001 f98e 	bl	8006bf8 <HAL_Delay>
      ms += 10U;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	330a      	adds	r3, #10
 80058e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f956 	bl	8005b94 <USB_GetMode>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d01e      	beq.n	800592c <USB_SetCurrentMode+0x84>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2bc7      	cmp	r3, #199	@ 0xc7
 80058f2:	d9f0      	bls.n	80058d6 <USB_SetCurrentMode+0x2e>
 80058f4:	e01a      	b.n	800592c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058f6:	78fb      	ldrb	r3, [r7, #3]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d115      	bne.n	8005928 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005908:	200a      	movs	r0, #10
 800590a:	f001 f975 	bl	8006bf8 <HAL_Delay>
      ms += 10U;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	330a      	adds	r3, #10
 8005912:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f93d 	bl	8005b94 <USB_GetMode>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <USB_SetCurrentMode+0x84>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2bc7      	cmp	r3, #199	@ 0xc7
 8005924:	d9f0      	bls.n	8005908 <USB_SetCurrentMode+0x60>
 8005926:	e001      	b.n	800592c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e005      	b.n	8005938 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005930:	d101      	bne.n	8005936 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3301      	adds	r3, #1
 8005952:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800595a:	d901      	bls.n	8005960 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e01b      	b.n	8005998 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	daf2      	bge.n	800594e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	019b      	lsls	r3, r3, #6
 8005970:	f043 0220 	orr.w	r2, r3, #32
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3301      	adds	r3, #1
 800597c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005984:	d901      	bls.n	800598a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e006      	b.n	8005998 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b20      	cmp	r3, #32
 8005994:	d0f0      	beq.n	8005978 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3301      	adds	r3, #1
 80059b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059bc:	d901      	bls.n	80059c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e018      	b.n	80059f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	daf2      	bge.n	80059b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2210      	movs	r2, #16
 80059d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3301      	adds	r3, #1
 80059d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059e0:	d901      	bls.n	80059e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e006      	b.n	80059f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	2b10      	cmp	r3, #16
 80059f0:	d0f0      	beq.n	80059d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b089      	sub	sp, #36	@ 0x24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	460b      	mov	r3, r1
 8005a10:	71fb      	strb	r3, [r7, #7]
 8005a12:	4613      	mov	r3, r2
 8005a14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d123      	bne.n	8005a6e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a26:	88bb      	ldrh	r3, [r7, #4]
 8005a28:	3303      	adds	r3, #3
 8005a2a:	089b      	lsrs	r3, r3, #2
 8005a2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61bb      	str	r3, [r7, #24]
 8005a32:	e018      	b.n	8005a66 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a34:	79fb      	ldrb	r3, [r7, #7]
 8005a36:	031a      	lsls	r2, r3, #12
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a40:	461a      	mov	r2, r3
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	3301      	adds	r3, #1
 8005a52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	3301      	adds	r3, #1
 8005a58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	3301      	adds	r3, #1
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d3e2      	bcc.n	8005a34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3724      	adds	r7, #36	@ 0x24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b08b      	sub	sp, #44	@ 0x2c
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	4613      	mov	r3, r2
 8005a88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a92:	88fb      	ldrh	r3, [r7, #6]
 8005a94:	089b      	lsrs	r3, r3, #2
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a9a:	88fb      	ldrh	r3, [r7, #6]
 8005a9c:	f003 0303 	and.w	r3, r3, #3
 8005aa0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	623b      	str	r3, [r7, #32]
 8005aa6:	e014      	b.n	8005ad2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abc:	3301      	adds	r3, #1
 8005abe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac8:	3301      	adds	r3, #1
 8005aca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	623b      	str	r3, [r7, #32]
 8005ad2:	6a3a      	ldr	r2, [r7, #32]
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d3e6      	bcc.n	8005aa8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ada:	8bfb      	ldrh	r3, [r7, #30]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01e      	beq.n	8005b1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005aea:	461a      	mov	r2, r3
 8005aec:	f107 0310 	add.w	r3, r7, #16
 8005af0:	6812      	ldr	r2, [r2, #0]
 8005af2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	fa22 f303 	lsr.w	r3, r2, r3
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b04:	701a      	strb	r2, [r3, #0]
      i++;
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0e:	3301      	adds	r3, #1
 8005b10:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005b12:	8bfb      	ldrh	r3, [r7, #30]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b18:	8bfb      	ldrh	r3, [r7, #30]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1ea      	bne.n	8005af4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	372c      	adds	r7, #44	@ 0x2c
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4013      	ands	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b44:	68fb      	ldr	r3, [r7, #12]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005b62:	78fb      	ldrb	r3, [r7, #3]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005b72:	78fb      	ldrb	r3, [r7, #3]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	4013      	ands	r3, r2
 8005b84:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b86:	68bb      	ldr	r3, [r7, #8]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	f003 0301 	and.w	r3, r3, #1
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bc8:	d901      	bls.n	8005bce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e01b      	b.n	8005c06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	daf2      	bge.n	8005bbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f043 0201 	orr.w	r2, r3, #1
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3301      	adds	r3, #1
 8005bea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bf2:	d901      	bls.n	8005bf8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e006      	b.n	8005c06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d0f0      	beq.n	8005be6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
	...

08005c14 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c14:	b084      	sub	sp, #16
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b086      	sub	sp, #24
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c34:	461a      	mov	r2, r3
 8005c36:	2300      	movs	r3, #0
 8005c38:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c3e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c56:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d119      	bne.n	8005c9e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005c6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d10a      	bne.n	8005c88 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c80:	f043 0304 	orr.w	r3, r3, #4
 8005c84:	6013      	str	r3, [r2, #0]
 8005c86:	e014      	b.n	8005cb2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c96:	f023 0304 	bic.w	r3, r3, #4
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	e009      	b.n	8005cb2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005cac:	f023 0304 	bic.w	r3, r3, #4
 8005cb0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cb2:	2110      	movs	r1, #16
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff fe43 	bl	8005940 <USB_FlushTxFifo>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff fe6d 	bl	80059a4 <USB_FlushRxFifo>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	613b      	str	r3, [r7, #16]
 8005cd8:	e015      	b.n	8005d06 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cec:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	3301      	adds	r3, #1
 8005d04:	613b      	str	r3, [r7, #16]
 8005d06:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d3e3      	bcc.n	8005cda <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a18      	ldr	r2, [pc, #96]	@ (8005d84 <USB_HostInit+0x170>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d10b      	bne.n	8005d40 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d2e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a15      	ldr	r2, [pc, #84]	@ (8005d88 <USB_HostInit+0x174>)
 8005d34:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a14      	ldr	r2, [pc, #80]	@ (8005d8c <USB_HostInit+0x178>)
 8005d3a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005d3e:	e009      	b.n	8005d54 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2280      	movs	r2, #128	@ 0x80
 8005d44:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a11      	ldr	r2, [pc, #68]	@ (8005d90 <USB_HostInit+0x17c>)
 8005d4a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a11      	ldr	r2, [pc, #68]	@ (8005d94 <USB_HostInit+0x180>)
 8005d50:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d54:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d105      	bne.n	8005d68 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	f043 0210 	orr.w	r2, r3, #16
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699a      	ldr	r2, [r3, #24]
 8005d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d98 <USB_HostInit+0x184>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d80:	b004      	add	sp, #16
 8005d82:	4770      	bx	lr
 8005d84:	40040000 	.word	0x40040000
 8005d88:	01000200 	.word	0x01000200
 8005d8c:	00e00300 	.word	0x00e00300
 8005d90:	00600080 	.word	0x00600080
 8005d94:	004000e0 	.word	0x004000e0
 8005d98:	a3200008 	.word	0xa3200008

08005d9c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	460b      	mov	r3, r1
 8005da6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005dba:	f023 0303 	bic.w	r3, r3, #3
 8005dbe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	78fb      	ldrb	r3, [r7, #3]
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	68f9      	ldr	r1, [r7, #12]
 8005dd0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d107      	bne.n	8005dee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005de4:	461a      	mov	r2, r3
 8005de6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005dea:	6053      	str	r3, [r2, #4]
 8005dec:	e00c      	b.n	8005e08 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d107      	bne.n	8005e04 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005e00:	6053      	str	r3, [r2, #4]
 8005e02:	e001      	b.n	8005e08 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e000      	b.n	8005e0a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005e36:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e44:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005e46:	2064      	movs	r0, #100	@ 0x64
 8005e48:	f000 fed6 	bl	8006bf8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005e54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e58:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005e5a:	200a      	movs	r0, #10
 8005e5c:	f000 fecc 	bl	8006bf8 <HAL_Delay>

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	460b      	mov	r3, r1
 8005e74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005e8e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d109      	bne.n	8005eae <USB_DriveVbus+0x44>
 8005e9a:	78fb      	ldrb	r3, [r7, #3]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d106      	bne.n	8005eae <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ea8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005eac:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eb8:	d109      	bne.n	8005ece <USB_DriveVbus+0x64>
 8005eba:	78fb      	ldrb	r3, [r7, #3]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d106      	bne.n	8005ece <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ec8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ecc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	0c5b      	lsrs	r3, r3, #17
 8005efa:	f003 0303 	and.w	r3, r3, #3
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b085      	sub	sp, #20
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	b29b      	uxth	r3, r3
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	4608      	mov	r0, r1
 8005f36:	4611      	mov	r1, r2
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	70fb      	strb	r3, [r7, #3]
 8005f3e:	460b      	mov	r3, r1
 8005f40:	70bb      	strb	r3, [r7, #2]
 8005f42:	4613      	mov	r3, r2
 8005f44:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005f4e:	78fb      	ldrb	r3, [r7, #3]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f60:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005f62:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d87c      	bhi.n	8006064 <USB_HC_Init+0x138>
 8005f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f70 <USB_HC_Init+0x44>)
 8005f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f70:	08005f81 	.word	0x08005f81
 8005f74:	08006027 	.word	0x08006027
 8005f78:	08005f81 	.word	0x08005f81
 8005f7c:	08005fe9 	.word	0x08005fe9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f80:	78fb      	ldrb	r3, [r7, #3]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005f92:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	da10      	bge.n	8005fbe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f9c:	78fb      	ldrb	r3, [r7, #3]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	78fa      	ldrb	r2, [r7, #3]
 8005fac:	0151      	lsls	r1, r2, #5
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	440a      	add	r2, r1
 8005fb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fba:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005fbc:	e055      	b.n	800606a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a6f      	ldr	r2, [pc, #444]	@ (8006180 <USB_HC_Init+0x254>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d151      	bne.n	800606a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	78fa      	ldrb	r2, [r7, #3]
 8005fd6:	0151      	lsls	r1, r2, #5
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	440a      	add	r2, r1
 8005fdc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fe0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005fe4:	60d3      	str	r3, [r2, #12]
      break;
 8005fe6:	e040      	b.n	800606a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fe8:	78fb      	ldrb	r3, [r7, #3]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005ffa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ffc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006000:	2b00      	cmp	r3, #0
 8006002:	da34      	bge.n	800606e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	4413      	add	r3, r2
 800600c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	78fa      	ldrb	r2, [r7, #3]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	440a      	add	r2, r1
 800601a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800601e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006022:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006024:	e023      	b.n	800606e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006026:	78fb      	ldrb	r3, [r7, #3]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	4413      	add	r3, r2
 800602e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006032:	461a      	mov	r2, r3
 8006034:	f240 2325 	movw	r3, #549	@ 0x225
 8006038:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800603a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800603e:	2b00      	cmp	r3, #0
 8006040:	da17      	bge.n	8006072 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006042:	78fb      	ldrb	r3, [r7, #3]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	4413      	add	r3, r2
 800604a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	78fa      	ldrb	r2, [r7, #3]
 8006052:	0151      	lsls	r1, r2, #5
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	440a      	add	r2, r1
 8006058:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800605c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006060:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006062:	e006      	b.n	8006072 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	77fb      	strb	r3, [r7, #31]
      break;
 8006068:	e004      	b.n	8006074 <USB_HC_Init+0x148>
      break;
 800606a:	bf00      	nop
 800606c:	e002      	b.n	8006074 <USB_HC_Init+0x148>
      break;
 800606e:	bf00      	nop
 8006070:	e000      	b.n	8006074 <USB_HC_Init+0x148>
      break;
 8006072:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006074:	78fb      	ldrb	r3, [r7, #3]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	4413      	add	r3, r2
 800607c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006080:	461a      	mov	r2, r3
 8006082:	2300      	movs	r3, #0
 8006084:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006086:	78fb      	ldrb	r3, [r7, #3]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	4413      	add	r3, r2
 800608e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	78fa      	ldrb	r2, [r7, #3]
 8006096:	0151      	lsls	r1, r2, #5
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	440a      	add	r2, r1
 800609c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060a0:	f043 0302 	orr.w	r3, r3, #2
 80060a4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060ac:	699a      	ldr	r2, [r3, #24]
 80060ae:	78fb      	ldrb	r3, [r7, #3]
 80060b0:	f003 030f 	and.w	r3, r3, #15
 80060b4:	2101      	movs	r1, #1
 80060b6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ba:	6939      	ldr	r1, [r7, #16]
 80060bc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80060c0:	4313      	orrs	r3, r2
 80060c2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80060d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	da03      	bge.n	80060e0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80060d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060dc:	61bb      	str	r3, [r7, #24]
 80060de:	e001      	b.n	80060e4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7ff fef9 	bl	8005edc <USB_GetHostSpeed>
 80060ea:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80060ec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d106      	bne.n	8006102 <USB_HC_Init+0x1d6>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d003      	beq.n	8006102 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80060fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	e001      	b.n	8006106 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006106:	787b      	ldrb	r3, [r7, #1]
 8006108:	059b      	lsls	r3, r3, #22
 800610a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800610e:	78bb      	ldrb	r3, [r7, #2]
 8006110:	02db      	lsls	r3, r3, #11
 8006112:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006116:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006118:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800611c:	049b      	lsls	r3, r3, #18
 800611e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006122:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006124:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006126:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800612a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	431a      	orrs	r2, r3
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006134:	78fa      	ldrb	r2, [r7, #3]
 8006136:	0151      	lsls	r1, r2, #5
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	440a      	add	r2, r1
 800613c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006140:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006144:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006146:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800614a:	2b03      	cmp	r3, #3
 800614c:	d003      	beq.n	8006156 <USB_HC_Init+0x22a>
 800614e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006152:	2b01      	cmp	r3, #1
 8006154:	d10f      	bne.n	8006176 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006156:	78fb      	ldrb	r3, [r7, #3]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	4413      	add	r3, r2
 800615e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	78fa      	ldrb	r2, [r7, #3]
 8006166:	0151      	lsls	r1, r2, #5
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	440a      	add	r2, r1
 800616c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006170:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006174:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006176:	7ffb      	ldrb	r3, [r7, #31]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3720      	adds	r7, #32
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40040000 	.word	0x40040000

08006184 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08c      	sub	sp, #48	@ 0x30
 8006188:	af02      	add	r7, sp, #8
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	4613      	mov	r3, r2
 8006190:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800619c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061a0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4a5d      	ldr	r2, [pc, #372]	@ (800631c <USB_HC_StartXfer+0x198>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d12f      	bne.n	800620a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80061aa:	79fb      	ldrb	r3, [r7, #7]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d11c      	bne.n	80061ea <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	7c9b      	ldrb	r3, [r3, #18]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <USB_HC_StartXfer+0x3c>
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	7c9b      	ldrb	r3, [r3, #18]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d124      	bne.n	800620a <USB_HC_StartXfer+0x86>
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	799b      	ldrb	r3, [r3, #6]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d120      	bne.n	800620a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	69fa      	ldr	r2, [r7, #28]
 80061d8:	0151      	lsls	r1, r2, #5
 80061da:	6a3a      	ldr	r2, [r7, #32]
 80061dc:	440a      	add	r2, r1
 80061de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e6:	60d3      	str	r3, [r2, #12]
 80061e8:	e00f      	b.n	800620a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	791b      	ldrb	r3, [r3, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10b      	bne.n	800620a <USB_HC_StartXfer+0x86>
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	795b      	ldrb	r3, [r3, #5]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d107      	bne.n	800620a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	785b      	ldrb	r3, [r3, #1]
 80061fe:	4619      	mov	r1, r3
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 fb6b 	bl	80068dc <USB_DoPing>
        return HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	e232      	b.n	8006670 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	799b      	ldrb	r3, [r3, #6]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d158      	bne.n	80062c4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006212:	2301      	movs	r3, #1
 8006214:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	78db      	ldrb	r3, [r3, #3]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d007      	beq.n	800622e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800621e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	8a92      	ldrh	r2, [r2, #20]
 8006224:	fb03 f202 	mul.w	r2, r3, r2
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	61da      	str	r2, [r3, #28]
 800622c:	e07c      	b.n	8006328 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	7c9b      	ldrb	r3, [r3, #18]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d130      	bne.n	8006298 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	2bbc      	cmp	r3, #188	@ 0xbc
 800623c:	d918      	bls.n	8006270 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	8a9b      	ldrh	r3, [r3, #20]
 8006242:	461a      	mov	r2, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	69da      	ldr	r2, [r3, #28]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d003      	beq.n	8006260 <USB_HC_StartXfer+0xdc>
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	2b02      	cmp	r3, #2
 800625e:	d103      	bne.n	8006268 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2202      	movs	r2, #2
 8006264:	60da      	str	r2, [r3, #12]
 8006266:	e05f      	b.n	8006328 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2201      	movs	r2, #1
 800626c:	60da      	str	r2, [r3, #12]
 800626e:	e05b      	b.n	8006328 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	6a1a      	ldr	r2, [r3, #32]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d007      	beq.n	8006290 <USB_HC_StartXfer+0x10c>
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d003      	beq.n	8006290 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2204      	movs	r2, #4
 800628c:	60da      	str	r2, [r3, #12]
 800628e:	e04b      	b.n	8006328 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2203      	movs	r2, #3
 8006294:	60da      	str	r2, [r3, #12]
 8006296:	e047      	b.n	8006328 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d10d      	bne.n	80062ba <USB_HC_StartXfer+0x136>
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	8a92      	ldrh	r2, [r2, #20]
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d907      	bls.n	80062ba <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	8a92      	ldrh	r2, [r2, #20]
 80062b0:	fb03 f202 	mul.w	r2, r3, r2
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	61da      	str	r2, [r3, #28]
 80062b8:	e036      	b.n	8006328 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	6a1a      	ldr	r2, [r3, #32]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	61da      	str	r2, [r3, #28]
 80062c2:	e031      	b.n	8006328 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d018      	beq.n	80062fe <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	8a92      	ldrh	r2, [r2, #20]
 80062d4:	4413      	add	r3, r2
 80062d6:	3b01      	subs	r3, #1
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	8a92      	ldrh	r2, [r2, #20]
 80062dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80062e0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80062e2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80062e4:	8b7b      	ldrh	r3, [r7, #26]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d90b      	bls.n	8006302 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80062ea:	8b7b      	ldrh	r3, [r7, #26]
 80062ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	8a92      	ldrh	r2, [r2, #20]
 80062f4:	fb03 f202 	mul.w	r2, r3, r2
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	61da      	str	r2, [r3, #28]
 80062fc:	e001      	b.n	8006302 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80062fe:	2301      	movs	r3, #1
 8006300:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	78db      	ldrb	r3, [r3, #3]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800630a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	8a92      	ldrh	r2, [r2, #20]
 8006310:	fb03 f202 	mul.w	r2, r3, r2
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	61da      	str	r2, [r3, #28]
 8006318:	e006      	b.n	8006328 <USB_HC_StartXfer+0x1a4>
 800631a:	bf00      	nop
 800631c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	6a1a      	ldr	r2, [r3, #32]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006330:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006332:	04d9      	lsls	r1, r3, #19
 8006334:	4ba3      	ldr	r3, [pc, #652]	@ (80065c4 <USB_HC_StartXfer+0x440>)
 8006336:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006338:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	7d9b      	ldrb	r3, [r3, #22]
 800633e:	075b      	lsls	r3, r3, #29
 8006340:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006344:	69f9      	ldr	r1, [r7, #28]
 8006346:	0148      	lsls	r0, r1, #5
 8006348:	6a39      	ldr	r1, [r7, #32]
 800634a:	4401      	add	r1, r0
 800634c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006350:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006352:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d009      	beq.n	800636e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	6999      	ldr	r1, [r3, #24]
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	4413      	add	r3, r2
 8006366:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800636a:	460a      	mov	r2, r1
 800636c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	bf0c      	ite	eq
 800637e:	2301      	moveq	r3, #1
 8006380:	2300      	movne	r3, #0
 8006382:	b2db      	uxtb	r3, r3
 8006384:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	4413      	add	r3, r2
 800638e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	0151      	lsls	r1, r2, #5
 8006398:	6a3a      	ldr	r2, [r7, #32]
 800639a:	440a      	add	r2, r1
 800639c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063a0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80063a4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	7e7b      	ldrb	r3, [r7, #25]
 80063b6:	075b      	lsls	r3, r3, #29
 80063b8:	69f9      	ldr	r1, [r7, #28]
 80063ba:	0148      	lsls	r0, r1, #5
 80063bc:	6a39      	ldr	r1, [r7, #32]
 80063be:	4401      	add	r1, r0
 80063c0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80063c4:	4313      	orrs	r3, r2
 80063c6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	799b      	ldrb	r3, [r3, #6]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	f040 80c3 	bne.w	8006558 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	7c5b      	ldrb	r3, [r3, #17]
 80063d6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80063dc:	4313      	orrs	r3, r2
 80063de:	69fa      	ldr	r2, [r7, #28]
 80063e0:	0151      	lsls	r1, r2, #5
 80063e2:	6a3a      	ldr	r2, [r7, #32]
 80063e4:	440a      	add	r2, r1
 80063e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80063ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80063ee:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	6a3a      	ldr	r2, [r7, #32]
 8006404:	440a      	add	r2, r1
 8006406:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800640a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800640e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	79db      	ldrb	r3, [r3, #7]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d123      	bne.n	8006460 <USB_HC_StartXfer+0x2dc>
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	78db      	ldrb	r3, [r3, #3]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d11f      	bne.n	8006460 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	4413      	add	r3, r2
 8006428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	0151      	lsls	r1, r2, #5
 8006432:	6a3a      	ldr	r2, [r7, #32]
 8006434:	440a      	add	r2, r1
 8006436:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800643a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800643e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	4413      	add	r3, r2
 8006448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	0151      	lsls	r1, r2, #5
 8006452:	6a3a      	ldr	r2, [r7, #32]
 8006454:	440a      	add	r2, r1
 8006456:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800645a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800645e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	7c9b      	ldrb	r3, [r3, #18]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d003      	beq.n	8006470 <USB_HC_StartXfer+0x2ec>
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	7c9b      	ldrb	r3, [r3, #18]
 800646c:	2b03      	cmp	r3, #3
 800646e:	d117      	bne.n	80064a0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006474:	2b01      	cmp	r3, #1
 8006476:	d113      	bne.n	80064a0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	78db      	ldrb	r3, [r3, #3]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d10f      	bne.n	80064a0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	4413      	add	r3, r2
 8006488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	69fa      	ldr	r2, [r7, #28]
 8006490:	0151      	lsls	r1, r2, #5
 8006492:	6a3a      	ldr	r2, [r7, #32]
 8006494:	440a      	add	r2, r1
 8006496:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800649a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800649e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	7c9b      	ldrb	r3, [r3, #18]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d162      	bne.n	800656e <USB_HC_StartXfer+0x3ea>
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	78db      	ldrb	r3, [r3, #3]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d15e      	bne.n	800656e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d858      	bhi.n	800656c <USB_HC_StartXfer+0x3e8>
 80064ba:	a201      	add	r2, pc, #4	@ (adr r2, 80064c0 <USB_HC_StartXfer+0x33c>)
 80064bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c0:	080064d1 	.word	0x080064d1
 80064c4:	080064f3 	.word	0x080064f3
 80064c8:	08006515 	.word	0x08006515
 80064cc:	08006537 	.word	0x08006537
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	69fa      	ldr	r2, [r7, #28]
 80064e0:	0151      	lsls	r1, r2, #5
 80064e2:	6a3a      	ldr	r2, [r7, #32]
 80064e4:	440a      	add	r2, r1
 80064e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064ee:	6053      	str	r3, [r2, #4]
          break;
 80064f0:	e03d      	b.n	800656e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	0151      	lsls	r1, r2, #5
 8006504:	6a3a      	ldr	r2, [r7, #32]
 8006506:	440a      	add	r2, r1
 8006508:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800650c:	f043 030e 	orr.w	r3, r3, #14
 8006510:	6053      	str	r3, [r2, #4]
          break;
 8006512:	e02c      	b.n	800656e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	4413      	add	r3, r2
 800651c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	69fa      	ldr	r2, [r7, #28]
 8006524:	0151      	lsls	r1, r2, #5
 8006526:	6a3a      	ldr	r2, [r7, #32]
 8006528:	440a      	add	r2, r1
 800652a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800652e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006532:	6053      	str	r3, [r2, #4]
          break;
 8006534:	e01b      	b.n	800656e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	4413      	add	r3, r2
 800653e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	69fa      	ldr	r2, [r7, #28]
 8006546:	0151      	lsls	r1, r2, #5
 8006548:	6a3a      	ldr	r2, [r7, #32]
 800654a:	440a      	add	r2, r1
 800654c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006550:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006554:	6053      	str	r3, [r2, #4]
          break;
 8006556:	e00a      	b.n	800656e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	4413      	add	r3, r2
 8006560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006564:	461a      	mov	r2, r3
 8006566:	2300      	movs	r3, #0
 8006568:	6053      	str	r3, [r2, #4]
 800656a:	e000      	b.n	800656e <USB_HC_StartXfer+0x3ea>
          break;
 800656c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	4413      	add	r3, r2
 8006576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006584:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	78db      	ldrb	r3, [r3, #3]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d004      	beq.n	8006598 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006594:	613b      	str	r3, [r7, #16]
 8006596:	e003      	b.n	80065a0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800659e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80065a6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065b4:	461a      	mov	r2, r3
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80065ba:	79fb      	ldrb	r3, [r7, #7]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d003      	beq.n	80065c8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	e055      	b.n	8006670 <USB_HC_StartXfer+0x4ec>
 80065c4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	78db      	ldrb	r3, [r3, #3]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d14e      	bne.n	800666e <USB_HC_StartXfer+0x4ea>
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d04a      	beq.n	800666e <USB_HC_StartXfer+0x4ea>
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	79db      	ldrb	r3, [r3, #7]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d146      	bne.n	800666e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	7c9b      	ldrb	r3, [r3, #18]
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d831      	bhi.n	800664c <USB_HC_StartXfer+0x4c8>
 80065e8:	a201      	add	r2, pc, #4	@ (adr r2, 80065f0 <USB_HC_StartXfer+0x46c>)
 80065ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ee:	bf00      	nop
 80065f0:	08006601 	.word	0x08006601
 80065f4:	08006625 	.word	0x08006625
 80065f8:	08006601 	.word	0x08006601
 80065fc:	08006625 	.word	0x08006625
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	3303      	adds	r3, #3
 8006606:	089b      	lsrs	r3, r3, #2
 8006608:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800660a:	8afa      	ldrh	r2, [r7, #22]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006610:	b29b      	uxth	r3, r3
 8006612:	429a      	cmp	r2, r3
 8006614:	d91c      	bls.n	8006650 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	f043 0220 	orr.w	r2, r3, #32
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	619a      	str	r2, [r3, #24]
        }
        break;
 8006622:	e015      	b.n	8006650 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	3303      	adds	r3, #3
 800662a:	089b      	lsrs	r3, r3, #2
 800662c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800662e:	8afa      	ldrh	r2, [r7, #22]
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	b29b      	uxth	r3, r3
 800663a:	429a      	cmp	r2, r3
 800663c:	d90a      	bls.n	8006654 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	619a      	str	r2, [r3, #24]
        }
        break;
 800664a:	e003      	b.n	8006654 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800664c:	bf00      	nop
 800664e:	e002      	b.n	8006656 <USB_HC_StartXfer+0x4d2>
        break;
 8006650:	bf00      	nop
 8006652:	e000      	b.n	8006656 <USB_HC_StartXfer+0x4d2>
        break;
 8006654:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	6999      	ldr	r1, [r3, #24]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	785a      	ldrb	r2, [r3, #1]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	b29b      	uxth	r3, r3
 8006664:	2000      	movs	r0, #0
 8006666:	9000      	str	r0, [sp, #0]
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f7ff f9c9 	bl	8005a00 <USB_WritePacket>
  }

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3728      	adds	r7, #40	@ 0x28
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	b29b      	uxth	r3, r3
}
 800668e:	4618      	mov	r0, r3
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800669a:	b480      	push	{r7}
 800669c:	b089      	sub	sp, #36	@ 0x24
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	460b      	mov	r3, r1
 80066a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80066aa:	78fb      	ldrb	r3, [r7, #3]
 80066ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	0c9b      	lsrs	r3, r3, #18
 80066c2:	f003 0303 	and.w	r3, r3, #3
 80066c6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	0fdb      	lsrs	r3, r3, #31
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	0fdb      	lsrs	r3, r3, #31
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f003 0320 	and.w	r3, r3, #32
 80066fc:	2b20      	cmp	r3, #32
 80066fe:	d10d      	bne.n	800671c <USB_HC_Halt+0x82>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10a      	bne.n	800671c <USB_HC_Halt+0x82>
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d002      	beq.n	8006718 <USB_HC_Halt+0x7e>
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2b03      	cmp	r3, #3
 8006716:	d101      	bne.n	800671c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	e0d8      	b.n	80068ce <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <USB_HC_Halt+0x8e>
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2b02      	cmp	r3, #2
 8006726:	d173      	bne.n	8006810 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	4413      	add	r3, r2
 8006730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	0151      	lsls	r1, r2, #5
 800673a:	69fa      	ldr	r2, [r7, #28]
 800673c:	440a      	add	r2, r1
 800673e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006742:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006746:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f003 0320 	and.w	r3, r3, #32
 8006750:	2b00      	cmp	r3, #0
 8006752:	d14a      	bne.n	80067ea <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006758:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d133      	bne.n	80067c8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	4413      	add	r3, r2
 8006768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	0151      	lsls	r1, r2, #5
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	440a      	add	r2, r1
 8006776:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800677a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800677e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	4413      	add	r3, r2
 8006788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	0151      	lsls	r1, r2, #5
 8006792:	69fa      	ldr	r2, [r7, #28]
 8006794:	440a      	add	r2, r1
 8006796:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800679a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800679e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	3301      	adds	r3, #1
 80067a4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067ac:	d82e      	bhi.n	800680c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067c4:	d0ec      	beq.n	80067a0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067c6:	e081      	b.n	80068cc <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	0151      	lsls	r1, r2, #5
 80067da:	69fa      	ldr	r2, [r7, #28]
 80067dc:	440a      	add	r2, r1
 80067de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067e6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067e8:	e070      	b.n	80068cc <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	69fa      	ldr	r2, [r7, #28]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006804:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006808:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800680a:	e05f      	b.n	80068cc <USB_HC_Halt+0x232>
            break;
 800680c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800680e:	e05d      	b.n	80068cc <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	4413      	add	r3, r2
 8006818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	0151      	lsls	r1, r2, #5
 8006822:	69fa      	ldr	r2, [r7, #28]
 8006824:	440a      	add	r2, r1
 8006826:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800682a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800682e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d133      	bne.n	80068a8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	4413      	add	r3, r2
 8006848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	0151      	lsls	r1, r2, #5
 8006852:	69fa      	ldr	r2, [r7, #28]
 8006854:	440a      	add	r2, r1
 8006856:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800685a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800685e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	4413      	add	r3, r2
 8006868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69ba      	ldr	r2, [r7, #24]
 8006870:	0151      	lsls	r1, r2, #5
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	440a      	add	r2, r1
 8006876:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800687a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800687e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	3301      	adds	r3, #1
 8006884:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800688c:	d81d      	bhi.n	80068ca <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	4413      	add	r3, r2
 8006896:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068a4:	d0ec      	beq.n	8006880 <USB_HC_Halt+0x1e6>
 80068a6:	e011      	b.n	80068cc <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	0151      	lsls	r1, r2, #5
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	440a      	add	r2, r1
 80068be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068c6:	6013      	str	r3, [r2, #0]
 80068c8:	e000      	b.n	80068cc <USB_HC_Halt+0x232>
          break;
 80068ca:	bf00      	nop
    }
  }

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3724      	adds	r7, #36	@ 0x24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
	...

080068dc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80068ec:	78fb      	ldrb	r3, [r7, #3]
 80068ee:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80068f0:	2301      	movs	r3, #1
 80068f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	04da      	lsls	r2, r3, #19
 80068f8:	4b15      	ldr	r3, [pc, #84]	@ (8006950 <USB_DoPing+0x74>)
 80068fa:	4013      	ands	r3, r2
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	0151      	lsls	r1, r2, #5
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	440a      	add	r2, r1
 8006904:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006908:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800690c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	4413      	add	r3, r2
 8006916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006924:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800692c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	4413      	add	r3, r2
 8006936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800693a:	461a      	mov	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	371c      	adds	r7, #28
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	1ff80000 	.word	0x1ff80000

08006954 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800695c:	2300      	movs	r3, #0
 800695e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006964:	2300      	movs	r3, #0
 8006966:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f7fe ff8c 	bl	8005886 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800696e:	2110      	movs	r1, #16
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7fe ffe5 	bl	8005940 <USB_FlushTxFifo>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff f80f 	bl	80059a4 <USB_FlushRxFifo>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006990:	2300      	movs	r3, #0
 8006992:	61bb      	str	r3, [r7, #24]
 8006994:	e01f      	b.n	80069d6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	4413      	add	r3, r2
 800699e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80069bc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ca:	461a      	mov	r2, r3
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	3301      	adds	r3, #1
 80069d4:	61bb      	str	r3, [r7, #24]
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	2b0f      	cmp	r3, #15
 80069da:	d9dc      	bls.n	8006996 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80069dc:	2300      	movs	r3, #0
 80069de:	61bb      	str	r3, [r7, #24]
 80069e0:	e034      	b.n	8006a4c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a08:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a16:	461a      	mov	r2, r3
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a28:	d80c      	bhi.n	8006a44 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a40:	d0ec      	beq.n	8006a1c <USB_StopHost+0xc8>
 8006a42:	e000      	b.n	8006a46 <USB_StopHost+0xf2>
        break;
 8006a44:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	61bb      	str	r3, [r7, #24]
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	2b0f      	cmp	r3, #15
 8006a50:	d9c7      	bls.n	80069e2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a58:	461a      	mov	r2, r3
 8006a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a5e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f04f 32ff 	mov.w	r2, #4294967295
 8006a66:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7fe fefb 	bl	8005864 <USB_EnableGlobalInt>

  return ret;
 8006a6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3720      	adds	r7, #32
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <TM_DELAY_Init>:
} TM_DELAY_Timers_t;

/* Custom timers structure */
static TM_DELAY_Timers_t CustomTimers = {0};

uint32_t TM_DELAY_Init(void) {
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
#if !defined(STM32F0xx)
	uint32_t c;
	
    /* Enable TRC */
    CoreDebug->DEMCR &= ~0x01000000;
 8006a7e:	4b15      	ldr	r3, [pc, #84]	@ (8006ad4 <TM_DELAY_Init+0x5c>)
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	4a14      	ldr	r2, [pc, #80]	@ (8006ad4 <TM_DELAY_Init+0x5c>)
 8006a84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a88:	60d3      	str	r3, [r2, #12]
    CoreDebug->DEMCR |=  0x01000000;
 8006a8a:	4b12      	ldr	r3, [pc, #72]	@ (8006ad4 <TM_DELAY_Init+0x5c>)
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	4a11      	ldr	r2, [pc, #68]	@ (8006ad4 <TM_DELAY_Init+0x5c>)
 8006a90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a94:	60d3      	str	r3, [r2, #12]
	
    /* Enable counter */
    DWT->CTRL &= ~0x00000001;
 8006a96:	4b10      	ldr	r3, [pc, #64]	@ (8006ad8 <TM_DELAY_Init+0x60>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a0f      	ldr	r2, [pc, #60]	@ (8006ad8 <TM_DELAY_Init+0x60>)
 8006a9c:	f023 0301 	bic.w	r3, r3, #1
 8006aa0:	6013      	str	r3, [r2, #0]
    DWT->CTRL |=  0x00000001;
 8006aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad8 <TM_DELAY_Init+0x60>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8006ad8 <TM_DELAY_Init+0x60>)
 8006aa8:	f043 0301 	orr.w	r3, r3, #1
 8006aac:	6013      	str	r3, [r2, #0]
	
    /* Reset counter */
    DWT->CYCCNT = 0;
 8006aae:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad8 <TM_DELAY_Init+0x60>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	605a      	str	r2, [r3, #4]
	
	/* Check if DWT has started */
	c = DWT->CYCCNT;
 8006ab4:	4b08      	ldr	r3, [pc, #32]	@ (8006ad8 <TM_DELAY_Init+0x60>)
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	607b      	str	r3, [r7, #4]
	
	/* 2 dummys */
	__ASM volatile ("NOP");
 8006aba:	bf00      	nop
	__ASM volatile ("NOP");
 8006abc:	bf00      	nop
	
	/* Return difference, if result is zero, DWT has not started */
	return (DWT->CYCCNT - c);
 8006abe:	4b06      	ldr	r3, [pc, #24]	@ (8006ad8 <TM_DELAY_Init+0x60>)
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	1ad3      	subs	r3, r2, r3
#else
	/* Return OK */
	return 1;
#endif
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	e000edf0 	.word	0xe000edf0
 8006ad8:	e0001000 	.word	0xe0001000

08006adc <TM_DELAY_1msHandler>:
	/* Return pointer */
	return Timer;
}

/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
 8006adc:	b480      	push	{r7}
 8006ade:	af00      	add	r7, sp, #0
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_DELAY_1msHandler could be implemented in the user file
	*/
}
 8006ae0:	bf00      	nop
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
	...

08006aec <HAL_IncTick>:
/***************************************************/
/*       Custom HAL function implementations       */
/***************************************************/

/* Called from Systick handler */
void HAL_IncTick(void) {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 8006af2:	4b3e      	ldr	r3, [pc, #248]	@ (8006bec <HAL_IncTick+0x100>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3301      	adds	r3, #1
 8006af8:	4a3c      	ldr	r2, [pc, #240]	@ (8006bec <HAL_IncTick+0x100>)
 8006afa:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 8006afc:	4b3c      	ldr	r3, [pc, #240]	@ (8006bf0 <HAL_IncTick+0x104>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d004      	beq.n	8006b0e <HAL_IncTick+0x22>
		TM_Time2--;
 8006b04:	4b3a      	ldr	r3, [pc, #232]	@ (8006bf0 <HAL_IncTick+0x104>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	4a39      	ldr	r2, [pc, #228]	@ (8006bf0 <HAL_IncTick+0x104>)
 8006b0c:	6013      	str	r3, [r2, #0]
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8006b0e:	2300      	movs	r3, #0
 8006b10:	71fb      	strb	r3, [r7, #7]
 8006b12:	e05f      	b.n	8006bd4 <HAL_IncTick+0xe8>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8006b14:	79fb      	ldrb	r3, [r7, #7]
 8006b16:	4a37      	ldr	r2, [pc, #220]	@ (8006bf4 <HAL_IncTick+0x108>)
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	685b      	ldr	r3, [r3, #4]
		if (
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d055      	beq.n	8006bce <HAL_IncTick+0xe2>
			CustomTimers.Timers[i]->Flags.F.CNTEN /*!< Timer is enabled */
 8006b22:	79fb      	ldrb	r3, [r7, #7]
 8006b24:	4a33      	ldr	r2, [pc, #204]	@ (8006bf4 <HAL_IncTick+0x108>)
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	685b      	ldr	r3, [r3, #4]
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d04a      	beq.n	8006bce <HAL_IncTick+0xe2>
		) {
			/* Decrease counter if needed */
			if (CustomTimers.Timers[i]->CNT) {
 8006b38:	79fb      	ldrb	r3, [r7, #7]
 8006b3a:	4a2e      	ldr	r2, [pc, #184]	@ (8006bf4 <HAL_IncTick+0x108>)
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d007      	beq.n	8006b58 <HAL_IncTick+0x6c>
				CustomTimers.Timers[i]->CNT--;
 8006b48:	79fb      	ldrb	r3, [r7, #7]
 8006b4a:	4a2a      	ldr	r2, [pc, #168]	@ (8006bf4 <HAL_IncTick+0x108>)
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	689a      	ldr	r2, [r3, #8]
 8006b54:	3a01      	subs	r2, #1
 8006b56:	609a      	str	r2, [r3, #8]
			}

			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 8006b58:	79fb      	ldrb	r3, [r7, #7]
 8006b5a:	4a26      	ldr	r2, [pc, #152]	@ (8006bf4 <HAL_IncTick+0x108>)
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d132      	bne.n	8006bce <HAL_IncTick+0xe2>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 8006b68:	79fb      	ldrb	r3, [r7, #7]
 8006b6a:	4a22      	ldr	r2, [pc, #136]	@ (8006bf4 <HAL_IncTick+0x108>)
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	79fb      	ldrb	r3, [r7, #7]
 8006b76:	491f      	ldr	r1, [pc, #124]	@ (8006bf4 <HAL_IncTick+0x108>)
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	440b      	add	r3, r1
 8006b7c:	6858      	ldr	r0, [r3, #4]
 8006b7e:	79fb      	ldrb	r3, [r7, #7]
 8006b80:	491c      	ldr	r1, [pc, #112]	@ (8006bf4 <HAL_IncTick+0x108>)
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	440b      	add	r3, r1
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4790      	blx	r2

				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8006b8e:	79fb      	ldrb	r3, [r7, #7]
 8006b90:	4a18      	ldr	r2, [pc, #96]	@ (8006bf4 <HAL_IncTick+0x108>)
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	79fb      	ldrb	r3, [r7, #7]
 8006b9a:	4916      	ldr	r1, [pc, #88]	@ (8006bf4 <HAL_IncTick+0x108>)
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	440b      	add	r3, r1
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	6852      	ldr	r2, [r2, #4]
 8006ba4:	609a      	str	r2, [r3, #8]

				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 8006ba6:	79fb      	ldrb	r3, [r7, #7]
 8006ba8:	4a12      	ldr	r2, [pc, #72]	@ (8006bf4 <HAL_IncTick+0x108>)
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d108      	bne.n	8006bce <HAL_IncTick+0xe2>
					/* Disable counter */
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 8006bbc:	79fb      	ldrb	r3, [r7, #7]
 8006bbe:	4a0d      	ldr	r2, [pc, #52]	@ (8006bf4 <HAL_IncTick+0x108>)
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	7813      	ldrb	r3, [r2, #0]
 8006bc8:	f36f 0341 	bfc	r3, #1, #1
 8006bcc:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < CustomTimers.Count; i++) {
 8006bce:	79fb      	ldrb	r3, [r7, #7]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	71fb      	strb	r3, [r7, #7]
 8006bd4:	4b07      	ldr	r3, [pc, #28]	@ (8006bf4 <HAL_IncTick+0x108>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	79fa      	ldrb	r2, [r7, #7]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d39a      	bcc.n	8006b14 <HAL_IncTick+0x28>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 8006bde:	f7ff ff7d 	bl	8006adc <TM_DELAY_1msHandler>
}
 8006be2:	bf00      	nop
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	200001dc 	.word	0x200001dc
 8006bf0:	200001d8 	.word	0x200001d8
 8006bf4:	200001e0 	.word	0x200001e0

08006bf8 <HAL_Delay>:

void HAL_Delay(uint32_t Delay) {
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c00:	f3ef 8305 	mrs	r3, IPSR
 8006c04:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c06:	68bb      	ldr	r3, [r7, #8]
	/* Delay for amount of milliseconds */
	/* Check if we are called from ISR */
	if (__get_IPSR() == 0) {
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d115      	bne.n	8006c38 <HAL_Delay+0x40>
		/* Called from thread mode */
		uint32_t tickstart = HAL_GetTick();
 8006c0c:	f000 f81e 	bl	8006c4c <HAL_GetTick>
 8006c10:	60f8      	str	r0, [r7, #12]
		
		/* Count interrupts */
		while ((HAL_GetTick() - tickstart) < Delay) {
 8006c12:	bf00      	nop
 8006c14:	f000 f81a 	bl	8006c4c <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d8f7      	bhi.n	8006c14 <HAL_Delay+0x1c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				Delay--;
			}
		}
	}
}
 8006c24:	e00b      	b.n	8006c3e <HAL_Delay+0x46>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8006c26:	4b08      	ldr	r3, [pc, #32]	@ (8006c48 <HAL_Delay+0x50>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <HAL_Delay+0x40>
				Delay--;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	3b01      	subs	r3, #1
 8006c36:	607b      	str	r3, [r7, #4]
		while (Delay) {
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1f3      	bne.n	8006c26 <HAL_Delay+0x2e>
}
 8006c3e:	bf00      	nop
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	e000e010 	.word	0xe000e010

08006c4c <HAL_GetTick>:

uint32_t HAL_GetTick(void) {
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
	/* Return current time in milliseconds */
	return TM_Time;
 8006c50:	4b03      	ldr	r3, [pc, #12]	@ (8006c60 <HAL_GetTick+0x14>)
 8006c52:	681b      	ldr	r3, [r3, #0]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	200001dc 	.word	0x200001dc

08006c64 <TM_DISCO_LedInit>:
	}
};

#endif

void TM_DISCO_LedInit(void) {
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af02      	add	r7, sp, #8
		/* Set pin as output */
		TM_GPIO_Init(DISCO_Leds[i].Port, DISCO_Leds[i].Pin, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High);
	}
#else
	/* Set pins as output */
	TM_GPIO_Init(DISCO_LED_PORT, LED_ALL, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High);
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	9301      	str	r3, [sp, #4]
 8006c6e:	2300      	movs	r3, #0
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	2300      	movs	r3, #0
 8006c74:	2201      	movs	r2, #1
 8006c76:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8006c7a:	4805      	ldr	r0, [pc, #20]	@ (8006c90 <TM_DISCO_LedInit+0x2c>)
 8006c7c:	f000 f80a 	bl	8006c94 <TM_GPIO_Init>
#endif
	
	/* Turn leds off */
	TM_DISCO_LedOff(LED_ALL);
 8006c80:	4b03      	ldr	r3, [pc, #12]	@ (8006c90 <TM_DISCO_LedInit+0x2c>)
 8006c82:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 8006c86:	619a      	str	r2, [r3, #24]
}
 8006c88:	bf00      	nop
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	40020c00 	.word	0x40020c00

08006c94 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af02      	add	r7, sp, #8
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	4608      	mov	r0, r1
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	807b      	strh	r3, [r7, #2]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	707b      	strb	r3, [r7, #1]
 8006caa:	4613      	mov	r3, r2
 8006cac:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 8006cae:	887b      	ldrh	r3, [r7, #2]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00e      	beq.n	8006cd2 <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f875 	bl	8006da4 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8006cba:	7838      	ldrb	r0, [r7, #0]
 8006cbc:	787a      	ldrb	r2, [r7, #1]
 8006cbe:	8879      	ldrh	r1, [r7, #2]
 8006cc0:	7d3b      	ldrb	r3, [r7, #20]
 8006cc2:	9301      	str	r3, [sp, #4]
 8006cc4:	7c3b      	ldrb	r3, [r7, #16]
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	4603      	mov	r3, r0
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f882 	bl	8006dd4 <TM_GPIO_INT_Init>
 8006cd0:	e000      	b.n	8006cd4 <TM_GPIO_Init+0x40>
		return;
 8006cd2:	bf00      	nop
}
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <TM_GPIO_InitAlternate>:

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b086      	sub	sp, #24
 8006cde:	af02      	add	r7, sp, #8
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	4608      	mov	r0, r1
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	4603      	mov	r3, r0
 8006cea:	807b      	strh	r3, [r7, #2]
 8006cec:	460b      	mov	r3, r1
 8006cee:	707b      	strb	r3, [r7, #1]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 8006cf4:	887b      	ldrh	r3, [r7, #2]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d03f      	beq.n	8006d7a <TM_GPIO_InitAlternate+0xa0>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f852 	bl	8006da4 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	e02a      	b.n	8006d5c <TM_GPIO_InitAlternate+0x82>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8006d06:	887a      	ldrh	r2, [r7, #2]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	fa42 f303 	asr.w	r3, r2, r3
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d01e      	beq.n	8006d54 <TM_GPIO_InitAlternate+0x7a>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	08da      	lsrs	r2, r3, #3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	3208      	adds	r2, #8
 8006d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	f002 0207 	and.w	r2, r2, #7
 8006d28:	0092      	lsls	r2, r2, #2
 8006d2a:	210f      	movs	r1, #15
 8006d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8006d30:	43d2      	mvns	r2, r2
 8006d32:	4013      	ands	r3, r2
 8006d34:	7f39      	ldrb	r1, [r7, #28]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	f002 0207 	and.w	r2, r2, #7
 8006d3c:	0092      	lsls	r2, r2, #2
 8006d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8006d42:	4611      	mov	r1, r2
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	08d2      	lsrs	r2, r2, #3
 8006d48:	4319      	orrs	r1, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	3208      	adds	r2, #8
 8006d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006d52:	e000      	b.n	8006d56 <TM_GPIO_InitAlternate+0x7c>
			continue;
 8006d54:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b0f      	cmp	r3, #15
 8006d60:	d9d1      	bls.n	8006d06 <TM_GPIO_InitAlternate+0x2c>
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8006d62:	787a      	ldrb	r2, [r7, #1]
 8006d64:	8879      	ldrh	r1, [r7, #2]
 8006d66:	7e3b      	ldrb	r3, [r7, #24]
 8006d68:	9301      	str	r3, [sp, #4]
 8006d6a:	783b      	ldrb	r3, [r7, #0]
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	2202      	movs	r2, #2
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f82e 	bl	8006dd4 <TM_GPIO_INT_Init>
 8006d78:	e000      	b.n	8006d7c <TM_GPIO_InitAlternate+0xa2>
		return;
 8006d7a:	bf00      	nop
}
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f103 433f 	add.w	r3, r3, #3204448256	@ 0xbf000000
 8006d90:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 8006d94:	0a9b      	lsrs	r3, r3, #10
 8006d96:	b29b      	uxth	r3, r3
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7ff ffe8 	bl	8006d82 <TM_GPIO_GetPortSource>
 8006db2:	4603      	mov	r3, r0
 8006db4:	461a      	mov	r2, r3
 8006db6:	2301      	movs	r3, #1
 8006db8:	fa03 f202 	lsl.w	r2, r3, r2
 8006dbc:	4b04      	ldr	r3, [pc, #16]	@ (8006dd0 <TM_GPIO_INT_EnableClock+0x2c>)
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	4a03      	ldr	r2, [pc, #12]	@ (8006dd0 <TM_GPIO_INT_EnableClock+0x2c>)
 8006dc4:	430b      	orrs	r3, r1
 8006dc6:	6313      	str	r3, [r2, #48]	@ 0x30
#endif
}
 8006dc8:	bf00      	nop
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	40023800 	.word	0x40023800

08006dd4 <TM_GPIO_INT_Init>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	4608      	mov	r0, r1
 8006dde:	4611      	mov	r1, r2
 8006de0:	461a      	mov	r2, r3
 8006de2:	4603      	mov	r3, r0
 8006de4:	807b      	strh	r3, [r7, #2]
 8006de6:	460b      	mov	r3, r1
 8006de8:	707b      	strb	r3, [r7, #1]
 8006dea:	4613      	mov	r3, r2
 8006dec:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7ff ffc7 	bl	8006d82 <TM_GPIO_GetPortSource>
 8006df4:	4603      	mov	r3, r0
 8006df6:	73bb      	strb	r3, [r7, #14]
		GPIO_Speed = TM_GPIO_Speed_High;
	}
#endif
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8006df8:	2300      	movs	r3, #0
 8006dfa:	73fb      	strb	r3, [r7, #15]
 8006dfc:	e067      	b.n	8006ece <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8006dfe:	887a      	ldrh	r2, [r7, #2]
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	fa42 f303 	asr.w	r3, r2, r3
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d05b      	beq.n	8006ec6 <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	4a33      	ldr	r2, [pc, #204]	@ (8006ee0 <TM_GPIO_INT_Init+0x10c>)
 8006e12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e16:	b21a      	sxth	r2, r3
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e20:	b21b      	sxth	r3, r3
 8006e22:	4313      	orrs	r3, r2
 8006e24:	b21a      	sxth	r2, r3
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	b291      	uxth	r1, r2
 8006e2a:	4a2d      	ldr	r2, [pc, #180]	@ (8006ee0 <TM_GPIO_INT_Init+0x10c>)
 8006e2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	7bfa      	ldrb	r2, [r7, #15]
 8006e36:	0052      	lsls	r2, r2, #1
 8006e38:	2103      	movs	r1, #3
 8006e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8006e3e:	43d2      	mvns	r2, r2
 8006e40:	4013      	ands	r3, r2
 8006e42:	7e39      	ldrb	r1, [r7, #24]
 8006e44:	7bfa      	ldrb	r2, [r7, #15]
 8006e46:	0052      	lsls	r2, r2, #1
 8006e48:	fa01 f202 	lsl.w	r2, r1, r2
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
 8006e58:	005b      	lsls	r3, r3, #1
 8006e5a:	2103      	movs	r1, #3
 8006e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e60:	43db      	mvns	r3, r3
 8006e62:	4013      	ands	r3, r2
 8006e64:	7879      	ldrb	r1, [r7, #1]
 8006e66:	7bfa      	ldrb	r2, [r7, #15]
 8006e68:	0052      	lsls	r2, r2, #1
 8006e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8006e74:	787b      	ldrb	r3, [r7, #1]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d002      	beq.n	8006e80 <TM_GPIO_INT_Init+0xac>
 8006e7a:	787b      	ldrb	r3, [r7, #1]
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d123      	bne.n	8006ec8 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	7bfa      	ldrb	r2, [r7, #15]
 8006e86:	2101      	movs	r1, #1
 8006e88:	fa01 f202 	lsl.w	r2, r1, r2
 8006e8c:	b292      	uxth	r2, r2
 8006e8e:	43d2      	mvns	r2, r2
 8006e90:	4013      	ands	r3, r2
 8006e92:	7839      	ldrb	r1, [r7, #0]
 8006e94:	7bfa      	ldrb	r2, [r7, #15]
 8006e96:	fa01 f202 	lsl.w	r2, r1, r2
 8006e9a:	b292      	uxth	r2, r2
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689a      	ldr	r2, [r3, #8]
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	2103      	movs	r1, #3
 8006eac:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb0:	43db      	mvns	r3, r3
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	7f39      	ldrb	r1, [r7, #28]
 8006eb6:	7bfa      	ldrb	r2, [r7, #15]
 8006eb8:	0052      	lsls	r2, r2, #1
 8006eba:	fa01 f202 	lsl.w	r2, r1, r2
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	609a      	str	r2, [r3, #8]
 8006ec4:	e000      	b.n	8006ec8 <TM_GPIO_INT_Init+0xf4>
			continue;
 8006ec6:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	73fb      	strb	r3, [r7, #15]
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
 8006ed0:	2b0f      	cmp	r3, #15
 8006ed2:	d994      	bls.n	8006dfe <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	200001f8 	.word	0x200001f8

08006ee4 <TM_SPI_Send>:
 * @brief  Sends single byte over SPI
 * @param  *SPIx: Pointer to SPIx peripheral you will use, where x is between 1 to 6
 * @param  data: 8-bit data size to send over SPI
 * @retval Received byte from slave device
 */
static __INLINE uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	70fb      	strb	r3, [r7, #3]
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED_RESP(SPIx, 0);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <TM_SPI_Send+0x1c>
 8006efc:	2300      	movs	r3, #0
 8006efe:	e01f      	b.n	8006f40 <TM_SPI_Send+0x5c>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT_TX(SPIx);
 8006f00:	bf00      	nop
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0f9      	beq.n	8006f02 <TM_SPI_Send+0x1e>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1f3      	bne.n	8006f02 <TM_SPI_Send+0x1e>
	
	/* Fill output buffer with data */
	SPIx->DR = data;
 8006f1a:	78fa      	ldrb	r2, [r7, #3]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	60da      	str	r2, [r3, #12]
	
	/* Wait for transmission to complete */
	SPI_WAIT_RX(SPIx);
 8006f20:	bf00      	nop
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0f9      	beq.n	8006f22 <TM_SPI_Send+0x3e>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f3      	bne.n	8006f22 <TM_SPI_Send+0x3e>
	
	/* Return data from buffer */
	return SPIx->DR;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	b2db      	uxtb	r3, r3
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <TM_LIS302DL_LIS3DSH_Detect>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
float TM_LIS3DSH_INT_Sensitivity;

/* Public */
TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Detect(void) {
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
	uint8_t id;
	/* Delay on power up */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 8006f52:	f000 fae3 	bl	800751c <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Init SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 8006f56:	f000 f86b 	bl	8007030 <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Get ID */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI(&id, LIS302DL_LIS3DSH_REG_WHO_I_AM, 1);
 8006f5a:	1dfb      	adds	r3, r7, #7
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	210f      	movs	r1, #15
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 f8bb 	bl	80070dc <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	/* Check device */
	if (id == LIS302DL_ID) {
 8006f66:	79fb      	ldrb	r3, [r7, #7]
 8006f68:	2b3b      	cmp	r3, #59	@ 0x3b
 8006f6a:	d104      	bne.n	8006f76 <TM_LIS302DL_LIS3DSH_Detect+0x2a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8006f6c:	4b08      	ldr	r3, [pc, #32]	@ (8006f90 <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 8006f6e:	2201      	movs	r2, #1
 8006f70:	701a      	strb	r2, [r3, #0]
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e008      	b.n	8006f88 <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	} else if (id == LIS3DSH_ID) {
 8006f76:	79fb      	ldrb	r3, [r7, #7]
 8006f78:	2b3f      	cmp	r3, #63	@ 0x3f
 8006f7a:	d104      	bne.n	8006f86 <TM_LIS302DL_LIS3DSH_Detect+0x3a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8006f7c:	4b04      	ldr	r3, [pc, #16]	@ (8006f90 <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 8006f7e:	2202      	movs	r2, #2
 8006f80:	701a      	strb	r2, [r3, #0]
		/* Return device */;
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8006f82:	2302      	movs	r3, #2
 8006f84:	e000      	b.n	8006f88 <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	}
	
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	20000212 	.word	0x20000212

08006f94 <TM_LIS302DL_LIS3DSH_Init>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Init(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	460a      	mov	r2, r1
 8006f9e:	71fb      	strb	r3, [r7, #7]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	71bb      	strb	r3, [r7, #6]
	/* Init pinout and SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 8006fa4:	f000 f844 	bl	8007030 <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Some delay */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 8006fa8:	f000 fab8 	bl	800751c <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Detect proper device and init it */
	if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8006fac:	f7ff ffce 	bl	8006f4c <TM_LIS302DL_LIS3DSH_Detect>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d107      	bne.n	8006fc6 <TM_LIS302DL_LIS3DSH_Init+0x32>
		/* Init sequence for LIS302DL */
		TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(Sensitivity, Filter);
 8006fb6:	79ba      	ldrb	r2, [r7, #6]
 8006fb8:	79fb      	ldrb	r3, [r7, #7]
 8006fba:	4611      	mov	r1, r2
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 f93f 	bl	8007240 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e010      	b.n	8006fe8 <TM_LIS302DL_LIS3DSH_Init+0x54>
	} else if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 8006fc6:	f7ff ffc1 	bl	8006f4c <TM_LIS302DL_LIS3DSH_Detect>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d107      	bne.n	8006fe0 <TM_LIS302DL_LIS3DSH_Init+0x4c>
		/* Init sequence for LIS3DSH */
		TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(Sensitivity, Filter);
 8006fd0:	79ba      	ldrb	r2, [r7, #6]
 8006fd2:	79fb      	ldrb	r3, [r7, #7]
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 f8ae 	bl	8007138 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8006fdc:	2302      	movs	r3, #2
 8006fde:	e003      	b.n	8006fe8 <TM_LIS302DL_LIS3DSH_Init+0x54>
	}
	
	/* Error detection */
	TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
 8006fe0:	4b03      	ldr	r3, [pc, #12]	@ (8006ff0 <TM_LIS302DL_LIS3DSH_Init+0x5c>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	701a      	strb	r2, [r3, #0]
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20000212 	.word	0x20000212

08006ff4 <TM_LIS302DL_LIS3DSH_ReadAxes>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_ReadAxes(TM_LIS302DL_LIS3DSH_t* Axes_Data) {
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
	if (TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8006ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800702c <TM_LIS302DL_LIS3DSH_ReadAxes+0x38>)
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d104      	bne.n	800700e <TM_LIS302DL_LIS3DSH_ReadAxes+0x1a>
		/* Init sequence for LIS302DL */
		TM_LIS302DL_INT_ReadAxes(Axes_Data);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fa23 	bl	8007450 <TM_LIS302DL_INT_ReadAxes>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 800700a:	2301      	movs	r3, #1
 800700c:	e009      	b.n	8007022 <TM_LIS302DL_LIS3DSH_ReadAxes+0x2e>
	} else if (TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 800700e:	4b07      	ldr	r3, [pc, #28]	@ (800702c <TM_LIS302DL_LIS3DSH_ReadAxes+0x38>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	2b02      	cmp	r3, #2
 8007014:	d104      	bne.n	8007020 <TM_LIS302DL_LIS3DSH_ReadAxes+0x2c>
		/* Init sequence for LIS3DSH */
		TM_LIS3DSH_INT_ReadAxes(Axes_Data);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f990 	bl	800733c <TM_LIS3DSH_INT_ReadAxes>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 800701c:	2302      	movs	r3, #2
 800701e:	e000      	b.n	8007022 <TM_LIS302DL_LIS3DSH_ReadAxes+0x2e>
	}
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	20000212 	.word	0x20000212

08007030 <TM_LIS302DL_LIS3DSH_INT_InitPins>:

/* Private */
void TM_LIS302DL_LIS3DSH_INT_InitPins(void) {
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af02      	add	r7, sp, #8
	static uint8_t initialized = 0;
	if (initialized) {
 8007036:	4b0e      	ldr	r3, [pc, #56]	@ (8007070 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x40>)
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d114      	bne.n	8007068 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x38>
		return;
	}
	
	/* Initialize SPI */
	TM_SPI_Init(LIS302DL_LIS3DSH_SPI, LIS302DL_LIS3DSH_SPI_PINSPACK);
 800703e:	2100      	movs	r1, #0
 8007040:	480c      	ldr	r0, [pc, #48]	@ (8007074 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x44>)
 8007042:	f000 fa7f 	bl	8007544 <TM_SPI_Init>
	
	/* Enable clock for CS port */
	/* Configure CS pin */
	/* GPIO Init */
	TM_GPIO_Init(LIS302DL_LIS3DSH_CS_PORT, LIS302DL_LIS3DSH_CS_PIN
 8007046:	2301      	movs	r3, #1
 8007048:	9301      	str	r3, [sp, #4]
 800704a:	2301      	movs	r3, #1
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	2300      	movs	r3, #0
 8007050:	2201      	movs	r2, #1
 8007052:	2108      	movs	r1, #8
 8007054:	4808      	ldr	r0, [pc, #32]	@ (8007078 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x48>)
 8007056:	f7ff fe1d 	bl	8006c94 <TM_GPIO_Init>
							, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium
							);
	
	/* CS HIGH */
	LIS302DL_LIS3DSH_CS_HIGH;
 800705a:	4b07      	ldr	r3, [pc, #28]	@ (8007078 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x48>)
 800705c:	2208      	movs	r2, #8
 800705e:	619a      	str	r2, [r3, #24]
	
	initialized = 1;
 8007060:	4b03      	ldr	r3, [pc, #12]	@ (8007070 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x40>)
 8007062:	2201      	movs	r2, #1
 8007064:	701a      	strb	r2, [r3, #0]
 8007066:	e000      	b.n	800706a <TM_LIS302DL_LIS3DSH_INT_InitPins+0x3a>
		return;
 8007068:	bf00      	nop
}
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20000218 	.word	0x20000218
 8007074:	40013000 	.word	0x40013000
 8007078:	40021000 	.word	0x40021000

0800707c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>:

void TM_LIS302DL_LIS3DSH_INT_WriteSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	70fb      	strb	r3, [r7, #3]
 8007088:	4613      	mov	r3, r2
 800708a:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 800708c:	4b10      	ldr	r3, [pc, #64]	@ (80070d0 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x54>)
 800708e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007092:	619a      	str	r2, [r3, #24]
	
	if (count > 1 && TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8007094:	78bb      	ldrb	r3, [r7, #2]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d907      	bls.n	80070aa <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2e>
 800709a:	4b0e      	ldr	r3, [pc, #56]	@ (80070d4 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x58>)
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d103      	bne.n	80070aa <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2e>
		/* Add autoincrement bit */
		/* Only LIS302DL device */
		addr |= 0x40;
 80070a2:	78fb      	ldrb	r3, [r7, #3]
 80070a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070a8:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 80070aa:	78fb      	ldrb	r3, [r7, #3]
 80070ac:	4619      	mov	r1, r3
 80070ae:	480a      	ldr	r0, [pc, #40]	@ (80070d8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x5c>)
 80070b0:	f7ff ff18 	bl	8006ee4 <TM_SPI_Send>
	/* Send data */
	TM_SPI_WriteMulti(LIS302DL_LIS3DSH_SPI, data, count);
 80070b4:	78bb      	ldrb	r3, [r7, #2]
 80070b6:	461a      	mov	r2, r3
 80070b8:	6879      	ldr	r1, [r7, #4]
 80070ba:	4807      	ldr	r0, [pc, #28]	@ (80070d8 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x5c>)
 80070bc:	f000 fa80 	bl	80075c0 <TM_SPI_WriteMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 80070c0:	4b03      	ldr	r3, [pc, #12]	@ (80070d0 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x54>)
 80070c2:	2208      	movs	r2, #8
 80070c4:	619a      	str	r2, [r3, #24]
}
 80070c6:	bf00      	nop
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	40021000 	.word	0x40021000
 80070d4:	20000212 	.word	0x20000212
 80070d8:	40013000 	.word	0x40013000

080070dc <TM_LIS302DL_LIS3DSH_INT_ReadSPI>:

void TM_LIS302DL_LIS3DSH_INT_ReadSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	70fb      	strb	r3, [r7, #3]
 80070e8:	4613      	mov	r3, r2
 80070ea:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 80070ec:	4b10      	ldr	r3, [pc, #64]	@ (8007130 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 80070ee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80070f2:	619a      	str	r2, [r3, #24]
	
	/* Add read bit */
	addr |= 0x80;
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80070fa:	70fb      	strb	r3, [r7, #3]
	
	if (count > 1) {
 80070fc:	78bb      	ldrb	r3, [r7, #2]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d903      	bls.n	800710a <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x2e>
		/* Add autoincrement bit */
		addr |= 0x40;
 8007102:	78fb      	ldrb	r3, [r7, #3]
 8007104:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007108:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 800710a:	78fb      	ldrb	r3, [r7, #3]
 800710c:	4619      	mov	r1, r3
 800710e:	4809      	ldr	r0, [pc, #36]	@ (8007134 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x58>)
 8007110:	f7ff fee8 	bl	8006ee4 <TM_SPI_Send>
	/* Receive data */
	TM_SPI_ReadMulti(LIS302DL_LIS3DSH_SPI, data, 0x00, count);
 8007114:	78bb      	ldrb	r3, [r7, #2]
 8007116:	2200      	movs	r2, #0
 8007118:	6879      	ldr	r1, [r7, #4]
 800711a:	4806      	ldr	r0, [pc, #24]	@ (8007134 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x58>)
 800711c:	f000 fa8b 	bl	8007636 <TM_SPI_ReadMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 8007120:	4b03      	ldr	r3, [pc, #12]	@ (8007130 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 8007122:	2208      	movs	r2, #8
 8007124:	619a      	str	r2, [r3, #24]
}
 8007126:	bf00      	nop
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	40021000 	.word	0x40021000
 8007134:	40013000 	.word	0x40013000

08007138 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	4603      	mov	r3, r0
 8007140:	460a      	mov	r2, r1
 8007142:	71fb      	strb	r3, [r7, #7]
 8007144:	4613      	mov	r3, r2
 8007146:	71bb      	strb	r3, [r7, #6]
	uint8_t tmpreg;
	uint16_t temp;

	/* Set data */
	temp = (uint16_t) (LIS3DSH_DATARATE_100 | LIS3DSH_XYZ_ENABLE);
 8007148:	2367      	movs	r3, #103	@ 0x67
 800714a:	81fb      	strh	r3, [r7, #14]
	temp |= (uint16_t) (LIS3DSH_SERIALINTERFACE_4WIRE | LIS3DSH_SELFTEST_NORMAL);
	
	/* Set sensitivity */
	if (Sensitivity == TM_LIS3DSH_Sensitivity_2G) {
 800714c:	79fb      	ldrb	r3, [r7, #7]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d103      	bne.n	800715a <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x22>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_2);
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8007152:	4b35      	ldr	r3, [pc, #212]	@ (8007228 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8007154:	4a35      	ldr	r2, [pc, #212]	@ (800722c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf4>)
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	e02a      	b.n	80071b0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_4G) {
 800715a:	79fb      	ldrb	r3, [r7, #7]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d107      	bne.n	8007170 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x38>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_4);
 8007160:	89fb      	ldrh	r3, [r7, #14]
 8007162:	f043 0308 	orr.w	r3, r3, #8
 8007166:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8007168:	4b2f      	ldr	r3, [pc, #188]	@ (8007228 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 800716a:	4a31      	ldr	r2, [pc, #196]	@ (8007230 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf8>)
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	e01f      	b.n	80071b0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_6G) {
 8007170:	79fb      	ldrb	r3, [r7, #7]
 8007172:	2b02      	cmp	r3, #2
 8007174:	d107      	bne.n	8007186 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x4e>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_6);
 8007176:	89fb      	ldrh	r3, [r7, #14]
 8007178:	f043 0310 	orr.w	r3, r3, #16
 800717c:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 800717e:	4b2a      	ldr	r3, [pc, #168]	@ (8007228 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8007180:	4a2c      	ldr	r2, [pc, #176]	@ (8007234 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xfc>)
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	e014      	b.n	80071b0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_8G) {
 8007186:	79fb      	ldrb	r3, [r7, #7]
 8007188:	2b03      	cmp	r3, #3
 800718a:	d107      	bne.n	800719c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x64>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_8);
 800718c:	89fb      	ldrh	r3, [r7, #14]
 800718e:	f043 0318 	orr.w	r3, r3, #24
 8007192:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8007194:	4b24      	ldr	r3, [pc, #144]	@ (8007228 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8007196:	4a28      	ldr	r2, [pc, #160]	@ (8007238 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x100>)
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	e009      	b.n	80071b0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_16G) {
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	2b04      	cmp	r3, #4
 80071a0:	d13b      	bne.n	800721a <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe2>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_16);
 80071a2:	89fb      	ldrh	r3, [r7, #14]
 80071a4:	f043 0320 	orr.w	r3, r3, #32
 80071a8:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80071aa:	4b1f      	ldr	r3, [pc, #124]	@ (8007228 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 80071ac:	4a23      	ldr	r2, [pc, #140]	@ (800723c <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x104>)
 80071ae:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	
	/* Set filter */
	if (Filter == TM_LIS3DSH_Filter_800Hz) {
 80071b0:	79bb      	ldrb	r3, [r7, #6]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d01a      	beq.n	80071ec <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_800 << 8);
	} else if (Filter == TM_LIS3DSH_Filter_400Hz) {
 80071b6:	79bb      	ldrb	r3, [r7, #6]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d104      	bne.n	80071c6 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x8e>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_400 << 8);
 80071bc:	89fb      	ldrh	r3, [r7, #14]
 80071be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80071c2:	81fb      	strh	r3, [r7, #14]
 80071c4:	e012      	b.n	80071ec <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_200Hz) {
 80071c6:	79bb      	ldrb	r3, [r7, #6]
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d106      	bne.n	80071da <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xa2>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_200 << 8);
 80071cc:	89fb      	ldrh	r3, [r7, #14]
 80071ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d6:	81fb      	strh	r3, [r7, #14]
 80071d8:	e008      	b.n	80071ec <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_50Hz) {
 80071da:	79bb      	ldrb	r3, [r7, #6]
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d11e      	bne.n	800721e <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe6>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_50 << 8);
 80071e0:	89fb      	ldrh	r3, [r7, #14]
 80071e2:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80071e6:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80071ea:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	
	/* Configure MEMS: power mode(ODR) and axes enable */
	tmpreg = (uint8_t) (temp);
 80071ec:	89fb      	ldrh	r3, [r7, #14]
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG4 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG4_ADDR, 1);
 80071f2:	f107 030d 	add.w	r3, r7, #13
 80071f6:	2201      	movs	r2, #1
 80071f8:	2120      	movs	r1, #32
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7ff ff3e 	bl	800707c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>

	/* Configure MEMS: full scale and self test */
	tmpreg = (uint8_t) (temp >> 8);
 8007200:	89fb      	ldrh	r3, [r7, #14]
 8007202:	0a1b      	lsrs	r3, r3, #8
 8007204:	b29b      	uxth	r3, r3
 8007206:	b2db      	uxtb	r3, r3
 8007208:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG5 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG5_ADDR, 1);
 800720a:	f107 030d 	add.w	r3, r7, #13
 800720e:	2201      	movs	r2, #1
 8007210:	2124      	movs	r1, #36	@ 0x24
 8007212:	4618      	mov	r0, r3
 8007214:	f7ff ff32 	bl	800707c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 8007218:	e002      	b.n	8007220 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
		return;
 800721a:	bf00      	nop
 800721c:	e000      	b.n	8007220 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
		return;
 800721e:	bf00      	nop
}
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	20000214 	.word	0x20000214
 800722c:	3d75c28f 	.word	0x3d75c28f
 8007230:	3df5c28f 	.word	0x3df5c28f
 8007234:	3e3851ec 	.word	0x3e3851ec
 8007238:	3e75c28f 	.word	0x3e75c28f
 800723c:	3f3ae148 	.word	0x3f3ae148

08007240 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	4603      	mov	r3, r0
 8007248:	460a      	mov	r2, r1
 800724a:	71fb      	strb	r3, [r7, #7]
 800724c:	4613      	mov	r3, r2
 800724e:	71bb      	strb	r3, [r7, #6]
	uint16_t ctrl;
	
	/* Reboot */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8007250:	f107 030e 	add.w	r3, r7, #14
 8007254:	2201      	movs	r2, #1
 8007256:	2121      	movs	r1, #33	@ 0x21
 8007258:	4618      	mov	r0, r3
 800725a:	f7ff ff3f 	bl	80070dc <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	ctrl |= LIS302DL_BOOT_REBOOTMEMORY;
 800725e:	89fb      	ldrh	r3, [r7, #14]
 8007260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007264:	b29b      	uxth	r3, r3
 8007266:	81fb      	strh	r3, [r7, #14]
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8007268:	f107 030e 	add.w	r3, r7, #14
 800726c:	2201      	movs	r2, #1
 800726e:	2121      	movs	r1, #33	@ 0x21
 8007270:	4618      	mov	r0, r3
 8007272:	f7ff ff03 	bl	800707c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Init settings */
	ctrl = (uint16_t) (LIS302DL_DATARATE_100 | LIS302DL_LOWPOWERMODE_ACTIVE | LIS302DL_SELFTEST_NORMAL | LIS302DL_XYZ_ENABLE);
 8007276:	2347      	movs	r3, #71	@ 0x47
 8007278:	81fb      	strh	r3, [r7, #14]
	if (Sensitivity == TM_LIS302DL_Sensitivity_2_3G) {
 800727a:	79fb      	ldrb	r3, [r7, #7]
 800727c:	2b05      	cmp	r3, #5
 800727e:	d105      	bne.n	800728c <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x4c>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_2_3;
 8007280:	89fb      	ldrh	r3, [r7, #14]
 8007282:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_2_3G;
 8007284:	4b2a      	ldr	r3, [pc, #168]	@ (8007330 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 8007286:	4a2b      	ldr	r2, [pc, #172]	@ (8007334 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf4>)
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	e00a      	b.n	80072a2 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x62>
	} else if (Sensitivity == TM_LIS302DL_Sensitivity_9_2G) {
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	2b06      	cmp	r3, #6
 8007290:	d147      	bne.n	8007322 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe2>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_9_2;
 8007292:	89fb      	ldrh	r3, [r7, #14]
 8007294:	f043 0320 	orr.w	r3, r3, #32
 8007298:	b29b      	uxth	r3, r3
 800729a:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_9_2G;
 800729c:	4b24      	ldr	r3, [pc, #144]	@ (8007330 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 800729e:	4a26      	ldr	r2, [pc, #152]	@ (8007338 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf8>)
 80072a0:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 80072a2:	f107 030e 	add.w	r3, r7, #14
 80072a6:	2201      	movs	r2, #1
 80072a8:	2120      	movs	r1, #32
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff fee6 	bl	800707c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Read filter */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80072b0:	f107 030e 	add.w	r3, r7, #14
 80072b4:	2201      	movs	r2, #1
 80072b6:	2121      	movs	r1, #33	@ 0x21
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7ff fedf 	bl	800707c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	ctrl &= (uint8_t) ~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | LIS302DL_HIGHPASSFILTER_LEVEL_3 | LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);
 80072be:	89fb      	ldrh	r3, [r7, #14]
 80072c0:	f003 03d0 	and.w	r3, r3, #208	@ 0xd0
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	81fb      	strh	r3, [r7, #14]
	/* Set filter */
    ctrl |= (uint8_t) (LIS302DL_HIGHPASSFILTERINTERRUPT_1_2 | LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER);
 80072c8:	89fb      	ldrh	r3, [r7, #14]
 80072ca:	f043 032c 	orr.w	r3, r3, #44	@ 0x2c
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	81fb      	strh	r3, [r7, #14]
	/* Set filter value */
	if (Filter == TM_LIS302DL_Filter_2Hz) {
 80072d2:	79bb      	ldrb	r3, [r7, #6]
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	d102      	bne.n	80072de <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x9e>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_0;
 80072d8:	89fb      	ldrh	r3, [r7, #14]
 80072da:	81fb      	strh	r3, [r7, #14]
 80072dc:	e019      	b.n	8007312 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_1Hz) {
 80072de:	79bb      	ldrb	r3, [r7, #6]
 80072e0:	2b05      	cmp	r3, #5
 80072e2:	d105      	bne.n	80072f0 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xb0>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_1;
 80072e4:	89fb      	ldrh	r3, [r7, #14]
 80072e6:	f043 0301 	orr.w	r3, r3, #1
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	81fb      	strh	r3, [r7, #14]
 80072ee:	e010      	b.n	8007312 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_500mHz) {
 80072f0:	79bb      	ldrb	r3, [r7, #6]
 80072f2:	2b06      	cmp	r3, #6
 80072f4:	d105      	bne.n	8007302 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xc2>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_2;
 80072f6:	89fb      	ldrh	r3, [r7, #14]
 80072f8:	f043 0302 	orr.w	r3, r3, #2
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	81fb      	strh	r3, [r7, #14]
 8007300:	e007      	b.n	8007312 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_250mHz) {
 8007302:	79bb      	ldrb	r3, [r7, #6]
 8007304:	2b07      	cmp	r3, #7
 8007306:	d10e      	bne.n	8007326 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe6>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_3;
 8007308:	89fb      	ldrh	r3, [r7, #14]
 800730a:	f043 0303 	orr.w	r3, r3, #3
 800730e:	b29b      	uxth	r3, r3
 8007310:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8007312:	f107 030e 	add.w	r3, r7, #14
 8007316:	2201      	movs	r2, #1
 8007318:	2121      	movs	r1, #33	@ 0x21
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff feae 	bl	800707c <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 8007320:	e002      	b.n	8007328 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
		return;
 8007322:	bf00      	nop
 8007324:	e000      	b.n	8007328 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
		return;
 8007326:	bf00      	nop
}
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	20000214 	.word	0x20000214
 8007334:	41900000 	.word	0x41900000
 8007338:	42900000 	.word	0x42900000

0800733c <TM_LIS3DSH_INT_ReadAxes>:

void TM_LIS3DSH_INT_ReadAxes(TM_LIS302DL_LIS3DSH_t *Axes_Data) {
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
	int8_t buffer[6];

	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8007344:	f107 0308 	add.w	r3, r7, #8
 8007348:	2201      	movs	r2, #1
 800734a:	2128      	movs	r1, #40	@ 0x28
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff fec5 	bl	80070dc <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8007352:	f107 0308 	add.w	r3, r7, #8
 8007356:	3301      	adds	r3, #1
 8007358:	2201      	movs	r2, #1
 800735a:	2129      	movs	r1, #41	@ 0x29
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff febd 	bl	80070dc <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 8007362:	f107 0308 	add.w	r3, r7, #8
 8007366:	3302      	adds	r3, #2
 8007368:	2201      	movs	r2, #1
 800736a:	212a      	movs	r1, #42	@ 0x2a
 800736c:	4618      	mov	r0, r3
 800736e:	f7ff feb5 	bl	80070dc <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 8007372:	f107 0308 	add.w	r3, r7, #8
 8007376:	3303      	adds	r3, #3
 8007378:	2201      	movs	r2, #1
 800737a:	212b      	movs	r1, #43	@ 0x2b
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff fead 	bl	80070dc <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 8007382:	f107 0308 	add.w	r3, r7, #8
 8007386:	3304      	adds	r3, #4
 8007388:	2201      	movs	r2, #1
 800738a:	212c      	movs	r1, #44	@ 0x2c
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff fea5 	bl	80070dc <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 8007392:	f107 0308 	add.w	r3, r7, #8
 8007396:	3305      	adds	r3, #5
 8007398:	2201      	movs	r2, #1
 800739a:	212d      	movs	r1, #45	@ 0x2d
 800739c:	4618      	mov	r0, r3
 800739e:	f7ff fe9d 	bl	80070dc <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	
	/* Set axes */
	Axes_Data->X = (int16_t)((buffer[1] << 8) + buffer[0]) * TM_LIS3DSH_INT_Sensitivity;
 80073a2:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	021b      	lsls	r3, r3, #8
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	4413      	add	r3, r2
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	b21b      	sxth	r3, r3
 80073b8:	ee07 3a90 	vmov	s15, r3
 80073bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073c0:	4b22      	ldr	r3, [pc, #136]	@ (800744c <TM_LIS3DSH_INT_ReadAxes+0x110>)
 80073c2:	edd3 7a00 	vldr	s15, [r3]
 80073c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073ce:	ee17 3a90 	vmov	r3, s15
 80073d2:	b21a      	sxth	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	801a      	strh	r2, [r3, #0]
	Axes_Data->Y = (int16_t)((buffer[3] << 8) + buffer[2]) * TM_LIS3DSH_INT_Sensitivity;
 80073d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80073dc:	b29b      	uxth	r3, r3
 80073de:	021b      	lsls	r3, r3, #8
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	4413      	add	r3, r2
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	b21b      	sxth	r3, r3
 80073ee:	ee07 3a90 	vmov	s15, r3
 80073f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073f6:	4b15      	ldr	r3, [pc, #84]	@ (800744c <TM_LIS3DSH_INT_ReadAxes+0x110>)
 80073f8:	edd3 7a00 	vldr	s15, [r3]
 80073fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007404:	ee17 3a90 	vmov	r3, s15
 8007408:	b21a      	sxth	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	805a      	strh	r2, [r3, #2]
	Axes_Data->Z = (int16_t)((buffer[5] << 8) + buffer[4]) * TM_LIS3DSH_INT_Sensitivity;
 800740e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007412:	b29b      	uxth	r3, r3
 8007414:	021b      	lsls	r3, r3, #8
 8007416:	b29a      	uxth	r2, r3
 8007418:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800741c:	b29b      	uxth	r3, r3
 800741e:	4413      	add	r3, r2
 8007420:	b29b      	uxth	r3, r3
 8007422:	b21b      	sxth	r3, r3
 8007424:	ee07 3a90 	vmov	s15, r3
 8007428:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800742c:	4b07      	ldr	r3, [pc, #28]	@ (800744c <TM_LIS3DSH_INT_ReadAxes+0x110>)
 800742e:	edd3 7a00 	vldr	s15, [r3]
 8007432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800743a:	ee17 3a90 	vmov	r3, s15
 800743e:	b21a      	sxth	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	809a      	strh	r2, [r3, #4]
}
 8007444:	bf00      	nop
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	20000214 	.word	0x20000214

08007450 <TM_LIS302DL_INT_ReadAxes>:

void TM_LIS302DL_INT_ReadAxes(TM_LIS302DL_LIS3DSH_t* Axes_Data) {
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
	int8_t buffer[3];
	int16_t SwitchXY;

	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[0], LIS302DL_OUT_X_ADDR, 1);
 8007458:	f107 0308 	add.w	r3, r7, #8
 800745c:	2201      	movs	r2, #1
 800745e:	2129      	movs	r1, #41	@ 0x29
 8007460:	4618      	mov	r0, r3
 8007462:	f7ff fe3b 	bl	80070dc <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[1], LIS302DL_OUT_Y_ADDR, 1);
 8007466:	f107 0308 	add.w	r3, r7, #8
 800746a:	3301      	adds	r3, #1
 800746c:	2201      	movs	r2, #1
 800746e:	212b      	movs	r1, #43	@ 0x2b
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff fe33 	bl	80070dc <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[2], LIS302DL_OUT_Z_ADDR, 1);
 8007476:	f107 0308 	add.w	r3, r7, #8
 800747a:	3302      	adds	r3, #2
 800747c:	2201      	movs	r2, #1
 800747e:	212d      	movs	r1, #45	@ 0x2d
 8007480:	4618      	mov	r0, r3
 8007482:	f7ff fe2b 	bl	80070dc <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	
	/* Set axes */
	Axes_Data->X = (int16_t) (buffer[0]) * TM_LIS3DSH_INT_Sensitivity;
 8007486:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007492:	4b21      	ldr	r3, [pc, #132]	@ (8007518 <TM_LIS302DL_INT_ReadAxes+0xc8>)
 8007494:	edd3 7a00 	vldr	s15, [r3]
 8007498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800749c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074a0:	ee17 3a90 	vmov	r3, s15
 80074a4:	b21a      	sxth	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	801a      	strh	r2, [r3, #0]
	Axes_Data->Y = (int16_t) (buffer[1]) * TM_LIS3DSH_INT_Sensitivity;
 80074aa:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80074ae:	ee07 3a90 	vmov	s15, r3
 80074b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074b6:	4b18      	ldr	r3, [pc, #96]	@ (8007518 <TM_LIS302DL_INT_ReadAxes+0xc8>)
 80074b8:	edd3 7a00 	vldr	s15, [r3]
 80074bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074c4:	ee17 3a90 	vmov	r3, s15
 80074c8:	b21a      	sxth	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	805a      	strh	r2, [r3, #2]
	Axes_Data->Z = (int16_t) (buffer[2]) * TM_LIS3DSH_INT_Sensitivity;	
 80074ce:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074da:	4b0f      	ldr	r3, [pc, #60]	@ (8007518 <TM_LIS302DL_INT_ReadAxes+0xc8>)
 80074dc:	edd3 7a00 	vldr	s15, [r3]
 80074e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074e8:	ee17 3a90 	vmov	r3, s15
 80074ec:	b21a      	sxth	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	809a      	strh	r2, [r3, #4]
	/* Switch axes */
	SwitchXY  = Axes_Data->X;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	81fb      	strh	r3, [r7, #14]
	Axes_Data->X = Axes_Data->Y;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	801a      	strh	r2, [r3, #0]
	Axes_Data->X = -SwitchXY;
 8007502:	89fb      	ldrh	r3, [r7, #14]
 8007504:	425b      	negs	r3, r3
 8007506:	b29b      	uxth	r3, r3
 8007508:	b21a      	sxth	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	801a      	strh	r2, [r3, #0]
}
 800750e:	bf00      	nop
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	20000214 	.word	0x20000214

0800751c <TM_LIS302DL_LIS3DSH_INT_Delay>:

void TM_LIS302DL_LIS3DSH_INT_Delay(void) {
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
	uint32_t delay = 1000000;
 8007522:	4b07      	ldr	r3, [pc, #28]	@ (8007540 <TM_LIS302DL_LIS3DSH_INT_Delay+0x24>)
 8007524:	607b      	str	r3, [r7, #4]
	while (delay--);
 8007526:	bf00      	nop
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	1e5a      	subs	r2, r3, #1
 800752c:	607a      	str	r2, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1fa      	bne.n	8007528 <TM_LIS302DL_LIS3DSH_INT_Delay+0xc>
}
 8007532:	bf00      	nop
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	000f4240 	.word	0x000f4240

08007544 <TM_SPI_Init>:
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack);

void TM_SPI_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack) {
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af02      	add	r7, sp, #8
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	460b      	mov	r3, r1
 800754e:	70fb      	strb	r3, [r7, #3]
	/* Init with default settings */
#ifdef SPI1
	if (SPIx == SPI1) {
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a18      	ldr	r2, [pc, #96]	@ (80075b4 <TM_SPI_Init+0x70>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d10a      	bne.n	800756e <TM_SPI_Init+0x2a>
		TM_SPIx_Init(SPI1, pinspack, TM_SPI1_MODE, TM_SPI1_PRESCALER, TM_SPI1_MASTERSLAVE, TM_SPI1_FIRSTBIT);
 8007558:	78f9      	ldrb	r1, [r7, #3]
 800755a:	2300      	movs	r3, #0
 800755c:	9301      	str	r3, [sp, #4]
 800755e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	2320      	movs	r3, #32
 8007566:	2200      	movs	r2, #0
 8007568:	4812      	ldr	r0, [pc, #72]	@ (80075b4 <TM_SPI_Init+0x70>)
 800756a:	f000 f8b1 	bl	80076d0 <TM_SPIx_Init>
	}
#endif
#ifdef SPI2
	if (SPIx == SPI2) {
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a11      	ldr	r2, [pc, #68]	@ (80075b8 <TM_SPI_Init+0x74>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d10a      	bne.n	800758c <TM_SPI_Init+0x48>
		TM_SPIx_Init(SPI2, pinspack, TM_SPI2_MODE, TM_SPI2_PRESCALER, TM_SPI2_MASTERSLAVE, TM_SPI2_FIRSTBIT);
 8007576:	78f9      	ldrb	r1, [r7, #3]
 8007578:	2300      	movs	r3, #0
 800757a:	9301      	str	r3, [sp, #4]
 800757c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	2320      	movs	r3, #32
 8007584:	2200      	movs	r2, #0
 8007586:	480c      	ldr	r0, [pc, #48]	@ (80075b8 <TM_SPI_Init+0x74>)
 8007588:	f000 f8a2 	bl	80076d0 <TM_SPIx_Init>
	}
#endif
#ifdef SPI3
	if (SPIx == SPI3) {
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a0b      	ldr	r2, [pc, #44]	@ (80075bc <TM_SPI_Init+0x78>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d10a      	bne.n	80075aa <TM_SPI_Init+0x66>
		TM_SPIx_Init(SPI3, pinspack, TM_SPI3_MODE, TM_SPI3_PRESCALER, TM_SPI3_MASTERSLAVE, TM_SPI3_FIRSTBIT);
 8007594:	78f9      	ldrb	r1, [r7, #3]
 8007596:	2300      	movs	r3, #0
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	2320      	movs	r3, #32
 80075a2:	2200      	movs	r2, #0
 80075a4:	4805      	ldr	r0, [pc, #20]	@ (80075bc <TM_SPI_Init+0x78>)
 80075a6:	f000 f893 	bl	80076d0 <TM_SPIx_Init>
#ifdef SPI6
	if (SPIx == SPI6) {
		TM_SPIx_Init(SPI6, pinspack, TM_SPI6_MODE, TM_SPI6_PRESCALER, TM_SPI6_MASTERSLAVE, TM_SPI6_FIRSTBIT);
	}
#endif
}
 80075aa:	bf00      	nop
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	40013000 	.word	0x40013000
 80075b8:	40003800 	.word	0x40003800
 80075bc:	40003c00 	.word	0x40003c00

080075c0 <TM_SPI_WriteMulti>:
		/* Read data register */
		*dataIn++ = *(__IO uint8_t *)&SPIx->DR;
	}
}

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d029      	beq.n	800762c <TM_SPI_WriteMulti+0x6c>
	
	while (count--) {
 80075d8:	e023      	b.n	8007622 <TM_SPI_WriteMulti+0x62>
		/* Wait busy */
		SPI_WAIT_TX(SPIx);
 80075da:	bf00      	nop
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d0f9      	beq.n	80075dc <TM_SPI_WriteMulti+0x1c>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1f3      	bne.n	80075dc <TM_SPI_WriteMulti+0x1c>
		
		/* Fill output buffer with data */
		*(__IO uint8_t *)&SPIx->DR = *dataOut++;
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	60ba      	str	r2, [r7, #8]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	320c      	adds	r2, #12
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	7013      	strb	r3, [r2, #0]
		
		/* Wait for SPI to end everything */
		SPI_WAIT_RX(SPIx);
 8007602:	bf00      	nop
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	d0f9      	beq.n	8007604 <TM_SPI_WriteMulti+0x44>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1f3      	bne.n	8007604 <TM_SPI_WriteMulti+0x44>
		
		/* Read data register */
		(void)*(__IO uint16_t *)&SPIx->DR;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	330c      	adds	r3, #12
 8007620:	881b      	ldrh	r3, [r3, #0]
	while (count--) {
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	1e5a      	subs	r2, r3, #1
 8007626:	607a      	str	r2, [r7, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1d6      	bne.n	80075da <TM_SPI_WriteMulti+0x1a>
	}
}
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <TM_SPI_ReadMulti>:

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
 8007636:	b480      	push	{r7}
 8007638:	b085      	sub	sp, #20
 800763a:	af00      	add	r7, sp, #0
 800763c:	60f8      	str	r0, [r7, #12]
 800763e:	60b9      	str	r1, [r7, #8]
 8007640:	603b      	str	r3, [r7, #0]
 8007642:	4613      	mov	r3, r2
 8007644:	71fb      	strb	r3, [r7, #7]
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800764e:	2b00      	cmp	r3, #0
 8007650:	d02c      	beq.n	80076ac <TM_SPI_ReadMulti+0x76>
	
	while (count--) {
 8007652:	e026      	b.n	80076a2 <TM_SPI_ReadMulti+0x6c>
		/* Wait busy */
		SPI_WAIT_TX(SPIx);
 8007654:	bf00      	nop
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d0f9      	beq.n	8007656 <TM_SPI_ReadMulti+0x20>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1f3      	bne.n	8007656 <TM_SPI_ReadMulti+0x20>
		
		/* Fill output buffer with data */
		*(__IO uint8_t *)&SPIx->DR = dummy;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	330c      	adds	r3, #12
 8007672:	79fa      	ldrb	r2, [r7, #7]
 8007674:	701a      	strb	r2, [r3, #0]
		
		/* Wait for SPI to end everything */
		SPI_WAIT_RX(SPIx);
 8007676:	bf00      	nop
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	2b00      	cmp	r3, #0
 8007682:	d0f9      	beq.n	8007678 <TM_SPI_ReadMulti+0x42>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1f3      	bne.n	8007678 <TM_SPI_ReadMulti+0x42>
		
		/* Save data to buffer */
		*dataIn++ = *(__IO uint8_t *)&SPIx->DR;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f103 020c 	add.w	r2, r3, #12
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	1c59      	adds	r1, r3, #1
 800769a:	60b9      	str	r1, [r7, #8]
 800769c:	7812      	ldrb	r2, [r2, #0]
 800769e:	b2d2      	uxtb	r2, r2
 80076a0:	701a      	strb	r2, [r3, #0]
	while (count--) {
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	1e5a      	subs	r2, r3, #1
 80076a6:	603a      	str	r2, [r7, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1d3      	bne.n	8007654 <TM_SPI_ReadMulti+0x1e>
	}
}
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <TM_SPI_InitCustomPinsCallback>:
		/* Save data to buffer */
		*dataIn++ = SPIx->DR;
	}
}

__weak void TM_SPI_InitCustomPinsCallback(SPI_TypeDef* SPIx, uint16_t AlternateFunction) { 
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	460b      	mov	r3, r1
 80076c0:	807b      	strh	r3, [r7, #2]
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_SPI_InitCustomPinsCallback could be implemented in the user file
   */
}
 80076c2:	bf00      	nop
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
	...

080076d0 <TM_SPIx_Init>:

/* Private functions */
static void TM_SPIx_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack, TM_SPI_Mode_t SPI_Mode, uint16_t SPI_BaudRatePrescaler, uint16_t SPI_MasterSlave, uint16_t SPI_FirstBit) {
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b09c      	sub	sp, #112	@ 0x70
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	4608      	mov	r0, r1
 80076da:	4611      	mov	r1, r2
 80076dc:	461a      	mov	r2, r3
 80076de:	4603      	mov	r3, r0
 80076e0:	70fb      	strb	r3, [r7, #3]
 80076e2:	460b      	mov	r3, r1
 80076e4:	70bb      	strb	r3, [r7, #2]
 80076e6:	4613      	mov	r3, r2
 80076e8:	803b      	strh	r3, [r7, #0]
	SPI_HandleTypeDef SPIHandle;
	
	/* Save instance */
	SPIHandle.Instance = SPIx;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	61bb      	str	r3, [r7, #24]
	
#ifdef SPI1	
	if (SPIx == SPI1) {
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a46      	ldr	r2, [pc, #280]	@ (800780c <TM_SPIx_Init+0x13c>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d113      	bne.n	800771e <TM_SPIx_Init+0x4e>
		/* Enable SPI clock */
		__HAL_RCC_SPI1_CLK_ENABLE();
 80076f6:	2300      	movs	r3, #0
 80076f8:	617b      	str	r3, [r7, #20]
 80076fa:	4b45      	ldr	r3, [pc, #276]	@ (8007810 <TM_SPIx_Init+0x140>)
 80076fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076fe:	4a44      	ldr	r2, [pc, #272]	@ (8007810 <TM_SPIx_Init+0x140>)
 8007700:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007704:	6453      	str	r3, [r2, #68]	@ 0x44
 8007706:	4b42      	ldr	r3, [pc, #264]	@ (8007810 <TM_SPIx_Init+0x140>)
 8007708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800770a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800770e:	617b      	str	r3, [r7, #20]
 8007710:	697b      	ldr	r3, [r7, #20]
		
		/* Init pins */
		TM_SPI1_INT_InitPins(pinspack);
 8007712:	78fb      	ldrb	r3, [r7, #3]
 8007714:	4618      	mov	r0, r3
 8007716:	f000 f881 	bl	800781c <TM_SPI1_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI1_DATASIZE;
 800771a:	2300      	movs	r3, #0
 800771c:	627b      	str	r3, [r7, #36]	@ 0x24
	}
#endif
#ifdef SPI2
	if (SPIx == SPI2) {
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a3c      	ldr	r2, [pc, #240]	@ (8007814 <TM_SPIx_Init+0x144>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d113      	bne.n	800774e <TM_SPIx_Init+0x7e>
		/* Enable SPI clock */
		__HAL_RCC_SPI2_CLK_ENABLE();
 8007726:	2300      	movs	r3, #0
 8007728:	613b      	str	r3, [r7, #16]
 800772a:	4b39      	ldr	r3, [pc, #228]	@ (8007810 <TM_SPIx_Init+0x140>)
 800772c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800772e:	4a38      	ldr	r2, [pc, #224]	@ (8007810 <TM_SPIx_Init+0x140>)
 8007730:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007734:	6413      	str	r3, [r2, #64]	@ 0x40
 8007736:	4b36      	ldr	r3, [pc, #216]	@ (8007810 <TM_SPIx_Init+0x140>)
 8007738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800773a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800773e:	613b      	str	r3, [r7, #16]
 8007740:	693b      	ldr	r3, [r7, #16]
		
		/* Init pins */
		TM_SPI2_INT_InitPins(pinspack);
 8007742:	78fb      	ldrb	r3, [r7, #3]
 8007744:	4618      	mov	r0, r3
 8007746:	f000 f899 	bl	800787c <TM_SPI2_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI2_DATASIZE;
 800774a:	2300      	movs	r3, #0
 800774c:	627b      	str	r3, [r7, #36]	@ 0x24
	}
#endif
#ifdef SPI3
	if (SPIx == SPI3) {
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a31      	ldr	r2, [pc, #196]	@ (8007818 <TM_SPIx_Init+0x148>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d113      	bne.n	800777e <TM_SPIx_Init+0xae>
		/* Enable SPI clock */
		__HAL_RCC_SPI3_CLK_ENABLE();
 8007756:	2300      	movs	r3, #0
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	4b2d      	ldr	r3, [pc, #180]	@ (8007810 <TM_SPIx_Init+0x140>)
 800775c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775e:	4a2c      	ldr	r2, [pc, #176]	@ (8007810 <TM_SPIx_Init+0x140>)
 8007760:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007764:	6413      	str	r3, [r2, #64]	@ 0x40
 8007766:	4b2a      	ldr	r3, [pc, #168]	@ (8007810 <TM_SPIx_Init+0x140>)
 8007768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	68fb      	ldr	r3, [r7, #12]
		
		/* Init pins */
		TM_SPI3_INT_InitPins(pinspack);
 8007772:	78fb      	ldrb	r3, [r7, #3]
 8007774:	4618      	mov	r0, r3
 8007776:	f000 f8e5 	bl	8007944 <TM_SPI3_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI3_DATASIZE;
 800777a:	2300      	movs	r3, #0
 800777c:	627b      	str	r3, [r7, #36]	@ 0x24
		SPIHandle.Init.DataSize = TM_SPI6_DATASIZE;
	}
#endif

	/* Fill SPI settings */
	SPIHandle.Init.BaudRatePrescaler = SPI_BaudRatePrescaler;
 800777e:	883b      	ldrh	r3, [r7, #0]
 8007780:	637b      	str	r3, [r7, #52]	@ 0x34
	SPIHandle.Init.FirstBit = SPI_FirstBit;
 8007782:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8007786:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPIHandle.Init.Mode = SPI_MasterSlave;
 8007788:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800778c:	61fb      	str	r3, [r7, #28]
	
	SPIHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800778e:	2300      	movs	r3, #0
 8007790:	643b      	str	r3, [r7, #64]	@ 0x40
	SPIHandle.Init.CRCPolynomial = 7;
 8007792:	2307      	movs	r3, #7
 8007794:	647b      	str	r3, [r7, #68]	@ 0x44
	SPIHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8007796:	2300      	movs	r3, #0
 8007798:	63fb      	str	r3, [r7, #60]	@ 0x3c
	SPIHandle.Init.NSS = SPI_NSS_SOFT;
 800779a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800779e:	633b      	str	r3, [r7, #48]	@ 0x30
	SPIHandle.Init.Direction = SPI_DIRECTION_2LINES;
 80077a0:	2300      	movs	r3, #0
 80077a2:	623b      	str	r3, [r7, #32]
    SPIHandle.Init.DataSize = SPI_DATASIZE_8BIT;
    SPIHandle.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
#endif
	
	/* SPI mode */
	if (SPI_Mode == TM_SPI_Mode_0) {
 80077a4:	78bb      	ldrb	r3, [r7, #2]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d104      	bne.n	80077b4 <TM_SPIx_Init+0xe4>
		SPIHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80077aa:	2300      	movs	r3, #0
 80077ac:	62bb      	str	r3, [r7, #40]	@ 0x28
		SPIHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80077ae:	2300      	movs	r3, #0
 80077b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077b2:	e016      	b.n	80077e2 <TM_SPIx_Init+0x112>
	} else if (SPI_Mode == TM_SPI_Mode_1) {
 80077b4:	78bb      	ldrb	r3, [r7, #2]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d104      	bne.n	80077c4 <TM_SPIx_Init+0xf4>
		SPIHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80077ba:	2300      	movs	r3, #0
 80077bc:	62bb      	str	r3, [r7, #40]	@ 0x28
		SPIHandle.Init.CLKPhase = SPI_PHASE_2EDGE;
 80077be:	2301      	movs	r3, #1
 80077c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077c2:	e00e      	b.n	80077e2 <TM_SPIx_Init+0x112>
	} else if (SPI_Mode == TM_SPI_Mode_2) {
 80077c4:	78bb      	ldrb	r3, [r7, #2]
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d104      	bne.n	80077d4 <TM_SPIx_Init+0x104>
		SPIHandle.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80077ca:	2302      	movs	r3, #2
 80077cc:	62bb      	str	r3, [r7, #40]	@ 0x28
		SPIHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80077ce:	2300      	movs	r3, #0
 80077d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077d2:	e006      	b.n	80077e2 <TM_SPIx_Init+0x112>
	} else if (SPI_Mode == TM_SPI_Mode_3) {
 80077d4:	78bb      	ldrb	r3, [r7, #2]
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	d103      	bne.n	80077e2 <TM_SPIx_Init+0x112>
		SPIHandle.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80077da:	2302      	movs	r3, #2
 80077dc:	62bb      	str	r3, [r7, #40]	@ 0x28
		SPIHandle.Init.CLKPhase = SPI_PHASE_2EDGE;
 80077de:	2301      	movs	r3, #1
 80077e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}
	
	/* Disable first */
	__HAL_SPI_DISABLE(&SPIHandle);
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077ec:	601a      	str	r2, [r3, #0]
	
	/* Init SPI */
	HAL_SPI_Init(&SPIHandle);
 80077ee:	f107 0318 	add.w	r3, r7, #24
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fd fb3e 	bl	8004e74 <HAL_SPI_Init>
	
	/* Enable SPI */
	__HAL_SPI_ENABLE(&SPIHandle);
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007802:	601a      	str	r2, [r3, #0]
}
 8007804:	bf00      	nop
 8007806:	3770      	adds	r7, #112	@ 0x70
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	40013000 	.word	0x40013000
 8007810:	40023800 	.word	0x40023800
 8007814:	40003800 	.word	0x40003800
 8007818:	40003c00 	.word	0x40003c00

0800781c <TM_SPI1_INT_InitPins>:

/* Private functions */
#ifdef SPI1
void TM_SPI1_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af02      	add	r7, sp, #8
 8007822:	4603      	mov	r3, r0
 8007824:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOA)
	if (pinspack == TM_SPI_PinsPack_1) {
 8007826:	79fb      	ldrb	r3, [r7, #7]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d109      	bne.n	8007840 <TM_SPI1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI1);
 800782c:	2305      	movs	r3, #5
 800782e:	9301      	str	r3, [sp, #4]
 8007830:	2303      	movs	r3, #3
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	2300      	movs	r3, #0
 8007836:	2200      	movs	r2, #0
 8007838:	21e0      	movs	r1, #224	@ 0xe0
 800783a:	480d      	ldr	r0, [pc, #52]	@ (8007870 <TM_SPI1_INT_InitPins+0x54>)
 800783c:	f7ff fa4d 	bl	8006cda <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8007840:	79fb      	ldrb	r3, [r7, #7]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d109      	bne.n	800785a <TM_SPI1_INT_InitPins+0x3e>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI1);
 8007846:	2305      	movs	r3, #5
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	2303      	movs	r3, #3
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	2300      	movs	r3, #0
 8007850:	2200      	movs	r2, #0
 8007852:	2138      	movs	r1, #56	@ 0x38
 8007854:	4807      	ldr	r0, [pc, #28]	@ (8007874 <TM_SPI1_INT_InitPins+0x58>)
 8007856:	f7ff fa40 	bl	8006cda <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800785a:	79fb      	ldrb	r3, [r7, #7]
 800785c:	2b04      	cmp	r3, #4
 800785e:	d103      	bne.n	8007868 <TM_SPI1_INT_InitPins+0x4c>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI1, GPIO_AFx_SPI1);
 8007860:	2105      	movs	r1, #5
 8007862:	4805      	ldr	r0, [pc, #20]	@ (8007878 <TM_SPI1_INT_InitPins+0x5c>)
 8007864:	f7ff ff27 	bl	80076b6 <TM_SPI_InitCustomPinsCallback>
	}
}
 8007868:	bf00      	nop
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	40020000 	.word	0x40020000
 8007874:	40020400 	.word	0x40020400
 8007878:	40013000 	.word	0x40013000

0800787c <TM_SPI2_INT_InitPins>:
#endif

#ifdef SPI2
void TM_SPI2_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af02      	add	r7, sp, #8
 8007882:	4603      	mov	r3, r0
 8007884:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOB) && defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_1) {
 8007886:	79fb      	ldrb	r3, [r7, #7]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d114      	bne.n	80078b6 <TM_SPI2_INT_InitPins+0x3a>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 800788c:	2305      	movs	r3, #5
 800788e:	9301      	str	r3, [sp, #4]
 8007890:	2303      	movs	r3, #3
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	2300      	movs	r3, #0
 8007896:	2200      	movs	r2, #0
 8007898:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800789c:	4825      	ldr	r0, [pc, #148]	@ (8007934 <TM_SPI2_INT_InitPins+0xb8>)
 800789e:	f7ff fa1c 	bl	8006cda <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 80078a2:	2305      	movs	r3, #5
 80078a4:	9301      	str	r3, [sp, #4]
 80078a6:	2303      	movs	r3, #3
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	2300      	movs	r3, #0
 80078ac:	2200      	movs	r2, #0
 80078ae:	210c      	movs	r1, #12
 80078b0:	4821      	ldr	r0, [pc, #132]	@ (8007938 <TM_SPI2_INT_InitPins+0xbc>)
 80078b2:	f7ff fa12 	bl	8006cda <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 80078b6:	79fb      	ldrb	r3, [r7, #7]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d10a      	bne.n	80078d2 <TM_SPI2_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 80078bc:	2305      	movs	r3, #5
 80078be:	9301      	str	r3, [sp, #4]
 80078c0:	2303      	movs	r3, #3
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	2300      	movs	r3, #0
 80078c6:	2200      	movs	r2, #0
 80078c8:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80078cc:	4819      	ldr	r0, [pc, #100]	@ (8007934 <TM_SPI2_INT_InitPins+0xb8>)
 80078ce:	f7ff fa04 	bl	8006cda <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_3) {
 80078d2:	79fb      	ldrb	r3, [r7, #7]
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d109      	bne.n	80078ec <TM_SPI2_INT_InitPins+0x70>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 80078d8:	2305      	movs	r3, #5
 80078da:	9301      	str	r3, [sp, #4]
 80078dc:	2303      	movs	r3, #3
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	2300      	movs	r3, #0
 80078e2:	2200      	movs	r2, #0
 80078e4:	210d      	movs	r1, #13
 80078e6:	4815      	ldr	r0, [pc, #84]	@ (800793c <TM_SPI2_INT_InitPins+0xc0>)
 80078e8:	f7ff f9f7 	bl	8006cda <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB) && defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_4) {
 80078ec:	79fb      	ldrb	r3, [r7, #7]
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d114      	bne.n	800791c <TM_SPI2_INT_InitPins+0xa0>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 80078f2:	2305      	movs	r3, #5
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	2303      	movs	r3, #3
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	2300      	movs	r3, #0
 80078fc:	2200      	movs	r2, #0
 80078fe:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8007902:	480c      	ldr	r0, [pc, #48]	@ (8007934 <TM_SPI2_INT_InitPins+0xb8>)
 8007904:	f7ff f9e9 	bl	8006cda <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_1, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 8007908:	2305      	movs	r3, #5
 800790a:	9301      	str	r3, [sp, #4]
 800790c:	2303      	movs	r3, #3
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	2300      	movs	r3, #0
 8007912:	2200      	movs	r2, #0
 8007914:	2102      	movs	r1, #2
 8007916:	4809      	ldr	r0, [pc, #36]	@ (800793c <TM_SPI2_INT_InitPins+0xc0>)
 8007918:	f7ff f9df 	bl	8006cda <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800791c:	79fb      	ldrb	r3, [r7, #7]
 800791e:	2b04      	cmp	r3, #4
 8007920:	d103      	bne.n	800792a <TM_SPI2_INT_InitPins+0xae>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI2, GPIO_AFx_SPI2);
 8007922:	2105      	movs	r1, #5
 8007924:	4806      	ldr	r0, [pc, #24]	@ (8007940 <TM_SPI2_INT_InitPins+0xc4>)
 8007926:	f7ff fec6 	bl	80076b6 <TM_SPI_InitCustomPinsCallback>
	}
}
 800792a:	bf00      	nop
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	40020400 	.word	0x40020400
 8007938:	40020800 	.word	0x40020800
 800793c:	40022000 	.word	0x40022000
 8007940:	40003800 	.word	0x40003800

08007944 <TM_SPI3_INT_InitPins>:
#endif

#ifdef SPI3
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af02      	add	r7, sp, #8
 800794a:	4603      	mov	r3, r0
 800794c:	71fb      	strb	r3, [r7, #7]
	/* Enable SPI pins */
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_1) {
 800794e:	79fb      	ldrb	r3, [r7, #7]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d109      	bne.n	8007968 <TM_SPI3_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI3);
 8007954:	2306      	movs	r3, #6
 8007956:	9301      	str	r3, [sp, #4]
 8007958:	2303      	movs	r3, #3
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	2300      	movs	r3, #0
 800795e:	2200      	movs	r2, #0
 8007960:	2138      	movs	r1, #56	@ 0x38
 8007962:	480e      	ldr	r0, [pc, #56]	@ (800799c <TM_SPI3_INT_InitPins+0x58>)
 8007964:	f7ff f9b9 	bl	8006cda <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_2) {
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d10a      	bne.n	8007984 <TM_SPI3_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI3);
 800796e:	2306      	movs	r3, #6
 8007970:	9301      	str	r3, [sp, #4]
 8007972:	2303      	movs	r3, #3
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	2300      	movs	r3, #0
 8007978:	2200      	movs	r2, #0
 800797a:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800797e:	4808      	ldr	r0, [pc, #32]	@ (80079a0 <TM_SPI3_INT_InitPins+0x5c>)
 8007980:	f7ff f9ab 	bl	8006cda <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	2b04      	cmp	r3, #4
 8007988:	d103      	bne.n	8007992 <TM_SPI3_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI3, GPIO_AFx_SPI3);
 800798a:	2106      	movs	r1, #6
 800798c:	4805      	ldr	r0, [pc, #20]	@ (80079a4 <TM_SPI3_INT_InitPins+0x60>)
 800798e:	f7ff fe92 	bl	80076b6 <TM_SPI_InitCustomPinsCallback>
	}
}
 8007992:	bf00      	nop
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	40020400 	.word	0x40020400
 80079a0:	40020800 	.word	0x40020800
 80079a4:	40003c00 	.word	0x40003c00

080079a8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80079a8:	b590      	push	{r4, r7, lr}
 80079aa:	b089      	sub	sp, #36	@ 0x24
 80079ac:	af04      	add	r7, sp, #16
 80079ae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80079b0:	2301      	movs	r3, #1
 80079b2:	2202      	movs	r2, #2
 80079b4:	2102      	movs	r1, #2
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 fc85 	bl	80082c6 <USBH_FindInterface>
 80079bc:	4603      	mov	r3, r0
 80079be:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
 80079c2:	2bff      	cmp	r3, #255	@ 0xff
 80079c4:	d002      	beq.n	80079cc <USBH_CDC_InterfaceInit+0x24>
 80079c6:	7bfb      	ldrb	r3, [r7, #15]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d901      	bls.n	80079d0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80079cc:	2302      	movs	r3, #2
 80079ce:	e13d      	b.n	8007c4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fc5a 	bl	800828e <USBH_SelectInterface>
 80079da:	4603      	mov	r3, r0
 80079dc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d001      	beq.n	80079e8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80079e4:	2302      	movs	r3, #2
 80079e6:	e131      	b.n	8007c4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80079ee:	2050      	movs	r0, #80	@ 0x50
 80079f0:	f002 fb64 	bl	800a0bc <malloc>
 80079f4:	4603      	mov	r3, r0
 80079f6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079fe:	69db      	ldr	r3, [r3, #28]
 8007a00:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007a08:	2302      	movs	r3, #2
 8007a0a:	e11f      	b.n	8007c4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007a0c:	2250      	movs	r2, #80	@ 0x50
 8007a0e:	2100      	movs	r1, #0
 8007a10:	68b8      	ldr	r0, [r7, #8]
 8007a12:	f002 fc11 	bl	800a238 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	211a      	movs	r1, #26
 8007a1c:	fb01 f303 	mul.w	r3, r1, r3
 8007a20:	4413      	add	r3, r2
 8007a22:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	b25b      	sxtb	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	da15      	bge.n	8007a5a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	211a      	movs	r1, #26
 8007a34:	fb01 f303 	mul.w	r3, r1, r3
 8007a38:	4413      	add	r3, r2
 8007a3a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007a3e:	781a      	ldrb	r2, [r3, #0]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	211a      	movs	r1, #26
 8007a4a:	fb01 f303 	mul.w	r3, r1, r3
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007a54:	881a      	ldrh	r2, [r3, #0]
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	785b      	ldrb	r3, [r3, #1]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 ffbe 	bl	80099e2 <USBH_AllocPipe>
 8007a66:	4603      	mov	r3, r0
 8007a68:	461a      	mov	r2, r3
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	7819      	ldrb	r1, [r3, #0]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	7858      	ldrb	r0, [r3, #1]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	8952      	ldrh	r2, [r2, #10]
 8007a86:	9202      	str	r2, [sp, #8]
 8007a88:	2203      	movs	r2, #3
 8007a8a:	9201      	str	r2, [sp, #4]
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	4623      	mov	r3, r4
 8007a90:	4602      	mov	r2, r0
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f001 ff76 	bl	8009984 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f002 fa85 	bl	8009fb0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	210a      	movs	r1, #10
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fc0a 	bl	80082c6 <USBH_FindInterface>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	2bff      	cmp	r3, #255	@ 0xff
 8007aba:	d002      	beq.n	8007ac2 <USBH_CDC_InterfaceInit+0x11a>
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d901      	bls.n	8007ac6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007ac2:	2302      	movs	r3, #2
 8007ac4:	e0c2      	b.n	8007c4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	211a      	movs	r1, #26
 8007acc:	fb01 f303 	mul.w	r3, r1, r3
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	b25b      	sxtb	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	da16      	bge.n	8007b0c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	211a      	movs	r1, #26
 8007ae4:	fb01 f303 	mul.w	r3, r1, r3
 8007ae8:	4413      	add	r3, r2
 8007aea:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007aee:	781a      	ldrb	r2, [r3, #0]
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	211a      	movs	r1, #26
 8007afa:	fb01 f303 	mul.w	r3, r1, r3
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007b04:	881a      	ldrh	r2, [r3, #0]
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	835a      	strh	r2, [r3, #26]
 8007b0a:	e015      	b.n	8007b38 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	211a      	movs	r1, #26
 8007b12:	fb01 f303 	mul.w	r3, r1, r3
 8007b16:	4413      	add	r3, r2
 8007b18:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007b1c:	781a      	ldrb	r2, [r3, #0]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	211a      	movs	r1, #26
 8007b28:	fb01 f303 	mul.w	r3, r1, r3
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007b32:	881a      	ldrh	r2, [r3, #0]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	211a      	movs	r1, #26
 8007b3e:	fb01 f303 	mul.w	r3, r1, r3
 8007b42:	4413      	add	r3, r2
 8007b44:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	b25b      	sxtb	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	da16      	bge.n	8007b7e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	211a      	movs	r1, #26
 8007b56:	fb01 f303 	mul.w	r3, r1, r3
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007b60:	781a      	ldrb	r2, [r3, #0]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	211a      	movs	r1, #26
 8007b6c:	fb01 f303 	mul.w	r3, r1, r3
 8007b70:	4413      	add	r3, r2
 8007b72:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007b76:	881a      	ldrh	r2, [r3, #0]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	835a      	strh	r2, [r3, #26]
 8007b7c:	e015      	b.n	8007baa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	211a      	movs	r1, #26
 8007b84:	fb01 f303 	mul.w	r3, r1, r3
 8007b88:	4413      	add	r3, r2
 8007b8a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007b8e:	781a      	ldrb	r2, [r3, #0]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	211a      	movs	r1, #26
 8007b9a:	fb01 f303 	mul.w	r3, r1, r3
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007ba4:	881a      	ldrh	r2, [r3, #0]
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	7b9b      	ldrb	r3, [r3, #14]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 ff16 	bl	80099e2 <USBH_AllocPipe>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	461a      	mov	r2, r3
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	7bdb      	ldrb	r3, [r3, #15]
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 ff0c 	bl	80099e2 <USBH_AllocPipe>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	461a      	mov	r2, r3
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	7b59      	ldrb	r1, [r3, #13]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	7b98      	ldrb	r0, [r3, #14]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	8b12      	ldrh	r2, [r2, #24]
 8007bea:	9202      	str	r2, [sp, #8]
 8007bec:	2202      	movs	r2, #2
 8007bee:	9201      	str	r2, [sp, #4]
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	4623      	mov	r3, r4
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f001 fec4 	bl	8009984 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	7b19      	ldrb	r1, [r3, #12]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	7bd8      	ldrb	r0, [r3, #15]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	8b52      	ldrh	r2, [r2, #26]
 8007c14:	9202      	str	r2, [sp, #8]
 8007c16:	2202      	movs	r2, #2
 8007c18:	9201      	str	r2, [sp, #4]
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	4623      	mov	r3, r4
 8007c1e:	4602      	mov	r2, r0
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 feaf 	bl	8009984 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	7b5b      	ldrb	r3, [r3, #13]
 8007c32:	2200      	movs	r2, #0
 8007c34:	4619      	mov	r1, r3
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f002 f9ba 	bl	8009fb0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	7b1b      	ldrb	r3, [r3, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f002 f9b3 	bl	8009fb0 <USBH_LL_SetToggle>

  return USBH_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd90      	pop	{r4, r7, pc}

08007c54 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c62:	69db      	ldr	r3, [r3, #28]
 8007c64:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00e      	beq.n	8007c8c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f001 fea4 	bl	80099c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 fecf 	bl	8009a24 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	7b1b      	ldrb	r3, [r3, #12]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00e      	beq.n	8007cb2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	7b1b      	ldrb	r3, [r3, #12]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f001 fe91 	bl	80099c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	7b1b      	ldrb	r3, [r3, #12]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f001 febc 	bl	8009a24 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	7b5b      	ldrb	r3, [r3, #13]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00e      	beq.n	8007cd8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	7b5b      	ldrb	r3, [r3, #13]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f001 fe7e 	bl	80099c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	7b5b      	ldrb	r3, [r3, #13]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 fea9 	bl	8009a24 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00b      	beq.n	8007cfc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007cea:	69db      	ldr	r3, [r3, #28]
 8007cec:	4618      	mov	r0, r3
 8007cee:	f002 f9ed 	bl	800a0cc <free>
    phost->pActiveClass->pData = 0U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b084      	sub	sp, #16
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3340      	adds	r3, #64	@ 0x40
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f8b1 	bl	8007e86 <GetLineCoding>
 8007d24:	4603      	mov	r3, r0
 8007d26:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007d28:	7afb      	ldrb	r3, [r7, #11]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d105      	bne.n	8007d3a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d34:	2102      	movs	r1, #2
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007d3a:	7afb      	ldrb	r3, [r7, #11]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d5a:	69db      	ldr	r3, [r3, #28]
 8007d5c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007d64:	2b04      	cmp	r3, #4
 8007d66:	d877      	bhi.n	8007e58 <USBH_CDC_Process+0x114>
 8007d68:	a201      	add	r2, pc, #4	@ (adr r2, 8007d70 <USBH_CDC_Process+0x2c>)
 8007d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6e:	bf00      	nop
 8007d70:	08007d85 	.word	0x08007d85
 8007d74:	08007d8b 	.word	0x08007d8b
 8007d78:	08007dbb 	.word	0x08007dbb
 8007d7c:	08007e2f 	.word	0x08007e2f
 8007d80:	08007e3d 	.word	0x08007e3d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	73fb      	strb	r3, [r7, #15]
      break;
 8007d88:	e06d      	b.n	8007e66 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f897 	bl	8007ec4 <SetLineCoding>
 8007d96:	4603      	mov	r3, r0
 8007d98:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007d9a:	7bbb      	ldrb	r3, [r7, #14]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d104      	bne.n	8007daa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007da8:	e058      	b.n	8007e5c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007daa:	7bbb      	ldrb	r3, [r7, #14]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d055      	beq.n	8007e5c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2204      	movs	r2, #4
 8007db4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007db8:	e050      	b.n	8007e5c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	3340      	adds	r3, #64	@ 0x40
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f860 	bl	8007e86 <GetLineCoding>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007dca:	7bbb      	ldrb	r3, [r7, #14]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d126      	bne.n	8007e1e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007de2:	791b      	ldrb	r3, [r3, #4]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d13b      	bne.n	8007e60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007df2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d133      	bne.n	8007e60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e02:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d12b      	bne.n	8007e60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e10:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d124      	bne.n	8007e60 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f958 	bl	80080cc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007e1c:	e020      	b.n	8007e60 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d01d      	beq.n	8007e60 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2204      	movs	r2, #4
 8007e28:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007e2c:	e018      	b.n	8007e60 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f867 	bl	8007f02 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f8da 	bl	8007fee <CDC_ProcessReception>
      break;
 8007e3a:	e014      	b.n	8007e66 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f001 f81a 	bl	8008e78 <USBH_ClrFeature>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007e48:	7bbb      	ldrb	r3, [r7, #14]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10a      	bne.n	8007e64 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007e56:	e005      	b.n	8007e64 <USBH_CDC_Process+0x120>

    default:
      break;
 8007e58:	bf00      	nop
 8007e5a:	e004      	b.n	8007e66 <USBH_CDC_Process+0x122>
      break;
 8007e5c:	bf00      	nop
 8007e5e:	e002      	b.n	8007e66 <USBH_CDC_Process+0x122>
      break;
 8007e60:	bf00      	nop
 8007e62:	e000      	b.n	8007e66 <USBH_CDC_Process+0x122>
      break;
 8007e64:	bf00      	nop

  }

  return status;
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b082      	sub	sp, #8
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	22a1      	movs	r2, #161	@ 0xa1
 8007e94:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2221      	movs	r2, #33	@ 0x21
 8007e9a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2207      	movs	r2, #7
 8007eac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2207      	movs	r2, #7
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f001 fb14 	bl	80094e2 <USBH_CtlReq>
 8007eba:	4603      	mov	r3, r0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2221      	movs	r2, #33	@ 0x21
 8007ed2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2220      	movs	r2, #32
 8007ed8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2207      	movs	r2, #7
 8007eea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2207      	movs	r2, #7
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f001 faf5 	bl	80094e2 <USBH_CtlReq>
 8007ef8:	4603      	mov	r3, r0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b086      	sub	sp, #24
 8007f06:	af02      	add	r7, sp, #8
 8007f08:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f14:	2300      	movs	r3, #0
 8007f16:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d002      	beq.n	8007f28 <CDC_ProcessTransmission+0x26>
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d023      	beq.n	8007f6e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007f26:	e05e      	b.n	8007fe6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	8b12      	ldrh	r2, [r2, #24]
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d90b      	bls.n	8007f4c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	69d9      	ldr	r1, [r3, #28]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	8b1a      	ldrh	r2, [r3, #24]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	7b5b      	ldrb	r3, [r3, #13]
 8007f40:	2001      	movs	r0, #1
 8007f42:	9000      	str	r0, [sp, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f001 fcda 	bl	80098fe <USBH_BulkSendData>
 8007f4a:	e00b      	b.n	8007f64 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	7b5b      	ldrb	r3, [r3, #13]
 8007f5a:	2001      	movs	r0, #1
 8007f5c:	9000      	str	r0, [sp, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 fccd 	bl	80098fe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007f6c:	e03b      	b.n	8007fe6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	7b5b      	ldrb	r3, [r3, #13]
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f001 fff1 	bl	8009f5c <USBH_LL_GetURBState>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007f7e:	7afb      	ldrb	r3, [r7, #11]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d128      	bne.n	8007fd6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	8b12      	ldrh	r2, [r2, #24]
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d90e      	bls.n	8007fae <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	8b12      	ldrh	r2, [r2, #24]
 8007f98:	1a9a      	subs	r2, r3, r2
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	8b12      	ldrh	r2, [r2, #24]
 8007fa6:	441a      	add	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	61da      	str	r2, [r3, #28]
 8007fac:	e002      	b.n	8007fb4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d004      	beq.n	8007fc6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007fc4:	e00e      	b.n	8007fe4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f868 	bl	80080a4 <USBH_CDC_TransmitCallback>
      break;
 8007fd4:	e006      	b.n	8007fe4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007fd6:	7afb      	ldrb	r3, [r7, #11]
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d103      	bne.n	8007fe4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007fe4:	bf00      	nop
  }
}
 8007fe6:	bf00      	nop
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b086      	sub	sp, #24
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ffc:	69db      	ldr	r3, [r3, #28]
 8007ffe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008000:	2300      	movs	r3, #0
 8008002:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800800a:	2b03      	cmp	r3, #3
 800800c:	d002      	beq.n	8008014 <CDC_ProcessReception+0x26>
 800800e:	2b04      	cmp	r3, #4
 8008010:	d00e      	beq.n	8008030 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008012:	e043      	b.n	800809c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	6a19      	ldr	r1, [r3, #32]
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	8b5a      	ldrh	r2, [r3, #26]
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	7b1b      	ldrb	r3, [r3, #12]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f001 fc91 	bl	8009948 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	2204      	movs	r2, #4
 800802a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800802e:	e035      	b.n	800809c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	7b1b      	ldrb	r3, [r3, #12]
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 ff90 	bl	8009f5c <USBH_LL_GetURBState>
 800803c:	4603      	mov	r3, r0
 800803e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008040:	7cfb      	ldrb	r3, [r7, #19]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d129      	bne.n	800809a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	7b1b      	ldrb	r3, [r3, #12]
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f001 fef3 	bl	8009e38 <USBH_LL_GetLastXferSize>
 8008052:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	429a      	cmp	r2, r3
 800805c:	d016      	beq.n	800808c <CDC_ProcessReception+0x9e>
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	8b5b      	ldrh	r3, [r3, #26]
 8008062:	461a      	mov	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4293      	cmp	r3, r2
 8008068:	d910      	bls.n	800808c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	1ad2      	subs	r2, r2, r3
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	6a1a      	ldr	r2, [r3, #32]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	441a      	add	r2, r3
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	2203      	movs	r2, #3
 8008086:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800808a:	e006      	b.n	800809a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f80f 	bl	80080b8 <USBH_CDC_ReceiveCallback>
      break;
 800809a:	bf00      	nop
  }
}
 800809c:	bf00      	nop
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	4613      	mov	r3, r2
 80080ec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d101      	bne.n	80080f8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80080f4:	2302      	movs	r3, #2
 80080f6:	e029      	b.n	800814c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	79fa      	ldrb	r2, [r7, #7]
 80080fc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 f81f 	bl	8008154 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d003      	beq.n	8008144 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f001 fdc3 	bl	8009cd0 <USBH_LL_Init>

  return USBH_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008160:	2300      	movs	r3, #0
 8008162:	60fb      	str	r3, [r7, #12]
 8008164:	e009      	b.n	800817a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	33e0      	adds	r3, #224	@ 0xe0
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	2200      	movs	r2, #0
 8008172:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	3301      	adds	r3, #1
 8008178:	60fb      	str	r3, [r7, #12]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2b0f      	cmp	r3, #15
 800817e:	d9f2      	bls.n	8008166 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008180:	2300      	movs	r3, #0
 8008182:	60fb      	str	r3, [r7, #12]
 8008184:	e009      	b.n	800819a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	4413      	add	r3, r2
 800818c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008190:	2200      	movs	r2, #0
 8008192:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	3301      	adds	r3, #1
 8008198:	60fb      	str	r3, [r7, #12]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081a0:	d3f1      	bcc.n	8008186 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2201      	movs	r2, #1
 80081b2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2240      	movs	r2, #64	@ 0x40
 80081c6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	331c      	adds	r3, #28
 80081f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80081f6:	2100      	movs	r1, #0
 80081f8:	4618      	mov	r0, r3
 80081fa:	f002 f81d 	bl	800a238 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008204:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008208:	2100      	movs	r1, #0
 800820a:	4618      	mov	r0, r3
 800820c:	f002 f814 	bl	800a238 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008216:	2212      	movs	r2, #18
 8008218:	2100      	movs	r1, #0
 800821a:	4618      	mov	r0, r3
 800821c:	f002 f80c 	bl	800a238 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008226:	223e      	movs	r2, #62	@ 0x3e
 8008228:	2100      	movs	r1, #0
 800822a:	4618      	mov	r0, r3
 800822c:	f002 f804 	bl	800a238 <memset>

  return USBH_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800823a:	b480      	push	{r7}
 800823c:	b085      	sub	sp, #20
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d016      	beq.n	800827c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10e      	bne.n	8008276 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800825e:	1c59      	adds	r1, r3, #1
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	33de      	adds	r3, #222	@ 0xde
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	73fb      	strb	r3, [r7, #15]
 8008274:	e004      	b.n	8008280 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008276:	2302      	movs	r3, #2
 8008278:	73fb      	strb	r3, [r7, #15]
 800827a:	e001      	b.n	8008280 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800827c:	2302      	movs	r3, #2
 800827e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008280:	7bfb      	ldrb	r3, [r7, #15]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800828e:	b480      	push	{r7}
 8008290:	b085      	sub	sp, #20
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	460b      	mov	r3, r1
 8008298:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80082a4:	78fa      	ldrb	r2, [r7, #3]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d204      	bcs.n	80082b4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	78fa      	ldrb	r2, [r7, #3]
 80082ae:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80082b2:	e001      	b.n	80082b8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80082b4:	2302      	movs	r3, #2
 80082b6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80082b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80082c6:	b480      	push	{r7}
 80082c8:	b087      	sub	sp, #28
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	4608      	mov	r0, r1
 80082d0:	4611      	mov	r1, r2
 80082d2:	461a      	mov	r2, r3
 80082d4:	4603      	mov	r3, r0
 80082d6:	70fb      	strb	r3, [r7, #3]
 80082d8:	460b      	mov	r3, r1
 80082da:	70bb      	strb	r3, [r7, #2]
 80082dc:	4613      	mov	r3, r2
 80082de:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80082e0:	2300      	movs	r3, #0
 80082e2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80082e4:	2300      	movs	r3, #0
 80082e6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80082ee:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80082f0:	e025      	b.n	800833e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80082f2:	7dfb      	ldrb	r3, [r7, #23]
 80082f4:	221a      	movs	r2, #26
 80082f6:	fb02 f303 	mul.w	r3, r2, r3
 80082fa:	3308      	adds	r3, #8
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	4413      	add	r3, r2
 8008300:	3302      	adds	r3, #2
 8008302:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	795b      	ldrb	r3, [r3, #5]
 8008308:	78fa      	ldrb	r2, [r7, #3]
 800830a:	429a      	cmp	r2, r3
 800830c:	d002      	beq.n	8008314 <USBH_FindInterface+0x4e>
 800830e:	78fb      	ldrb	r3, [r7, #3]
 8008310:	2bff      	cmp	r3, #255	@ 0xff
 8008312:	d111      	bne.n	8008338 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008318:	78ba      	ldrb	r2, [r7, #2]
 800831a:	429a      	cmp	r2, r3
 800831c:	d002      	beq.n	8008324 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800831e:	78bb      	ldrb	r3, [r7, #2]
 8008320:	2bff      	cmp	r3, #255	@ 0xff
 8008322:	d109      	bne.n	8008338 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008328:	787a      	ldrb	r2, [r7, #1]
 800832a:	429a      	cmp	r2, r3
 800832c:	d002      	beq.n	8008334 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800832e:	787b      	ldrb	r3, [r7, #1]
 8008330:	2bff      	cmp	r3, #255	@ 0xff
 8008332:	d101      	bne.n	8008338 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008334:	7dfb      	ldrb	r3, [r7, #23]
 8008336:	e006      	b.n	8008346 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008338:	7dfb      	ldrb	r3, [r7, #23]
 800833a:	3301      	adds	r3, #1
 800833c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800833e:	7dfb      	ldrb	r3, [r7, #23]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d9d6      	bls.n	80082f2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008344:	23ff      	movs	r3, #255	@ 0xff
}
 8008346:	4618      	mov	r0, r3
 8008348:	371c      	adds	r7, #28
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b082      	sub	sp, #8
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f001 fcf4 	bl	8009d48 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008360:	2101      	movs	r1, #1
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f001 fe0d 	bl	8009f82 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b088      	sub	sp, #32
 8008378:	af04      	add	r7, sp, #16
 800837a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800837c:	2302      	movs	r3, #2
 800837e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008380:	2300      	movs	r3, #0
 8008382:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b01      	cmp	r3, #1
 800838e:	d102      	bne.n	8008396 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2203      	movs	r2, #3
 8008394:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b0b      	cmp	r3, #11
 800839e:	f200 81bb 	bhi.w	8008718 <USBH_Process+0x3a4>
 80083a2:	a201      	add	r2, pc, #4	@ (adr r2, 80083a8 <USBH_Process+0x34>)
 80083a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a8:	080083d9 	.word	0x080083d9
 80083ac:	0800840b 	.word	0x0800840b
 80083b0:	08008473 	.word	0x08008473
 80083b4:	080086b3 	.word	0x080086b3
 80083b8:	08008719 	.word	0x08008719
 80083bc:	08008513 	.word	0x08008513
 80083c0:	08008659 	.word	0x08008659
 80083c4:	08008549 	.word	0x08008549
 80083c8:	08008569 	.word	0x08008569
 80083cc:	08008587 	.word	0x08008587
 80083d0:	080085cb 	.word	0x080085cb
 80083d4:	0800869b 	.word	0x0800869b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 819b 	beq.w	800871c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80083ec:	20c8      	movs	r0, #200	@ 0xc8
 80083ee:	f001 fe12 	bl	800a016 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f001 fd05 	bl	8009e02 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008408:	e188      	b.n	800871c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008410:	2b01      	cmp	r3, #1
 8008412:	d107      	bne.n	8008424 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2202      	movs	r2, #2
 8008420:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008422:	e18a      	b.n	800873a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800842a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800842e:	d914      	bls.n	800845a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008436:	3301      	adds	r3, #1
 8008438:	b2da      	uxtb	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008446:	2b03      	cmp	r3, #3
 8008448:	d903      	bls.n	8008452 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	220d      	movs	r2, #13
 800844e:	701a      	strb	r2, [r3, #0]
      break;
 8008450:	e173      	b.n	800873a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	701a      	strb	r2, [r3, #0]
      break;
 8008458:	e16f      	b.n	800873a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008460:	f103 020a 	add.w	r2, r3, #10
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800846a:	200a      	movs	r0, #10
 800846c:	f001 fdd3 	bl	800a016 <USBH_Delay>
      break;
 8008470:	e163      	b.n	800873a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008478:	2b00      	cmp	r3, #0
 800847a:	d005      	beq.n	8008488 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008482:	2104      	movs	r1, #4
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008488:	2064      	movs	r0, #100	@ 0x64
 800848a:	f001 fdc4 	bl	800a016 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f001 fc90 	bl	8009db4 <USBH_LL_GetSpeed>
 8008494:	4603      	mov	r3, r0
 8008496:	461a      	mov	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2205      	movs	r2, #5
 80084a2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80084a4:	2100      	movs	r1, #0
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f001 fa9b 	bl	80099e2 <USBH_AllocPipe>
 80084ac:	4603      	mov	r3, r0
 80084ae:	461a      	mov	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80084b4:	2180      	movs	r1, #128	@ 0x80
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f001 fa93 	bl	80099e2 <USBH_AllocPipe>
 80084bc:	4603      	mov	r3, r0
 80084be:	461a      	mov	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	7919      	ldrb	r1, [r3, #4]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80084d8:	9202      	str	r2, [sp, #8]
 80084da:	2200      	movs	r2, #0
 80084dc:	9201      	str	r2, [sp, #4]
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	4603      	mov	r3, r0
 80084e2:	2280      	movs	r2, #128	@ 0x80
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f001 fa4d 	bl	8009984 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	7959      	ldrb	r1, [r3, #5]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80084fe:	9202      	str	r2, [sp, #8]
 8008500:	2200      	movs	r2, #0
 8008502:	9201      	str	r2, [sp, #4]
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	4603      	mov	r3, r0
 8008508:	2200      	movs	r2, #0
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f001 fa3a 	bl	8009984 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008510:	e113      	b.n	800873a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f916 	bl	8008744 <USBH_HandleEnum>
 8008518:	4603      	mov	r3, r0
 800851a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800851c:	7bbb      	ldrb	r3, [r7, #14]
 800851e:	b2db      	uxtb	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	f040 80fd 	bne.w	8008720 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008534:	2b01      	cmp	r3, #1
 8008536:	d103      	bne.n	8008540 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2208      	movs	r2, #8
 800853c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800853e:	e0ef      	b.n	8008720 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2207      	movs	r2, #7
 8008544:	701a      	strb	r2, [r3, #0]
      break;
 8008546:	e0eb      	b.n	8008720 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800854e:	2b00      	cmp	r3, #0
 8008550:	f000 80e8 	beq.w	8008724 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800855a:	2101      	movs	r1, #1
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2208      	movs	r2, #8
 8008564:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008566:	e0dd      	b.n	8008724 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fc3a 	bl	8008dea <USBH_SetCfg>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	f040 80d5 	bne.w	8008728 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2209      	movs	r2, #9
 8008582:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008584:	e0d0      	b.n	8008728 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800858c:	f003 0320 	and.w	r3, r3, #32
 8008590:	2b00      	cmp	r3, #0
 8008592:	d016      	beq.n	80085c2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008594:	2101      	movs	r1, #1
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fc4a 	bl	8008e30 <USBH_SetFeature>
 800859c:	4603      	mov	r3, r0
 800859e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d103      	bne.n	80085b0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	220a      	movs	r2, #10
 80085ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80085ae:	e0bd      	b.n	800872c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b03      	cmp	r3, #3
 80085b6:	f040 80b9 	bne.w	800872c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	220a      	movs	r2, #10
 80085be:	701a      	strb	r2, [r3, #0]
      break;
 80085c0:	e0b4      	b.n	800872c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	220a      	movs	r2, #10
 80085c6:	701a      	strb	r2, [r3, #0]
      break;
 80085c8:	e0b0      	b.n	800872c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f000 80ad 	beq.w	8008730 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80085de:	2300      	movs	r3, #0
 80085e0:	73fb      	strb	r3, [r7, #15]
 80085e2:	e016      	b.n	8008612 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80085e4:	7bfa      	ldrb	r2, [r7, #15]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	32de      	adds	r2, #222	@ 0xde
 80085ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ee:	791a      	ldrb	r2, [r3, #4]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d108      	bne.n	800860c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80085fa:	7bfa      	ldrb	r2, [r7, #15]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	32de      	adds	r2, #222	@ 0xde
 8008600:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800860a:	e005      	b.n	8008618 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	3301      	adds	r3, #1
 8008610:	73fb      	strb	r3, [r7, #15]
 8008612:	7bfb      	ldrb	r3, [r7, #15]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d0e5      	beq.n	80085e4 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800861e:	2b00      	cmp	r3, #0
 8008620:	d016      	beq.n	8008650 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	4798      	blx	r3
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d109      	bne.n	8008648 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2206      	movs	r2, #6
 8008638:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008640:	2103      	movs	r1, #3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008646:	e073      	b.n	8008730 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	220d      	movs	r2, #13
 800864c:	701a      	strb	r2, [r3, #0]
      break;
 800864e:	e06f      	b.n	8008730 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	220d      	movs	r2, #13
 8008654:	701a      	strb	r2, [r3, #0]
      break;
 8008656:	e06b      	b.n	8008730 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800865e:	2b00      	cmp	r3, #0
 8008660:	d017      	beq.n	8008692 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	4798      	blx	r3
 800866e:	4603      	mov	r3, r0
 8008670:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008672:	7bbb      	ldrb	r3, [r7, #14]
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d103      	bne.n	8008682 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	220b      	movs	r2, #11
 800867e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008680:	e058      	b.n	8008734 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008682:	7bbb      	ldrb	r3, [r7, #14]
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b02      	cmp	r3, #2
 8008688:	d154      	bne.n	8008734 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	220d      	movs	r2, #13
 800868e:	701a      	strb	r2, [r3, #0]
      break;
 8008690:	e050      	b.n	8008734 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	220d      	movs	r2, #13
 8008696:	701a      	strb	r2, [r3, #0]
      break;
 8008698:	e04c      	b.n	8008734 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d049      	beq.n	8008738 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	4798      	blx	r3
      }
      break;
 80086b0:	e042      	b.n	8008738 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7ff fd4a 	bl	8008154 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d009      	beq.n	80086de <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d005      	beq.n	80086f4 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80086ee:	2105      	movs	r1, #5
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d107      	bne.n	8008710 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7ff fe22 	bl	8008352 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800870e:	e014      	b.n	800873a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f001 fb19 	bl	8009d48 <USBH_LL_Start>
      break;
 8008716:	e010      	b.n	800873a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008718:	bf00      	nop
 800871a:	e00e      	b.n	800873a <USBH_Process+0x3c6>
      break;
 800871c:	bf00      	nop
 800871e:	e00c      	b.n	800873a <USBH_Process+0x3c6>
      break;
 8008720:	bf00      	nop
 8008722:	e00a      	b.n	800873a <USBH_Process+0x3c6>
    break;
 8008724:	bf00      	nop
 8008726:	e008      	b.n	800873a <USBH_Process+0x3c6>
      break;
 8008728:	bf00      	nop
 800872a:	e006      	b.n	800873a <USBH_Process+0x3c6>
      break;
 800872c:	bf00      	nop
 800872e:	e004      	b.n	800873a <USBH_Process+0x3c6>
      break;
 8008730:	bf00      	nop
 8008732:	e002      	b.n	800873a <USBH_Process+0x3c6>
      break;
 8008734:	bf00      	nop
 8008736:	e000      	b.n	800873a <USBH_Process+0x3c6>
      break;
 8008738:	bf00      	nop
  }
  return USBH_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b088      	sub	sp, #32
 8008748:	af04      	add	r7, sp, #16
 800874a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800874c:	2301      	movs	r3, #1
 800874e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008750:	2301      	movs	r3, #1
 8008752:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	785b      	ldrb	r3, [r3, #1]
 8008758:	2b07      	cmp	r3, #7
 800875a:	f200 81bd 	bhi.w	8008ad8 <USBH_HandleEnum+0x394>
 800875e:	a201      	add	r2, pc, #4	@ (adr r2, 8008764 <USBH_HandleEnum+0x20>)
 8008760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008764:	08008785 	.word	0x08008785
 8008768:	0800883f 	.word	0x0800883f
 800876c:	080088a9 	.word	0x080088a9
 8008770:	08008933 	.word	0x08008933
 8008774:	0800899d 	.word	0x0800899d
 8008778:	08008a0d 	.word	0x08008a0d
 800877c:	08008a53 	.word	0x08008a53
 8008780:	08008a99 	.word	0x08008a99
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008784:	2108      	movs	r1, #8
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fa4c 	bl	8008c24 <USBH_Get_DevDesc>
 800878c:	4603      	mov	r3, r0
 800878e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008790:	7bbb      	ldrb	r3, [r7, #14]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d12e      	bne.n	80087f4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	7919      	ldrb	r1, [r3, #4]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80087ba:	9202      	str	r2, [sp, #8]
 80087bc:	2200      	movs	r2, #0
 80087be:	9201      	str	r2, [sp, #4]
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	4603      	mov	r3, r0
 80087c4:	2280      	movs	r2, #128	@ 0x80
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f001 f8dc 	bl	8009984 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	7959      	ldrb	r1, [r3, #5]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80087e0:	9202      	str	r2, [sp, #8]
 80087e2:	2200      	movs	r2, #0
 80087e4:	9201      	str	r2, [sp, #4]
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	4603      	mov	r3, r0
 80087ea:	2200      	movs	r2, #0
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f001 f8c9 	bl	8009984 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80087f2:	e173      	b.n	8008adc <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087f4:	7bbb      	ldrb	r3, [r7, #14]
 80087f6:	2b03      	cmp	r3, #3
 80087f8:	f040 8170 	bne.w	8008adc <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008802:	3301      	adds	r3, #1
 8008804:	b2da      	uxtb	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008812:	2b03      	cmp	r3, #3
 8008814:	d903      	bls.n	800881e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	220d      	movs	r2, #13
 800881a:	701a      	strb	r2, [r3, #0]
      break;
 800881c:	e15e      	b.n	8008adc <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	795b      	ldrb	r3, [r3, #5]
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f001 f8fd 	bl	8009a24 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	791b      	ldrb	r3, [r3, #4]
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f001 f8f7 	bl	8009a24 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	701a      	strb	r2, [r3, #0]
      break;
 800883c:	e14e      	b.n	8008adc <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800883e:	2112      	movs	r1, #18
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f9ef 	bl	8008c24 <USBH_Get_DevDesc>
 8008846:	4603      	mov	r3, r0
 8008848:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800884a:	7bbb      	ldrb	r3, [r7, #14]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d103      	bne.n	8008858 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2202      	movs	r2, #2
 8008854:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008856:	e143      	b.n	8008ae0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008858:	7bbb      	ldrb	r3, [r7, #14]
 800885a:	2b03      	cmp	r3, #3
 800885c:	f040 8140 	bne.w	8008ae0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008866:	3301      	adds	r3, #1
 8008868:	b2da      	uxtb	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008876:	2b03      	cmp	r3, #3
 8008878:	d903      	bls.n	8008882 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	220d      	movs	r2, #13
 800887e:	701a      	strb	r2, [r3, #0]
      break;
 8008880:	e12e      	b.n	8008ae0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	795b      	ldrb	r3, [r3, #5]
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f001 f8cb 	bl	8009a24 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	791b      	ldrb	r3, [r3, #4]
 8008892:	4619      	mov	r1, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f001 f8c5 	bl	8009a24 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	701a      	strb	r2, [r3, #0]
      break;
 80088a6:	e11b      	b.n	8008ae0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80088a8:	2101      	movs	r1, #1
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fa79 	bl	8008da2 <USBH_SetAddress>
 80088b0:	4603      	mov	r3, r0
 80088b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80088b4:	7bbb      	ldrb	r3, [r7, #14]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d130      	bne.n	800891c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80088ba:	2002      	movs	r0, #2
 80088bc:	f001 fbab 	bl	800a016 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2203      	movs	r2, #3
 80088cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	7919      	ldrb	r1, [r3, #4]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80088e2:	9202      	str	r2, [sp, #8]
 80088e4:	2200      	movs	r2, #0
 80088e6:	9201      	str	r2, [sp, #4]
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	4603      	mov	r3, r0
 80088ec:	2280      	movs	r2, #128	@ 0x80
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 f848 	bl	8009984 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	7959      	ldrb	r1, [r3, #5]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008908:	9202      	str	r2, [sp, #8]
 800890a:	2200      	movs	r2, #0
 800890c:	9201      	str	r2, [sp, #4]
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	4603      	mov	r3, r0
 8008912:	2200      	movs	r2, #0
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f001 f835 	bl	8009984 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800891a:	e0e3      	b.n	8008ae4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800891c:	7bbb      	ldrb	r3, [r7, #14]
 800891e:	2b03      	cmp	r3, #3
 8008920:	f040 80e0 	bne.w	8008ae4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	220d      	movs	r2, #13
 8008928:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	705a      	strb	r2, [r3, #1]
      break;
 8008930:	e0d8      	b.n	8008ae4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008932:	2109      	movs	r1, #9
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f9a1 	bl	8008c7c <USBH_Get_CfgDesc>
 800893a:	4603      	mov	r3, r0
 800893c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800893e:	7bbb      	ldrb	r3, [r7, #14]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d103      	bne.n	800894c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2204      	movs	r2, #4
 8008948:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800894a:	e0cd      	b.n	8008ae8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800894c:	7bbb      	ldrb	r3, [r7, #14]
 800894e:	2b03      	cmp	r3, #3
 8008950:	f040 80ca 	bne.w	8008ae8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800895a:	3301      	adds	r3, #1
 800895c:	b2da      	uxtb	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800896a:	2b03      	cmp	r3, #3
 800896c:	d903      	bls.n	8008976 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	220d      	movs	r2, #13
 8008972:	701a      	strb	r2, [r3, #0]
      break;
 8008974:	e0b8      	b.n	8008ae8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	795b      	ldrb	r3, [r3, #5]
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f001 f851 	bl	8009a24 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	791b      	ldrb	r3, [r3, #4]
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f001 f84b 	bl	8009a24 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	701a      	strb	r2, [r3, #0]
      break;
 800899a:	e0a5      	b.n	8008ae8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f969 	bl	8008c7c <USBH_Get_CfgDesc>
 80089aa:	4603      	mov	r3, r0
 80089ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d103      	bne.n	80089bc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2205      	movs	r2, #5
 80089b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80089ba:	e097      	b.n	8008aec <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089bc:	7bbb      	ldrb	r3, [r7, #14]
 80089be:	2b03      	cmp	r3, #3
 80089c0:	f040 8094 	bne.w	8008aec <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80089ca:	3301      	adds	r3, #1
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80089da:	2b03      	cmp	r3, #3
 80089dc:	d903      	bls.n	80089e6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	220d      	movs	r2, #13
 80089e2:	701a      	strb	r2, [r3, #0]
      break;
 80089e4:	e082      	b.n	8008aec <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	795b      	ldrb	r3, [r3, #5]
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f001 f819 	bl	8009a24 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	791b      	ldrb	r3, [r3, #4]
 80089f6:	4619      	mov	r1, r3
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f001 f813 	bl	8009a24 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	701a      	strb	r2, [r3, #0]
      break;
 8008a0a:	e06f      	b.n	8008aec <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d019      	beq.n	8008a4a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008a22:	23ff      	movs	r3, #255	@ 0xff
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f953 	bl	8008cd0 <USBH_Get_StringDesc>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008a2e:	7bbb      	ldrb	r3, [r7, #14]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d103      	bne.n	8008a3c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2206      	movs	r2, #6
 8008a38:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008a3a:	e059      	b.n	8008af0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a3c:	7bbb      	ldrb	r3, [r7, #14]
 8008a3e:	2b03      	cmp	r3, #3
 8008a40:	d156      	bne.n	8008af0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2206      	movs	r2, #6
 8008a46:	705a      	strb	r2, [r3, #1]
      break;
 8008a48:	e052      	b.n	8008af0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2206      	movs	r2, #6
 8008a4e:	705a      	strb	r2, [r3, #1]
      break;
 8008a50:	e04e      	b.n	8008af0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d019      	beq.n	8008a90 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008a68:	23ff      	movs	r3, #255	@ 0xff
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f930 	bl	8008cd0 <USBH_Get_StringDesc>
 8008a70:	4603      	mov	r3, r0
 8008a72:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008a74:	7bbb      	ldrb	r3, [r7, #14]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d103      	bne.n	8008a82 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2207      	movs	r2, #7
 8008a7e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008a80:	e038      	b.n	8008af4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a82:	7bbb      	ldrb	r3, [r7, #14]
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d135      	bne.n	8008af4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2207      	movs	r2, #7
 8008a8c:	705a      	strb	r2, [r3, #1]
      break;
 8008a8e:	e031      	b.n	8008af4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2207      	movs	r2, #7
 8008a94:	705a      	strb	r2, [r3, #1]
      break;
 8008a96:	e02d      	b.n	8008af4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d017      	beq.n	8008ad2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008aae:	23ff      	movs	r3, #255	@ 0xff
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f90d 	bl	8008cd0 <USBH_Get_StringDesc>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008aba:	7bbb      	ldrb	r3, [r7, #14]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d102      	bne.n	8008ac6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008ac4:	e018      	b.n	8008af8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ac6:	7bbb      	ldrb	r3, [r7, #14]
 8008ac8:	2b03      	cmp	r3, #3
 8008aca:	d115      	bne.n	8008af8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73fb      	strb	r3, [r7, #15]
      break;
 8008ad0:	e012      	b.n	8008af8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ad6:	e00f      	b.n	8008af8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008ad8:	bf00      	nop
 8008ada:	e00e      	b.n	8008afa <USBH_HandleEnum+0x3b6>
      break;
 8008adc:	bf00      	nop
 8008ade:	e00c      	b.n	8008afa <USBH_HandleEnum+0x3b6>
      break;
 8008ae0:	bf00      	nop
 8008ae2:	e00a      	b.n	8008afa <USBH_HandleEnum+0x3b6>
      break;
 8008ae4:	bf00      	nop
 8008ae6:	e008      	b.n	8008afa <USBH_HandleEnum+0x3b6>
      break;
 8008ae8:	bf00      	nop
 8008aea:	e006      	b.n	8008afa <USBH_HandleEnum+0x3b6>
      break;
 8008aec:	bf00      	nop
 8008aee:	e004      	b.n	8008afa <USBH_HandleEnum+0x3b6>
      break;
 8008af0:	bf00      	nop
 8008af2:	e002      	b.n	8008afa <USBH_HandleEnum+0x3b6>
      break;
 8008af4:	bf00      	nop
 8008af6:	e000      	b.n	8008afa <USBH_HandleEnum+0x3b6>
      break;
 8008af8:	bf00      	nop
  }
  return Status;
 8008afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008b16:	bf00      	nop
 8008b18:	370c      	adds	r7, #12
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr

08008b22 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b082      	sub	sp, #8
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008b30:	1c5a      	adds	r2, r3, #1
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 f804 	bl	8008b46 <USBH_HandleSof>
}
 8008b3e:	bf00      	nop
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b082      	sub	sp, #8
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b0b      	cmp	r3, #11
 8008b56:	d10a      	bne.n	8008b6e <USBH_HandleSof+0x28>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d005      	beq.n	8008b6e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b68:	699b      	ldr	r3, [r3, #24]
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	4798      	blx	r3
  }
}
 8008b6e:	bf00      	nop
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b083      	sub	sp, #12
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008b86:	bf00      	nop
}
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b083      	sub	sp, #12
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008ba2:	bf00      	nop
}
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b083      	sub	sp, #12
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f001 f8be 	bl	8009d7e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	791b      	ldrb	r3, [r3, #4]
 8008c06:	4619      	mov	r1, r3
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 ff0b 	bl	8009a24 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	795b      	ldrb	r3, [r3, #5]
 8008c12:	4619      	mov	r1, r3
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 ff05 	bl	8009a24 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b086      	sub	sp, #24
 8008c28:	af02      	add	r7, sp, #8
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008c30:	887b      	ldrh	r3, [r7, #2]
 8008c32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c36:	d901      	bls.n	8008c3c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e01b      	b.n	8008c74 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008c42:	887b      	ldrh	r3, [r7, #2]
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	4613      	mov	r3, r2
 8008c48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f872 	bl	8008d38 <USBH_GetDescriptor>
 8008c54:	4603      	mov	r3, r0
 8008c56:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d109      	bne.n	8008c72 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008c64:	887a      	ldrh	r2, [r7, #2]
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f929 	bl	8008ec0 <USBH_ParseDevDesc>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af02      	add	r7, sp, #8
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	460b      	mov	r3, r1
 8008c86:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	331c      	adds	r3, #28
 8008c8c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008c8e:	887b      	ldrh	r3, [r7, #2]
 8008c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c94:	d901      	bls.n	8008c9a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e016      	b.n	8008cc8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008c9a:	887b      	ldrh	r3, [r7, #2]
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f846 	bl	8008d38 <USBH_GetDescriptor>
 8008cac:	4603      	mov	r3, r0
 8008cae:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d107      	bne.n	8008cc6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008cb6:	887b      	ldrh	r3, [r7, #2]
 8008cb8:	461a      	mov	r2, r3
 8008cba:	68b9      	ldr	r1, [r7, #8]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f9af 	bl	8009020 <USBH_ParseCfgDesc>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b088      	sub	sp, #32
 8008cd4:	af02      	add	r7, sp, #8
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	607a      	str	r2, [r7, #4]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	460b      	mov	r3, r1
 8008cde:	72fb      	strb	r3, [r7, #11]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008ce4:	893b      	ldrh	r3, [r7, #8]
 8008ce6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cea:	d802      	bhi.n	8008cf2 <USBH_Get_StringDesc+0x22>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e01c      	b.n	8008d30 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008cf6:	7afb      	ldrb	r3, [r7, #11]
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008cfe:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008d06:	893b      	ldrh	r3, [r7, #8]
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 f812 	bl	8008d38 <USBH_GetDescriptor>
 8008d14:	4603      	mov	r3, r0
 8008d16:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008d18:	7dfb      	ldrb	r3, [r7, #23]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d107      	bne.n	8008d2e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008d24:	893a      	ldrh	r2, [r7, #8]
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 fb8d 	bl	8009448 <USBH_ParseStringDesc>
  }

  return status;
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	607b      	str	r3, [r7, #4]
 8008d42:	460b      	mov	r3, r1
 8008d44:	72fb      	strb	r3, [r7, #11]
 8008d46:	4613      	mov	r3, r2
 8008d48:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	789b      	ldrb	r3, [r3, #2]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d11c      	bne.n	8008d8c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008d52:	7afb      	ldrb	r3, [r7, #11]
 8008d54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2206      	movs	r2, #6
 8008d62:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	893a      	ldrh	r2, [r7, #8]
 8008d68:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008d6a:	893b      	ldrh	r3, [r7, #8]
 8008d6c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008d70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d74:	d104      	bne.n	8008d80 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f240 4209 	movw	r2, #1033	@ 0x409
 8008d7c:	829a      	strh	r2, [r3, #20]
 8008d7e:	e002      	b.n	8008d86 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	8b3a      	ldrh	r2, [r7, #24]
 8008d8a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008d8c:	8b3b      	ldrh	r3, [r7, #24]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	6879      	ldr	r1, [r7, #4]
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f000 fba5 	bl	80094e2 <USBH_CtlReq>
 8008d98:	4603      	mov	r3, r0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	460b      	mov	r3, r1
 8008dac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	789b      	ldrb	r3, [r3, #2]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d10f      	bne.n	8008dd6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2205      	movs	r2, #5
 8008dc0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008dc2:	78fb      	ldrb	r3, [r7, #3]
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	2100      	movs	r1, #0
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fb81 	bl	80094e2 <USBH_CtlReq>
 8008de0:	4603      	mov	r3, r0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b082      	sub	sp, #8
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	460b      	mov	r3, r1
 8008df4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	789b      	ldrb	r3, [r3, #2]
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d10e      	bne.n	8008e1c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2209      	movs	r2, #9
 8008e08:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	887a      	ldrh	r2, [r7, #2]
 8008e0e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2100      	movs	r1, #0
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fb5e 	bl	80094e2 <USBH_CtlReq>
 8008e26:	4603      	mov	r3, r0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	789b      	ldrb	r3, [r3, #2]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d10f      	bne.n	8008e64 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2203      	movs	r2, #3
 8008e4e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008e50:	78fb      	ldrb	r3, [r7, #3]
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008e64:	2200      	movs	r2, #0
 8008e66:	2100      	movs	r1, #0
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fb3a 	bl	80094e2 <USBH_CtlReq>
 8008e6e:	4603      	mov	r3, r0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	460b      	mov	r3, r1
 8008e82:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	789b      	ldrb	r3, [r3, #2]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d10f      	bne.n	8008eac <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2202      	movs	r2, #2
 8008e90:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008e9e:	78fb      	ldrb	r3, [r7, #3]
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008eac:	2200      	movs	r2, #0
 8008eae:	2100      	movs	r1, #0
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fb16 	bl	80094e2 <USBH_CtlReq>
 8008eb6:	4603      	mov	r3, r0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b087      	sub	sp, #28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	4613      	mov	r3, r2
 8008ecc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008ed4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d101      	bne.n	8008ee4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	e094      	b.n	800900e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	781a      	ldrb	r2, [r3, #0]
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	785a      	ldrb	r2, [r3, #1]
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	3302      	adds	r3, #2
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	461a      	mov	r2, r3
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	3303      	adds	r3, #3
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	021b      	lsls	r3, r3, #8
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	4313      	orrs	r3, r2
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	791a      	ldrb	r2, [r3, #4]
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	795a      	ldrb	r2, [r3, #5]
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	799a      	ldrb	r2, [r3, #6]
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	79da      	ldrb	r2, [r3, #7]
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d004      	beq.n	8008f42 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d11b      	bne.n	8008f7a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	79db      	ldrb	r3, [r3, #7]
 8008f46:	2b20      	cmp	r3, #32
 8008f48:	dc0f      	bgt.n	8008f6a <USBH_ParseDevDesc+0xaa>
 8008f4a:	2b08      	cmp	r3, #8
 8008f4c:	db0f      	blt.n	8008f6e <USBH_ParseDevDesc+0xae>
 8008f4e:	3b08      	subs	r3, #8
 8008f50:	4a32      	ldr	r2, [pc, #200]	@ (800901c <USBH_ParseDevDesc+0x15c>)
 8008f52:	fa22 f303 	lsr.w	r3, r2, r3
 8008f56:	f003 0301 	and.w	r3, r3, #1
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	bf14      	ite	ne
 8008f5e:	2301      	movne	r3, #1
 8008f60:	2300      	moveq	r3, #0
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d106      	bne.n	8008f76 <USBH_ParseDevDesc+0xb6>
 8008f68:	e001      	b.n	8008f6e <USBH_ParseDevDesc+0xae>
 8008f6a:	2b40      	cmp	r3, #64	@ 0x40
 8008f6c:	d003      	beq.n	8008f76 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	2208      	movs	r2, #8
 8008f72:	71da      	strb	r2, [r3, #7]
        break;
 8008f74:	e000      	b.n	8008f78 <USBH_ParseDevDesc+0xb8>
        break;
 8008f76:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008f78:	e00e      	b.n	8008f98 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	d107      	bne.n	8008f94 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	79db      	ldrb	r3, [r3, #7]
 8008f88:	2b08      	cmp	r3, #8
 8008f8a:	d005      	beq.n	8008f98 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	2208      	movs	r2, #8
 8008f90:	71da      	strb	r2, [r3, #7]
 8008f92:	e001      	b.n	8008f98 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008f94:	2303      	movs	r3, #3
 8008f96:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008f98:	88fb      	ldrh	r3, [r7, #6]
 8008f9a:	2b08      	cmp	r3, #8
 8008f9c:	d936      	bls.n	800900c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	3308      	adds	r3, #8
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	3309      	adds	r3, #9
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	021b      	lsls	r3, r3, #8
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	330a      	adds	r3, #10
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	330b      	adds	r3, #11
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	021b      	lsls	r3, r3, #8
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	330c      	adds	r3, #12
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	330d      	adds	r3, #13
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	021b      	lsls	r3, r3, #8
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	7b9a      	ldrb	r2, [r3, #14]
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	7bda      	ldrb	r2, [r3, #15]
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	7c1a      	ldrb	r2, [r3, #16]
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	7c5a      	ldrb	r2, [r3, #17]
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800900c:	7dfb      	ldrb	r3, [r7, #23]
}
 800900e:	4618      	mov	r0, r3
 8009010:	371c      	adds	r7, #28
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	01000101 	.word	0x01000101

08009020 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b08c      	sub	sp, #48	@ 0x30
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	4613      	mov	r3, r2
 800902c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009034:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800903c:	2300      	movs	r3, #0
 800903e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009042:	2300      	movs	r3, #0
 8009044:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800904e:	2302      	movs	r3, #2
 8009050:	e0da      	b.n	8009208 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	781a      	ldrb	r2, [r3, #0]
 800905a:	6a3b      	ldr	r3, [r7, #32]
 800905c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	785a      	ldrb	r2, [r3, #1]
 8009062:	6a3b      	ldr	r3, [r7, #32]
 8009064:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	3302      	adds	r3, #2
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	461a      	mov	r2, r3
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	3303      	adds	r3, #3
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	021b      	lsls	r3, r3, #8
 8009076:	b29b      	uxth	r3, r3
 8009078:	4313      	orrs	r3, r2
 800907a:	b29b      	uxth	r3, r3
 800907c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009080:	bf28      	it	cs
 8009082:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009086:	b29a      	uxth	r2, r3
 8009088:	6a3b      	ldr	r3, [r7, #32]
 800908a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	791a      	ldrb	r2, [r3, #4]
 8009090:	6a3b      	ldr	r3, [r7, #32]
 8009092:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	795a      	ldrb	r2, [r3, #5]
 8009098:	6a3b      	ldr	r3, [r7, #32]
 800909a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	799a      	ldrb	r2, [r3, #6]
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	79da      	ldrb	r2, [r3, #7]
 80090a8:	6a3b      	ldr	r3, [r7, #32]
 80090aa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	7a1a      	ldrb	r2, [r3, #8]
 80090b0:	6a3b      	ldr	r3, [r7, #32]
 80090b2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80090b4:	6a3b      	ldr	r3, [r7, #32]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	2b09      	cmp	r3, #9
 80090ba:	d002      	beq.n	80090c2 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80090bc:	6a3b      	ldr	r3, [r7, #32]
 80090be:	2209      	movs	r2, #9
 80090c0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80090c2:	88fb      	ldrh	r3, [r7, #6]
 80090c4:	2b09      	cmp	r3, #9
 80090c6:	f240 809d 	bls.w	8009204 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80090ca:	2309      	movs	r3, #9
 80090cc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80090ce:	2300      	movs	r3, #0
 80090d0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80090d2:	e081      	b.n	80091d8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80090d4:	f107 0316 	add.w	r3, r7, #22
 80090d8:	4619      	mov	r1, r3
 80090da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090dc:	f000 f9e7 	bl	80094ae <USBH_GetNextDesc>
 80090e0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80090e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e4:	785b      	ldrb	r3, [r3, #1]
 80090e6:	2b04      	cmp	r3, #4
 80090e8:	d176      	bne.n	80091d8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80090ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	2b09      	cmp	r3, #9
 80090f0:	d002      	beq.n	80090f8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80090f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f4:	2209      	movs	r2, #9
 80090f6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80090f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090fc:	221a      	movs	r2, #26
 80090fe:	fb02 f303 	mul.w	r3, r2, r3
 8009102:	3308      	adds	r3, #8
 8009104:	6a3a      	ldr	r2, [r7, #32]
 8009106:	4413      	add	r3, r2
 8009108:	3302      	adds	r3, #2
 800910a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800910c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800910e:	69f8      	ldr	r0, [r7, #28]
 8009110:	f000 f87e 	bl	8009210 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009114:	2300      	movs	r3, #0
 8009116:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800911a:	2300      	movs	r3, #0
 800911c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800911e:	e043      	b.n	80091a8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009120:	f107 0316 	add.w	r3, r7, #22
 8009124:	4619      	mov	r1, r3
 8009126:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009128:	f000 f9c1 	bl	80094ae <USBH_GetNextDesc>
 800912c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800912e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009130:	785b      	ldrb	r3, [r3, #1]
 8009132:	2b05      	cmp	r3, #5
 8009134:	d138      	bne.n	80091a8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	795b      	ldrb	r3, [r3, #5]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d113      	bne.n	8009166 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009142:	2b02      	cmp	r3, #2
 8009144:	d003      	beq.n	800914e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	799b      	ldrb	r3, [r3, #6]
 800914a:	2b03      	cmp	r3, #3
 800914c:	d10b      	bne.n	8009166 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	79db      	ldrb	r3, [r3, #7]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10b      	bne.n	800916e <USBH_ParseCfgDesc+0x14e>
 8009156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	2b09      	cmp	r3, #9
 800915c:	d007      	beq.n	800916e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800915e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009160:	2209      	movs	r2, #9
 8009162:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009164:	e003      	b.n	800916e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009168:	2207      	movs	r2, #7
 800916a:	701a      	strb	r2, [r3, #0]
 800916c:	e000      	b.n	8009170 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800916e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009170:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009174:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009178:	3201      	adds	r2, #1
 800917a:	00d2      	lsls	r2, r2, #3
 800917c:	211a      	movs	r1, #26
 800917e:	fb01 f303 	mul.w	r3, r1, r3
 8009182:	4413      	add	r3, r2
 8009184:	3308      	adds	r3, #8
 8009186:	6a3a      	ldr	r2, [r7, #32]
 8009188:	4413      	add	r3, r2
 800918a:	3304      	adds	r3, #4
 800918c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800918e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009190:	69b9      	ldr	r1, [r7, #24]
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f000 f870 	bl	8009278 <USBH_ParseEPDesc>
 8009198:	4603      	mov	r3, r0
 800919a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800919e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80091a2:	3301      	adds	r3, #1
 80091a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	791b      	ldrb	r3, [r3, #4]
 80091ac:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d204      	bcs.n	80091be <USBH_ParseCfgDesc+0x19e>
 80091b4:	6a3b      	ldr	r3, [r7, #32]
 80091b6:	885a      	ldrh	r2, [r3, #2]
 80091b8:	8afb      	ldrh	r3, [r7, #22]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d8b0      	bhi.n	8009120 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	791b      	ldrb	r3, [r3, #4]
 80091c2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d201      	bcs.n	80091ce <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80091ca:	2303      	movs	r3, #3
 80091cc:	e01c      	b.n	8009208 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80091ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091d2:	3301      	adds	r3, #1
 80091d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80091d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d805      	bhi.n	80091ec <USBH_ParseCfgDesc+0x1cc>
 80091e0:	6a3b      	ldr	r3, [r7, #32]
 80091e2:	885a      	ldrh	r2, [r3, #2]
 80091e4:	8afb      	ldrh	r3, [r7, #22]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	f63f af74 	bhi.w	80090d4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	791b      	ldrb	r3, [r3, #4]
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	bf28      	it	cs
 80091f4:	2302      	movcs	r3, #2
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d201      	bcs.n	8009204 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009200:	2303      	movs	r3, #3
 8009202:	e001      	b.n	8009208 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009204:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009208:	4618      	mov	r0, r3
 800920a:	3730      	adds	r7, #48	@ 0x30
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781a      	ldrb	r2, [r3, #0]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	785a      	ldrb	r2, [r3, #1]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	789a      	ldrb	r2, [r3, #2]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	78da      	ldrb	r2, [r3, #3]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	3304      	adds	r3, #4
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	2b02      	cmp	r3, #2
 8009242:	bf28      	it	cs
 8009244:	2302      	movcs	r3, #2
 8009246:	b2da      	uxtb	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	795a      	ldrb	r2, [r3, #5]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	799a      	ldrb	r2, [r3, #6]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	79da      	ldrb	r2, [r3, #7]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	7a1a      	ldrb	r2, [r3, #8]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	721a      	strb	r2, [r3, #8]
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009278:	b480      	push	{r7}
 800927a:	b087      	sub	sp, #28
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	781a      	ldrb	r2, [r3, #0]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	785a      	ldrb	r2, [r3, #1]
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	789a      	ldrb	r2, [r3, #2]
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	78da      	ldrb	r2, [r3, #3]
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	3304      	adds	r3, #4
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	3305      	adds	r3, #5
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	021b      	lsls	r3, r3, #8
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	4313      	orrs	r3, r2
 80092bc:	b29a      	uxth	r2, r3
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	799a      	ldrb	r2, [r3, #6]
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	889b      	ldrh	r3, [r3, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d009      	beq.n	80092e6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80092d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092da:	d804      	bhi.n	80092e6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80092e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092e4:	d901      	bls.n	80092ea <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80092e6:	2303      	movs	r3, #3
 80092e8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d136      	bne.n	8009362 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	78db      	ldrb	r3, [r3, #3]
 80092f8:	f003 0303 	and.w	r3, r3, #3
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d108      	bne.n	8009312 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	889b      	ldrh	r3, [r3, #4]
 8009304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009308:	f240 8097 	bls.w	800943a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800930c:	2303      	movs	r3, #3
 800930e:	75fb      	strb	r3, [r7, #23]
 8009310:	e093      	b.n	800943a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	78db      	ldrb	r3, [r3, #3]
 8009316:	f003 0303 	and.w	r3, r3, #3
 800931a:	2b00      	cmp	r3, #0
 800931c:	d107      	bne.n	800932e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	889b      	ldrh	r3, [r3, #4]
 8009322:	2b40      	cmp	r3, #64	@ 0x40
 8009324:	f240 8089 	bls.w	800943a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009328:	2303      	movs	r3, #3
 800932a:	75fb      	strb	r3, [r7, #23]
 800932c:	e085      	b.n	800943a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	78db      	ldrb	r3, [r3, #3]
 8009332:	f003 0303 	and.w	r3, r3, #3
 8009336:	2b01      	cmp	r3, #1
 8009338:	d005      	beq.n	8009346 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	78db      	ldrb	r3, [r3, #3]
 800933e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009342:	2b03      	cmp	r3, #3
 8009344:	d10a      	bne.n	800935c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	799b      	ldrb	r3, [r3, #6]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d003      	beq.n	8009356 <USBH_ParseEPDesc+0xde>
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	799b      	ldrb	r3, [r3, #6]
 8009352:	2b10      	cmp	r3, #16
 8009354:	d970      	bls.n	8009438 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009356:	2303      	movs	r3, #3
 8009358:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800935a:	e06d      	b.n	8009438 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800935c:	2303      	movs	r3, #3
 800935e:	75fb      	strb	r3, [r7, #23]
 8009360:	e06b      	b.n	800943a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009368:	2b01      	cmp	r3, #1
 800936a:	d13c      	bne.n	80093e6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	78db      	ldrb	r3, [r3, #3]
 8009370:	f003 0303 	and.w	r3, r3, #3
 8009374:	2b02      	cmp	r3, #2
 8009376:	d005      	beq.n	8009384 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	78db      	ldrb	r3, [r3, #3]
 800937c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009380:	2b00      	cmp	r3, #0
 8009382:	d106      	bne.n	8009392 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	889b      	ldrh	r3, [r3, #4]
 8009388:	2b40      	cmp	r3, #64	@ 0x40
 800938a:	d956      	bls.n	800943a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800938c:	2303      	movs	r3, #3
 800938e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009390:	e053      	b.n	800943a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	78db      	ldrb	r3, [r3, #3]
 8009396:	f003 0303 	and.w	r3, r3, #3
 800939a:	2b01      	cmp	r3, #1
 800939c:	d10e      	bne.n	80093bc <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	799b      	ldrb	r3, [r3, #6]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d007      	beq.n	80093b6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80093aa:	2b10      	cmp	r3, #16
 80093ac:	d803      	bhi.n	80093b6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80093b2:	2b40      	cmp	r3, #64	@ 0x40
 80093b4:	d941      	bls.n	800943a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80093b6:	2303      	movs	r3, #3
 80093b8:	75fb      	strb	r3, [r7, #23]
 80093ba:	e03e      	b.n	800943a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	78db      	ldrb	r3, [r3, #3]
 80093c0:	f003 0303 	and.w	r3, r3, #3
 80093c4:	2b03      	cmp	r3, #3
 80093c6:	d10b      	bne.n	80093e0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	799b      	ldrb	r3, [r3, #6]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d004      	beq.n	80093da <USBH_ParseEPDesc+0x162>
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	889b      	ldrh	r3, [r3, #4]
 80093d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093d8:	d32f      	bcc.n	800943a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80093da:	2303      	movs	r3, #3
 80093dc:	75fb      	strb	r3, [r7, #23]
 80093de:	e02c      	b.n	800943a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80093e0:	2303      	movs	r3, #3
 80093e2:	75fb      	strb	r3, [r7, #23]
 80093e4:	e029      	b.n	800943a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d120      	bne.n	8009432 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	78db      	ldrb	r3, [r3, #3]
 80093f4:	f003 0303 	and.w	r3, r3, #3
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d106      	bne.n	800940a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	889b      	ldrh	r3, [r3, #4]
 8009400:	2b08      	cmp	r3, #8
 8009402:	d01a      	beq.n	800943a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009404:	2303      	movs	r3, #3
 8009406:	75fb      	strb	r3, [r7, #23]
 8009408:	e017      	b.n	800943a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	78db      	ldrb	r3, [r3, #3]
 800940e:	f003 0303 	and.w	r3, r3, #3
 8009412:	2b03      	cmp	r3, #3
 8009414:	d10a      	bne.n	800942c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	799b      	ldrb	r3, [r3, #6]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <USBH_ParseEPDesc+0x1ae>
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	889b      	ldrh	r3, [r3, #4]
 8009422:	2b08      	cmp	r3, #8
 8009424:	d909      	bls.n	800943a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009426:	2303      	movs	r3, #3
 8009428:	75fb      	strb	r3, [r7, #23]
 800942a:	e006      	b.n	800943a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800942c:	2303      	movs	r3, #3
 800942e:	75fb      	strb	r3, [r7, #23]
 8009430:	e003      	b.n	800943a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009432:	2303      	movs	r3, #3
 8009434:	75fb      	strb	r3, [r7, #23]
 8009436:	e000      	b.n	800943a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009438:	bf00      	nop
  }

  return status;
 800943a:	7dfb      	ldrb	r3, [r7, #23]
}
 800943c:	4618      	mov	r0, r3
 800943e:	371c      	adds	r7, #28
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009448:	b480      	push	{r7}
 800944a:	b087      	sub	sp, #28
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	4613      	mov	r3, r2
 8009454:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	3301      	adds	r3, #1
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	2b03      	cmp	r3, #3
 800945e:	d120      	bne.n	80094a2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	1e9a      	subs	r2, r3, #2
 8009466:	88fb      	ldrh	r3, [r7, #6]
 8009468:	4293      	cmp	r3, r2
 800946a:	bf28      	it	cs
 800946c:	4613      	movcs	r3, r2
 800946e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	3302      	adds	r3, #2
 8009474:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009476:	2300      	movs	r3, #0
 8009478:	82fb      	strh	r3, [r7, #22]
 800947a:	e00b      	b.n	8009494 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800947c:	8afb      	ldrh	r3, [r7, #22]
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	4413      	add	r3, r2
 8009482:	781a      	ldrb	r2, [r3, #0]
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	3301      	adds	r3, #1
 800948c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800948e:	8afb      	ldrh	r3, [r7, #22]
 8009490:	3302      	adds	r3, #2
 8009492:	82fb      	strh	r3, [r7, #22]
 8009494:	8afa      	ldrh	r2, [r7, #22]
 8009496:	8abb      	ldrh	r3, [r7, #20]
 8009498:	429a      	cmp	r2, r3
 800949a:	d3ef      	bcc.n	800947c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	2200      	movs	r2, #0
 80094a0:	701a      	strb	r2, [r3, #0]
  }
}
 80094a2:	bf00      	nop
 80094a4:	371c      	adds	r7, #28
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr

080094ae <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80094ae:	b480      	push	{r7}
 80094b0:	b085      	sub	sp, #20
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	881b      	ldrh	r3, [r3, #0]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	7812      	ldrb	r2, [r2, #0]
 80094c0:	4413      	add	r3, r2
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4413      	add	r3, r2
 80094d2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80094d4:	68fb      	ldr	r3, [r7, #12]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b086      	sub	sp, #24
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	60f8      	str	r0, [r7, #12]
 80094ea:	60b9      	str	r1, [r7, #8]
 80094ec:	4613      	mov	r3, r2
 80094ee:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80094f0:	2301      	movs	r3, #1
 80094f2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	789b      	ldrb	r3, [r3, #2]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d002      	beq.n	8009502 <USBH_CtlReq+0x20>
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d00f      	beq.n	8009520 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009500:	e027      	b.n	8009552 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	88fa      	ldrh	r2, [r7, #6]
 800950c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2201      	movs	r2, #1
 8009512:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2202      	movs	r2, #2
 8009518:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800951a:	2301      	movs	r3, #1
 800951c:	75fb      	strb	r3, [r7, #23]
      break;
 800951e:	e018      	b.n	8009552 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f000 f81b 	bl	800955c <USBH_HandleControl>
 8009526:	4603      	mov	r3, r0
 8009528:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800952a:	7dfb      	ldrb	r3, [r7, #23]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d002      	beq.n	8009536 <USBH_CtlReq+0x54>
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	2b03      	cmp	r3, #3
 8009534:	d106      	bne.n	8009544 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2201      	movs	r2, #1
 800953a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	761a      	strb	r2, [r3, #24]
      break;
 8009542:	e005      	b.n	8009550 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009544:	7dfb      	ldrb	r3, [r7, #23]
 8009546:	2b02      	cmp	r3, #2
 8009548:	d102      	bne.n	8009550 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2201      	movs	r2, #1
 800954e:	709a      	strb	r2, [r3, #2]
      break;
 8009550:	bf00      	nop
  }
  return status;
 8009552:	7dfb      	ldrb	r3, [r7, #23]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3718      	adds	r7, #24
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af02      	add	r7, sp, #8
 8009562:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009564:	2301      	movs	r3, #1
 8009566:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009568:	2300      	movs	r3, #0
 800956a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	7e1b      	ldrb	r3, [r3, #24]
 8009570:	3b01      	subs	r3, #1
 8009572:	2b0a      	cmp	r3, #10
 8009574:	f200 8156 	bhi.w	8009824 <USBH_HandleControl+0x2c8>
 8009578:	a201      	add	r2, pc, #4	@ (adr r2, 8009580 <USBH_HandleControl+0x24>)
 800957a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957e:	bf00      	nop
 8009580:	080095ad 	.word	0x080095ad
 8009584:	080095c7 	.word	0x080095c7
 8009588:	08009631 	.word	0x08009631
 800958c:	08009657 	.word	0x08009657
 8009590:	0800968f 	.word	0x0800968f
 8009594:	080096b9 	.word	0x080096b9
 8009598:	0800970b 	.word	0x0800970b
 800959c:	0800972d 	.word	0x0800972d
 80095a0:	08009769 	.word	0x08009769
 80095a4:	0800978f 	.word	0x0800978f
 80095a8:	080097cd 	.word	0x080097cd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f103 0110 	add.w	r1, r3, #16
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	795b      	ldrb	r3, [r3, #5]
 80095b6:	461a      	mov	r2, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f943 	bl	8009844 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2202      	movs	r2, #2
 80095c2:	761a      	strb	r2, [r3, #24]
      break;
 80095c4:	e139      	b.n	800983a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	795b      	ldrb	r3, [r3, #5]
 80095ca:	4619      	mov	r1, r3
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fcc5 	bl	8009f5c <USBH_LL_GetURBState>
 80095d2:	4603      	mov	r3, r0
 80095d4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80095d6:	7bbb      	ldrb	r3, [r7, #14]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d11e      	bne.n	800961a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	7c1b      	ldrb	r3, [r3, #16]
 80095e0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80095e4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	8adb      	ldrh	r3, [r3, #22]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00a      	beq.n	8009604 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80095ee:	7b7b      	ldrb	r3, [r7, #13]
 80095f0:	2b80      	cmp	r3, #128	@ 0x80
 80095f2:	d103      	bne.n	80095fc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2203      	movs	r2, #3
 80095f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80095fa:	e115      	b.n	8009828 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2205      	movs	r2, #5
 8009600:	761a      	strb	r2, [r3, #24]
      break;
 8009602:	e111      	b.n	8009828 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009604:	7b7b      	ldrb	r3, [r7, #13]
 8009606:	2b80      	cmp	r3, #128	@ 0x80
 8009608:	d103      	bne.n	8009612 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2209      	movs	r2, #9
 800960e:	761a      	strb	r2, [r3, #24]
      break;
 8009610:	e10a      	b.n	8009828 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2207      	movs	r2, #7
 8009616:	761a      	strb	r2, [r3, #24]
      break;
 8009618:	e106      	b.n	8009828 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800961a:	7bbb      	ldrb	r3, [r7, #14]
 800961c:	2b04      	cmp	r3, #4
 800961e:	d003      	beq.n	8009628 <USBH_HandleControl+0xcc>
 8009620:	7bbb      	ldrb	r3, [r7, #14]
 8009622:	2b02      	cmp	r3, #2
 8009624:	f040 8100 	bne.w	8009828 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	220b      	movs	r2, #11
 800962c:	761a      	strb	r2, [r3, #24]
      break;
 800962e:	e0fb      	b.n	8009828 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009636:	b29a      	uxth	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6899      	ldr	r1, [r3, #8]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	899a      	ldrh	r2, [r3, #12]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	791b      	ldrb	r3, [r3, #4]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f93a 	bl	80098c2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2204      	movs	r2, #4
 8009652:	761a      	strb	r2, [r3, #24]
      break;
 8009654:	e0f1      	b.n	800983a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	791b      	ldrb	r3, [r3, #4]
 800965a:	4619      	mov	r1, r3
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fc7d 	bl	8009f5c <USBH_LL_GetURBState>
 8009662:	4603      	mov	r3, r0
 8009664:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009666:	7bbb      	ldrb	r3, [r7, #14]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d102      	bne.n	8009672 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2209      	movs	r2, #9
 8009670:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009672:	7bbb      	ldrb	r3, [r7, #14]
 8009674:	2b05      	cmp	r3, #5
 8009676:	d102      	bne.n	800967e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009678:	2303      	movs	r3, #3
 800967a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800967c:	e0d6      	b.n	800982c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800967e:	7bbb      	ldrb	r3, [r7, #14]
 8009680:	2b04      	cmp	r3, #4
 8009682:	f040 80d3 	bne.w	800982c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	220b      	movs	r2, #11
 800968a:	761a      	strb	r2, [r3, #24]
      break;
 800968c:	e0ce      	b.n	800982c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6899      	ldr	r1, [r3, #8]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	899a      	ldrh	r2, [r3, #12]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	795b      	ldrb	r3, [r3, #5]
 800969a:	2001      	movs	r0, #1
 800969c:	9000      	str	r0, [sp, #0]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f8ea 	bl	8009878 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2206      	movs	r2, #6
 80096b4:	761a      	strb	r2, [r3, #24]
      break;
 80096b6:	e0c0      	b.n	800983a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	795b      	ldrb	r3, [r3, #5]
 80096bc:	4619      	mov	r1, r3
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fc4c 	bl	8009f5c <USBH_LL_GetURBState>
 80096c4:	4603      	mov	r3, r0
 80096c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80096c8:	7bbb      	ldrb	r3, [r7, #14]
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d103      	bne.n	80096d6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2207      	movs	r2, #7
 80096d2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80096d4:	e0ac      	b.n	8009830 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80096d6:	7bbb      	ldrb	r3, [r7, #14]
 80096d8:	2b05      	cmp	r3, #5
 80096da:	d105      	bne.n	80096e8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	220c      	movs	r2, #12
 80096e0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80096e2:	2303      	movs	r3, #3
 80096e4:	73fb      	strb	r3, [r7, #15]
      break;
 80096e6:	e0a3      	b.n	8009830 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80096e8:	7bbb      	ldrb	r3, [r7, #14]
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d103      	bne.n	80096f6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2205      	movs	r2, #5
 80096f2:	761a      	strb	r2, [r3, #24]
      break;
 80096f4:	e09c      	b.n	8009830 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80096f6:	7bbb      	ldrb	r3, [r7, #14]
 80096f8:	2b04      	cmp	r3, #4
 80096fa:	f040 8099 	bne.w	8009830 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	220b      	movs	r2, #11
 8009702:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009704:	2302      	movs	r3, #2
 8009706:	73fb      	strb	r3, [r7, #15]
      break;
 8009708:	e092      	b.n	8009830 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	791b      	ldrb	r3, [r3, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	2100      	movs	r1, #0
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f8d5 	bl	80098c2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800971e:	b29a      	uxth	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2208      	movs	r2, #8
 8009728:	761a      	strb	r2, [r3, #24]

      break;
 800972a:	e086      	b.n	800983a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	791b      	ldrb	r3, [r3, #4]
 8009730:	4619      	mov	r1, r3
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fc12 	bl	8009f5c <USBH_LL_GetURBState>
 8009738:	4603      	mov	r3, r0
 800973a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800973c:	7bbb      	ldrb	r3, [r7, #14]
 800973e:	2b01      	cmp	r3, #1
 8009740:	d105      	bne.n	800974e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	220d      	movs	r2, #13
 8009746:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009748:	2300      	movs	r3, #0
 800974a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800974c:	e072      	b.n	8009834 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800974e:	7bbb      	ldrb	r3, [r7, #14]
 8009750:	2b04      	cmp	r3, #4
 8009752:	d103      	bne.n	800975c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	220b      	movs	r2, #11
 8009758:	761a      	strb	r2, [r3, #24]
      break;
 800975a:	e06b      	b.n	8009834 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800975c:	7bbb      	ldrb	r3, [r7, #14]
 800975e:	2b05      	cmp	r3, #5
 8009760:	d168      	bne.n	8009834 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009762:	2303      	movs	r3, #3
 8009764:	73fb      	strb	r3, [r7, #15]
      break;
 8009766:	e065      	b.n	8009834 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	795b      	ldrb	r3, [r3, #5]
 800976c:	2201      	movs	r2, #1
 800976e:	9200      	str	r2, [sp, #0]
 8009770:	2200      	movs	r2, #0
 8009772:	2100      	movs	r1, #0
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f87f 	bl	8009878 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009780:	b29a      	uxth	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	220a      	movs	r2, #10
 800978a:	761a      	strb	r2, [r3, #24]
      break;
 800978c:	e055      	b.n	800983a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	795b      	ldrb	r3, [r3, #5]
 8009792:	4619      	mov	r1, r3
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 fbe1 	bl	8009f5c <USBH_LL_GetURBState>
 800979a:	4603      	mov	r3, r0
 800979c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800979e:	7bbb      	ldrb	r3, [r7, #14]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d105      	bne.n	80097b0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	220d      	movs	r2, #13
 80097ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80097ae:	e043      	b.n	8009838 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80097b0:	7bbb      	ldrb	r3, [r7, #14]
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d103      	bne.n	80097be <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2209      	movs	r2, #9
 80097ba:	761a      	strb	r2, [r3, #24]
      break;
 80097bc:	e03c      	b.n	8009838 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80097be:	7bbb      	ldrb	r3, [r7, #14]
 80097c0:	2b04      	cmp	r3, #4
 80097c2:	d139      	bne.n	8009838 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	220b      	movs	r2, #11
 80097c8:	761a      	strb	r2, [r3, #24]
      break;
 80097ca:	e035      	b.n	8009838 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	7e5b      	ldrb	r3, [r3, #25]
 80097d0:	3301      	adds	r3, #1
 80097d2:	b2da      	uxtb	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	765a      	strb	r2, [r3, #25]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	7e5b      	ldrb	r3, [r3, #25]
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d806      	bhi.n	80097ee <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80097ec:	e025      	b.n	800983a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80097f4:	2106      	movs	r1, #6
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	795b      	ldrb	r3, [r3, #5]
 8009804:	4619      	mov	r1, r3
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f90c 	bl	8009a24 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	791b      	ldrb	r3, [r3, #4]
 8009810:	4619      	mov	r1, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 f906 	bl	8009a24 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800981e:	2302      	movs	r3, #2
 8009820:	73fb      	strb	r3, [r7, #15]
      break;
 8009822:	e00a      	b.n	800983a <USBH_HandleControl+0x2de>

    default:
      break;
 8009824:	bf00      	nop
 8009826:	e008      	b.n	800983a <USBH_HandleControl+0x2de>
      break;
 8009828:	bf00      	nop
 800982a:	e006      	b.n	800983a <USBH_HandleControl+0x2de>
      break;
 800982c:	bf00      	nop
 800982e:	e004      	b.n	800983a <USBH_HandleControl+0x2de>
      break;
 8009830:	bf00      	nop
 8009832:	e002      	b.n	800983a <USBH_HandleControl+0x2de>
      break;
 8009834:	bf00      	nop
 8009836:	e000      	b.n	800983a <USBH_HandleControl+0x2de>
      break;
 8009838:	bf00      	nop
  }

  return status;
 800983a:	7bfb      	ldrb	r3, [r7, #15]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b088      	sub	sp, #32
 8009848:	af04      	add	r7, sp, #16
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	4613      	mov	r3, r2
 8009850:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009852:	79f9      	ldrb	r1, [r7, #7]
 8009854:	2300      	movs	r3, #0
 8009856:	9303      	str	r3, [sp, #12]
 8009858:	2308      	movs	r3, #8
 800985a:	9302      	str	r3, [sp, #8]
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	9301      	str	r3, [sp, #4]
 8009860:	2300      	movs	r3, #0
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	2300      	movs	r3, #0
 8009866:	2200      	movs	r2, #0
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f000 fb46 	bl	8009efa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b088      	sub	sp, #32
 800987c:	af04      	add	r7, sp, #16
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	4611      	mov	r1, r2
 8009884:	461a      	mov	r2, r3
 8009886:	460b      	mov	r3, r1
 8009888:	80fb      	strh	r3, [r7, #6]
 800988a:	4613      	mov	r3, r2
 800988c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009894:	2b00      	cmp	r3, #0
 8009896:	d001      	beq.n	800989c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009898:	2300      	movs	r3, #0
 800989a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800989c:	7979      	ldrb	r1, [r7, #5]
 800989e:	7e3b      	ldrb	r3, [r7, #24]
 80098a0:	9303      	str	r3, [sp, #12]
 80098a2:	88fb      	ldrh	r3, [r7, #6]
 80098a4:	9302      	str	r3, [sp, #8]
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	9301      	str	r3, [sp, #4]
 80098aa:	2301      	movs	r3, #1
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	2300      	movs	r3, #0
 80098b0:	2200      	movs	r2, #0
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f000 fb21 	bl	8009efa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b088      	sub	sp, #32
 80098c6:	af04      	add	r7, sp, #16
 80098c8:	60f8      	str	r0, [r7, #12]
 80098ca:	60b9      	str	r1, [r7, #8]
 80098cc:	4611      	mov	r1, r2
 80098ce:	461a      	mov	r2, r3
 80098d0:	460b      	mov	r3, r1
 80098d2:	80fb      	strh	r3, [r7, #6]
 80098d4:	4613      	mov	r3, r2
 80098d6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80098d8:	7979      	ldrb	r1, [r7, #5]
 80098da:	2300      	movs	r3, #0
 80098dc:	9303      	str	r3, [sp, #12]
 80098de:	88fb      	ldrh	r3, [r7, #6]
 80098e0:	9302      	str	r3, [sp, #8]
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	9301      	str	r3, [sp, #4]
 80098e6:	2301      	movs	r3, #1
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	2300      	movs	r3, #0
 80098ec:	2201      	movs	r2, #1
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f000 fb03 	bl	8009efa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80098f4:	2300      	movs	r3, #0

}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80098fe:	b580      	push	{r7, lr}
 8009900:	b088      	sub	sp, #32
 8009902:	af04      	add	r7, sp, #16
 8009904:	60f8      	str	r0, [r7, #12]
 8009906:	60b9      	str	r1, [r7, #8]
 8009908:	4611      	mov	r1, r2
 800990a:	461a      	mov	r2, r3
 800990c:	460b      	mov	r3, r1
 800990e:	80fb      	strh	r3, [r7, #6]
 8009910:	4613      	mov	r3, r2
 8009912:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800991a:	2b00      	cmp	r3, #0
 800991c:	d001      	beq.n	8009922 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800991e:	2300      	movs	r3, #0
 8009920:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009922:	7979      	ldrb	r1, [r7, #5]
 8009924:	7e3b      	ldrb	r3, [r7, #24]
 8009926:	9303      	str	r3, [sp, #12]
 8009928:	88fb      	ldrh	r3, [r7, #6]
 800992a:	9302      	str	r3, [sp, #8]
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	9301      	str	r3, [sp, #4]
 8009930:	2301      	movs	r3, #1
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	2302      	movs	r3, #2
 8009936:	2200      	movs	r2, #0
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f000 fade 	bl	8009efa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b088      	sub	sp, #32
 800994c:	af04      	add	r7, sp, #16
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	4611      	mov	r1, r2
 8009954:	461a      	mov	r2, r3
 8009956:	460b      	mov	r3, r1
 8009958:	80fb      	strh	r3, [r7, #6]
 800995a:	4613      	mov	r3, r2
 800995c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800995e:	7979      	ldrb	r1, [r7, #5]
 8009960:	2300      	movs	r3, #0
 8009962:	9303      	str	r3, [sp, #12]
 8009964:	88fb      	ldrh	r3, [r7, #6]
 8009966:	9302      	str	r3, [sp, #8]
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	9301      	str	r3, [sp, #4]
 800996c:	2301      	movs	r3, #1
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	2302      	movs	r3, #2
 8009972:	2201      	movs	r2, #1
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f000 fac0 	bl	8009efa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af04      	add	r7, sp, #16
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	4608      	mov	r0, r1
 800998e:	4611      	mov	r1, r2
 8009990:	461a      	mov	r2, r3
 8009992:	4603      	mov	r3, r0
 8009994:	70fb      	strb	r3, [r7, #3]
 8009996:	460b      	mov	r3, r1
 8009998:	70bb      	strb	r3, [r7, #2]
 800999a:	4613      	mov	r3, r2
 800999c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800999e:	7878      	ldrb	r0, [r7, #1]
 80099a0:	78ba      	ldrb	r2, [r7, #2]
 80099a2:	78f9      	ldrb	r1, [r7, #3]
 80099a4:	8b3b      	ldrh	r3, [r7, #24]
 80099a6:	9302      	str	r3, [sp, #8]
 80099a8:	7d3b      	ldrb	r3, [r7, #20]
 80099aa:	9301      	str	r3, [sp, #4]
 80099ac:	7c3b      	ldrb	r3, [r7, #16]
 80099ae:	9300      	str	r3, [sp, #0]
 80099b0:	4603      	mov	r3, r0
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fa53 	bl	8009e5e <USBH_LL_OpenPipe>

  return USBH_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b082      	sub	sp, #8
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	460b      	mov	r3, r1
 80099cc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80099ce:	78fb      	ldrb	r3, [r7, #3]
 80099d0:	4619      	mov	r1, r3
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fa72 	bl	8009ebc <USBH_LL_ClosePipe>

  return USBH_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b084      	sub	sp, #16
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	460b      	mov	r3, r1
 80099ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f836 	bl	8009a60 <USBH_GetFreePipe>
 80099f4:	4603      	mov	r3, r0
 80099f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80099f8:	89fb      	ldrh	r3, [r7, #14]
 80099fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d00a      	beq.n	8009a18 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009a02:	78fa      	ldrb	r2, [r7, #3]
 8009a04:	89fb      	ldrh	r3, [r7, #14]
 8009a06:	f003 030f 	and.w	r3, r3, #15
 8009a0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009a0e:	6879      	ldr	r1, [r7, #4]
 8009a10:	33e0      	adds	r3, #224	@ 0xe0
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	440b      	add	r3, r1
 8009a16:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009a18:	89fb      	ldrh	r3, [r7, #14]
 8009a1a:	b2db      	uxtb	r3, r3
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009a30:	78fb      	ldrb	r3, [r7, #3]
 8009a32:	2b0f      	cmp	r3, #15
 8009a34:	d80d      	bhi.n	8009a52 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009a36:	78fb      	ldrb	r3, [r7, #3]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	33e0      	adds	r3, #224	@ 0xe0
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	4413      	add	r3, r2
 8009a40:	685a      	ldr	r2, [r3, #4]
 8009a42:	78fb      	ldrb	r3, [r7, #3]
 8009a44:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	33e0      	adds	r3, #224	@ 0xe0
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	440b      	add	r3, r1
 8009a50:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73fb      	strb	r3, [r7, #15]
 8009a70:	e00f      	b.n	8009a92 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	33e0      	adds	r3, #224	@ 0xe0
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d102      	bne.n	8009a8c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	e007      	b.n	8009a9c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	73fb      	strb	r3, [r7, #15]
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
 8009a94:	2b0f      	cmp	r3, #15
 8009a96:	d9ec      	bls.n	8009a72 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009a98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3714      	adds	r7, #20
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009aac:	2201      	movs	r2, #1
 8009aae:	490e      	ldr	r1, [pc, #56]	@ (8009ae8 <MX_USB_HOST_Init+0x40>)
 8009ab0:	480e      	ldr	r0, [pc, #56]	@ (8009aec <MX_USB_HOST_Init+0x44>)
 8009ab2:	f7fe fb15 	bl	80080e0 <USBH_Init>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d001      	beq.n	8009ac0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009abc:	f7f6 ffb6 	bl	8000a2c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009ac0:	490b      	ldr	r1, [pc, #44]	@ (8009af0 <MX_USB_HOST_Init+0x48>)
 8009ac2:	480a      	ldr	r0, [pc, #40]	@ (8009aec <MX_USB_HOST_Init+0x44>)
 8009ac4:	f7fe fbb9 	bl	800823a <USBH_RegisterClass>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d001      	beq.n	8009ad2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009ace:	f7f6 ffad 	bl	8000a2c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009ad2:	4806      	ldr	r0, [pc, #24]	@ (8009aec <MX_USB_HOST_Init+0x44>)
 8009ad4:	f7fe fc3d 	bl	8008352 <USBH_Start>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d001      	beq.n	8009ae2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009ade:	f7f6 ffa5 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009ae2:	bf00      	nop
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	08009b09 	.word	0x08009b09
 8009aec:	2000021c 	.word	0x2000021c
 8009af0:	2000000c 	.word	0x2000000c

08009af4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009af8:	4802      	ldr	r0, [pc, #8]	@ (8009b04 <MX_USB_HOST_Process+0x10>)
 8009afa:	f7fe fc3b 	bl	8008374 <USBH_Process>
}
 8009afe:	bf00      	nop
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	2000021c 	.word	0x2000021c

08009b08 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009b14:	78fb      	ldrb	r3, [r7, #3]
 8009b16:	3b01      	subs	r3, #1
 8009b18:	2b04      	cmp	r3, #4
 8009b1a:	d819      	bhi.n	8009b50 <USBH_UserProcess+0x48>
 8009b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8009b24 <USBH_UserProcess+0x1c>)
 8009b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b22:	bf00      	nop
 8009b24:	08009b51 	.word	0x08009b51
 8009b28:	08009b41 	.word	0x08009b41
 8009b2c:	08009b51 	.word	0x08009b51
 8009b30:	08009b49 	.word	0x08009b49
 8009b34:	08009b39 	.word	0x08009b39
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009b38:	4b09      	ldr	r3, [pc, #36]	@ (8009b60 <USBH_UserProcess+0x58>)
 8009b3a:	2203      	movs	r2, #3
 8009b3c:	701a      	strb	r2, [r3, #0]
  break;
 8009b3e:	e008      	b.n	8009b52 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009b40:	4b07      	ldr	r3, [pc, #28]	@ (8009b60 <USBH_UserProcess+0x58>)
 8009b42:	2202      	movs	r2, #2
 8009b44:	701a      	strb	r2, [r3, #0]
  break;
 8009b46:	e004      	b.n	8009b52 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009b48:	4b05      	ldr	r3, [pc, #20]	@ (8009b60 <USBH_UserProcess+0x58>)
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	701a      	strb	r2, [r3, #0]
  break;
 8009b4e:	e000      	b.n	8009b52 <USBH_UserProcess+0x4a>

  default:
  break;
 8009b50:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009b52:	bf00      	nop
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	200005f4 	.word	0x200005f4

08009b64 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b08a      	sub	sp, #40	@ 0x28
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b6c:	f107 0314 	add.w	r3, r7, #20
 8009b70:	2200      	movs	r2, #0
 8009b72:	601a      	str	r2, [r3, #0]
 8009b74:	605a      	str	r2, [r3, #4]
 8009b76:	609a      	str	r2, [r3, #8]
 8009b78:	60da      	str	r2, [r3, #12]
 8009b7a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b84:	d147      	bne.n	8009c16 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b86:	2300      	movs	r3, #0
 8009b88:	613b      	str	r3, [r7, #16]
 8009b8a:	4b25      	ldr	r3, [pc, #148]	@ (8009c20 <HAL_HCD_MspInit+0xbc>)
 8009b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b8e:	4a24      	ldr	r2, [pc, #144]	@ (8009c20 <HAL_HCD_MspInit+0xbc>)
 8009b90:	f043 0301 	orr.w	r3, r3, #1
 8009b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b96:	4b22      	ldr	r3, [pc, #136]	@ (8009c20 <HAL_HCD_MspInit+0xbc>)
 8009b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b9a:	f003 0301 	and.w	r3, r3, #1
 8009b9e:	613b      	str	r3, [r7, #16]
 8009ba0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009ba2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bac:	2300      	movs	r3, #0
 8009bae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009bb0:	f107 0314 	add.w	r3, r7, #20
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	481b      	ldr	r0, [pc, #108]	@ (8009c24 <HAL_HCD_MspInit+0xc0>)
 8009bb8:	f7f7 face 	bl	8001158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009bbc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009bce:	230a      	movs	r3, #10
 8009bd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bd2:	f107 0314 	add.w	r3, r7, #20
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4812      	ldr	r0, [pc, #72]	@ (8009c24 <HAL_HCD_MspInit+0xc0>)
 8009bda:	f7f7 fabd 	bl	8001158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009bde:	4b10      	ldr	r3, [pc, #64]	@ (8009c20 <HAL_HCD_MspInit+0xbc>)
 8009be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009be2:	4a0f      	ldr	r2, [pc, #60]	@ (8009c20 <HAL_HCD_MspInit+0xbc>)
 8009be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009be8:	6353      	str	r3, [r2, #52]	@ 0x34
 8009bea:	2300      	movs	r3, #0
 8009bec:	60fb      	str	r3, [r7, #12]
 8009bee:	4b0c      	ldr	r3, [pc, #48]	@ (8009c20 <HAL_HCD_MspInit+0xbc>)
 8009bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bf2:	4a0b      	ldr	r2, [pc, #44]	@ (8009c20 <HAL_HCD_MspInit+0xbc>)
 8009bf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8009bfa:	4b09      	ldr	r3, [pc, #36]	@ (8009c20 <HAL_HCD_MspInit+0xbc>)
 8009bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c06:	2200      	movs	r2, #0
 8009c08:	2100      	movs	r1, #0
 8009c0a:	2043      	movs	r0, #67	@ 0x43
 8009c0c:	f7f7 fa6d 	bl	80010ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c10:	2043      	movs	r0, #67	@ 0x43
 8009c12:	f7f7 fa86 	bl	8001122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c16:	bf00      	nop
 8009c18:	3728      	adds	r7, #40	@ 0x28
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	40023800 	.word	0x40023800
 8009c24:	40020000 	.word	0x40020000

08009c28 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fe ff73 	bl	8008b22 <USBH_LL_IncTimer>
}
 8009c3c:	bf00      	nop
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fe ffab 	bl	8008bae <USBH_LL_Connect>
}
 8009c58:	bf00      	nop
 8009c5a:	3708      	adds	r7, #8
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fe ffb4 	bl	8008bdc <USBH_LL_Disconnect>
}
 8009c74:	bf00      	nop
 8009c76:	3708      	adds	r7, #8
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	460b      	mov	r3, r1
 8009c86:	70fb      	strb	r3, [r7, #3]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009c8c:	bf00      	nop
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fe ff65 	bl	8008b76 <USBH_LL_PortEnabled>
}
 8009cac:	bf00      	nop
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fe ff65 	bl	8008b92 <USBH_LL_PortDisabled>
}
 8009cc8:	bf00      	nop
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d12a      	bne.n	8009d38 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009ce2:	4a18      	ldr	r2, [pc, #96]	@ (8009d44 <USBH_LL_Init+0x74>)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a15      	ldr	r2, [pc, #84]	@ (8009d44 <USBH_LL_Init+0x74>)
 8009cee:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009cf2:	4b14      	ldr	r3, [pc, #80]	@ (8009d44 <USBH_LL_Init+0x74>)
 8009cf4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009cf8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009cfa:	4b12      	ldr	r3, [pc, #72]	@ (8009d44 <USBH_LL_Init+0x74>)
 8009cfc:	2208      	movs	r2, #8
 8009cfe:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009d00:	4b10      	ldr	r3, [pc, #64]	@ (8009d44 <USBH_LL_Init+0x74>)
 8009d02:	2201      	movs	r2, #1
 8009d04:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d06:	4b0f      	ldr	r3, [pc, #60]	@ (8009d44 <USBH_LL_Init+0x74>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d44 <USBH_LL_Init+0x74>)
 8009d0e:	2202      	movs	r2, #2
 8009d10:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d12:	4b0c      	ldr	r3, [pc, #48]	@ (8009d44 <USBH_LL_Init+0x74>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009d18:	480a      	ldr	r0, [pc, #40]	@ (8009d44 <USBH_LL_Init+0x74>)
 8009d1a:	f7f7 fbd2 	bl	80014c2 <HAL_HCD_Init>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009d24:	f7f6 fe82 	bl	8000a2c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009d28:	4806      	ldr	r0, [pc, #24]	@ (8009d44 <USBH_LL_Init+0x74>)
 8009d2a:	f7f8 f833 	bl	8001d94 <HAL_HCD_GetCurrentFrame>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	4619      	mov	r1, r3
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f7fe fee6 	bl	8008b04 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	200005f8 	.word	0x200005f8

08009d48 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d50:	2300      	movs	r3, #0
 8009d52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d54:	2300      	movs	r3, #0
 8009d56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7f7 ffa0 	bl	8001ca4 <HAL_HCD_Start>
 8009d64:	4603      	mov	r3, r0
 8009d66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f000 f95e 	bl	800a02c <USBH_Get_USB_Status>
 8009d70:	4603      	mov	r3, r0
 8009d72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d74:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b084      	sub	sp, #16
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7f7 ffa8 	bl	8001cea <HAL_HCD_Stop>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d9e:	7bfb      	ldrb	r3, [r7, #15]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 f943 	bl	800a02c <USBH_Get_USB_Status>
 8009da6:	4603      	mov	r3, r0
 8009da8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009daa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7f7 fff2 	bl	8001db0 <HAL_HCD_GetCurrentSpeed>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d00c      	beq.n	8009dec <USBH_LL_GetSpeed+0x38>
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	d80d      	bhi.n	8009df2 <USBH_LL_GetSpeed+0x3e>
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d002      	beq.n	8009de0 <USBH_LL_GetSpeed+0x2c>
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d003      	beq.n	8009de6 <USBH_LL_GetSpeed+0x32>
 8009dde:	e008      	b.n	8009df2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009de0:	2300      	movs	r3, #0
 8009de2:	73fb      	strb	r3, [r7, #15]
    break;
 8009de4:	e008      	b.n	8009df8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009de6:	2301      	movs	r3, #1
 8009de8:	73fb      	strb	r3, [r7, #15]
    break;
 8009dea:	e005      	b.n	8009df8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009dec:	2302      	movs	r3, #2
 8009dee:	73fb      	strb	r3, [r7, #15]
    break;
 8009df0:	e002      	b.n	8009df8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009df2:	2301      	movs	r3, #1
 8009df4:	73fb      	strb	r3, [r7, #15]
    break;
 8009df6:	bf00      	nop
  }
  return  speed;
 8009df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b084      	sub	sp, #16
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7f7 ff83 	bl	8001d24 <HAL_HCD_ResetPort>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e22:	7bfb      	ldrb	r3, [r7, #15]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f000 f901 	bl	800a02c <USBH_Get_USB_Status>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	460b      	mov	r3, r1
 8009e42:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e4a:	78fa      	ldrb	r2, [r7, #3]
 8009e4c:	4611      	mov	r1, r2
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7f7 ff8b 	bl	8001d6a <HAL_HCD_HC_GetXferCount>
 8009e54:	4603      	mov	r3, r0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3708      	adds	r7, #8
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009e5e:	b590      	push	{r4, r7, lr}
 8009e60:	b089      	sub	sp, #36	@ 0x24
 8009e62:	af04      	add	r7, sp, #16
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	4608      	mov	r0, r1
 8009e68:	4611      	mov	r1, r2
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	70fb      	strb	r3, [r7, #3]
 8009e70:	460b      	mov	r3, r1
 8009e72:	70bb      	strb	r3, [r7, #2]
 8009e74:	4613      	mov	r3, r2
 8009e76:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009e86:	787c      	ldrb	r4, [r7, #1]
 8009e88:	78ba      	ldrb	r2, [r7, #2]
 8009e8a:	78f9      	ldrb	r1, [r7, #3]
 8009e8c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009e8e:	9302      	str	r3, [sp, #8]
 8009e90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009e94:	9301      	str	r3, [sp, #4]
 8009e96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	4623      	mov	r3, r4
 8009e9e:	f7f7 fb77 	bl	8001590 <HAL_HCD_HC_Init>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ea6:	7bfb      	ldrb	r3, [r7, #15]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f000 f8bf 	bl	800a02c <USBH_Get_USB_Status>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd90      	pop	{r4, r7, pc}

08009ebc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009ed6:	78fa      	ldrb	r2, [r7, #3]
 8009ed8:	4611      	mov	r1, r2
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7f7 fc10 	bl	8001700 <HAL_HCD_HC_Halt>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ee4:	7bfb      	ldrb	r3, [r7, #15]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f000 f8a0 	bl	800a02c <USBH_Get_USB_Status>
 8009eec:	4603      	mov	r3, r0
 8009eee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ef0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009efa:	b590      	push	{r4, r7, lr}
 8009efc:	b089      	sub	sp, #36	@ 0x24
 8009efe:	af04      	add	r7, sp, #16
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	4608      	mov	r0, r1
 8009f04:	4611      	mov	r1, r2
 8009f06:	461a      	mov	r2, r3
 8009f08:	4603      	mov	r3, r0
 8009f0a:	70fb      	strb	r3, [r7, #3]
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	70bb      	strb	r3, [r7, #2]
 8009f10:	4613      	mov	r3, r2
 8009f12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f14:	2300      	movs	r3, #0
 8009f16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009f22:	787c      	ldrb	r4, [r7, #1]
 8009f24:	78ba      	ldrb	r2, [r7, #2]
 8009f26:	78f9      	ldrb	r1, [r7, #3]
 8009f28:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009f2c:	9303      	str	r3, [sp, #12]
 8009f2e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009f30:	9302      	str	r3, [sp, #8]
 8009f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f34:	9301      	str	r3, [sp, #4]
 8009f36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	4623      	mov	r3, r4
 8009f3e:	f7f7 fc03 	bl	8001748 <HAL_HCD_HC_SubmitRequest>
 8009f42:	4603      	mov	r3, r0
 8009f44:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f000 f86f 	bl	800a02c <USBH_Get_USB_Status>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f52:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd90      	pop	{r4, r7, pc}

08009f5c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	460b      	mov	r3, r1
 8009f66:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009f6e:	78fa      	ldrb	r2, [r7, #3]
 8009f70:	4611      	mov	r1, r2
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7f7 fee4 	bl	8001d40 <HAL_HCD_HC_GetURBState>
 8009f78:	4603      	mov	r3, r0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b082      	sub	sp, #8
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d103      	bne.n	8009fa0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009f98:	78fb      	ldrb	r3, [r7, #3]
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f000 f872 	bl	800a084 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009fa0:	20c8      	movs	r0, #200	@ 0xc8
 8009fa2:	f7fc fe29 	bl	8006bf8 <HAL_Delay>
  return USBH_OK;
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	70fb      	strb	r3, [r7, #3]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009fc6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009fc8:	78fa      	ldrb	r2, [r7, #3]
 8009fca:	68f9      	ldr	r1, [r7, #12]
 8009fcc:	4613      	mov	r3, r2
 8009fce:	011b      	lsls	r3, r3, #4
 8009fd0:	1a9b      	subs	r3, r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	440b      	add	r3, r1
 8009fd6:	3317      	adds	r3, #23
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00a      	beq.n	8009ff4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009fde:	78fa      	ldrb	r2, [r7, #3]
 8009fe0:	68f9      	ldr	r1, [r7, #12]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	011b      	lsls	r3, r3, #4
 8009fe6:	1a9b      	subs	r3, r3, r2
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	440b      	add	r3, r1
 8009fec:	333c      	adds	r3, #60	@ 0x3c
 8009fee:	78ba      	ldrb	r2, [r7, #2]
 8009ff0:	701a      	strb	r2, [r3, #0]
 8009ff2:	e009      	b.n	800a008 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009ff4:	78fa      	ldrb	r2, [r7, #3]
 8009ff6:	68f9      	ldr	r1, [r7, #12]
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	011b      	lsls	r3, r3, #4
 8009ffc:	1a9b      	subs	r3, r3, r2
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	440b      	add	r3, r1
 800a002:	333d      	adds	r3, #61	@ 0x3d
 800a004:	78ba      	ldrb	r2, [r7, #2]
 800a006:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3714      	adds	r7, #20
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr

0800a016 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b082      	sub	sp, #8
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f7fc fdea 	bl	8006bf8 <HAL_Delay>
}
 800a024:	bf00      	nop
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	4603      	mov	r3, r0
 800a034:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a036:	2300      	movs	r3, #0
 800a038:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a03a:	79fb      	ldrb	r3, [r7, #7]
 800a03c:	2b03      	cmp	r3, #3
 800a03e:	d817      	bhi.n	800a070 <USBH_Get_USB_Status+0x44>
 800a040:	a201      	add	r2, pc, #4	@ (adr r2, 800a048 <USBH_Get_USB_Status+0x1c>)
 800a042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a046:	bf00      	nop
 800a048:	0800a059 	.word	0x0800a059
 800a04c:	0800a05f 	.word	0x0800a05f
 800a050:	0800a065 	.word	0x0800a065
 800a054:	0800a06b 	.word	0x0800a06b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a058:	2300      	movs	r3, #0
 800a05a:	73fb      	strb	r3, [r7, #15]
    break;
 800a05c:	e00b      	b.n	800a076 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a05e:	2302      	movs	r3, #2
 800a060:	73fb      	strb	r3, [r7, #15]
    break;
 800a062:	e008      	b.n	800a076 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a064:	2301      	movs	r3, #1
 800a066:	73fb      	strb	r3, [r7, #15]
    break;
 800a068:	e005      	b.n	800a076 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a06a:	2302      	movs	r3, #2
 800a06c:	73fb      	strb	r3, [r7, #15]
    break;
 800a06e:	e002      	b.n	800a076 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a070:	2302      	movs	r3, #2
 800a072:	73fb      	strb	r3, [r7, #15]
    break;
 800a074:	bf00      	nop
  }
  return usb_status;
 800a076:	7bfb      	ldrb	r3, [r7, #15]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3714      	adds	r7, #20
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	4603      	mov	r3, r0
 800a08c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a08e:	79fb      	ldrb	r3, [r7, #7]
 800a090:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a092:	79fb      	ldrb	r3, [r7, #7]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d102      	bne.n	800a09e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a098:	2300      	movs	r3, #0
 800a09a:	73fb      	strb	r3, [r7, #15]
 800a09c:	e001      	b.n	800a0a2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a0a2:	7bfb      	ldrb	r3, [r7, #15]
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	2101      	movs	r1, #1
 800a0a8:	4803      	ldr	r0, [pc, #12]	@ (800a0b8 <MX_DriverVbusFS+0x34>)
 800a0aa:	f7f7 f9f1 	bl	8001490 <HAL_GPIO_WritePin>
}
 800a0ae:	bf00      	nop
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	40020800 	.word	0x40020800

0800a0bc <malloc>:
 800a0bc:	4b02      	ldr	r3, [pc, #8]	@ (800a0c8 <malloc+0xc>)
 800a0be:	4601      	mov	r1, r0
 800a0c0:	6818      	ldr	r0, [r3, #0]
 800a0c2:	f000 b82d 	b.w	800a120 <_malloc_r>
 800a0c6:	bf00      	nop
 800a0c8:	2000002c 	.word	0x2000002c

0800a0cc <free>:
 800a0cc:	4b02      	ldr	r3, [pc, #8]	@ (800a0d8 <free+0xc>)
 800a0ce:	4601      	mov	r1, r0
 800a0d0:	6818      	ldr	r0, [r3, #0]
 800a0d2:	f000 b8f5 	b.w	800a2c0 <_free_r>
 800a0d6:	bf00      	nop
 800a0d8:	2000002c 	.word	0x2000002c

0800a0dc <sbrk_aligned>:
 800a0dc:	b570      	push	{r4, r5, r6, lr}
 800a0de:	4e0f      	ldr	r6, [pc, #60]	@ (800a11c <sbrk_aligned+0x40>)
 800a0e0:	460c      	mov	r4, r1
 800a0e2:	6831      	ldr	r1, [r6, #0]
 800a0e4:	4605      	mov	r5, r0
 800a0e6:	b911      	cbnz	r1, 800a0ee <sbrk_aligned+0x12>
 800a0e8:	f000 f8ae 	bl	800a248 <_sbrk_r>
 800a0ec:	6030      	str	r0, [r6, #0]
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	f000 f8a9 	bl	800a248 <_sbrk_r>
 800a0f6:	1c43      	adds	r3, r0, #1
 800a0f8:	d103      	bne.n	800a102 <sbrk_aligned+0x26>
 800a0fa:	f04f 34ff 	mov.w	r4, #4294967295
 800a0fe:	4620      	mov	r0, r4
 800a100:	bd70      	pop	{r4, r5, r6, pc}
 800a102:	1cc4      	adds	r4, r0, #3
 800a104:	f024 0403 	bic.w	r4, r4, #3
 800a108:	42a0      	cmp	r0, r4
 800a10a:	d0f8      	beq.n	800a0fe <sbrk_aligned+0x22>
 800a10c:	1a21      	subs	r1, r4, r0
 800a10e:	4628      	mov	r0, r5
 800a110:	f000 f89a 	bl	800a248 <_sbrk_r>
 800a114:	3001      	adds	r0, #1
 800a116:	d1f2      	bne.n	800a0fe <sbrk_aligned+0x22>
 800a118:	e7ef      	b.n	800a0fa <sbrk_aligned+0x1e>
 800a11a:	bf00      	nop
 800a11c:	200009d8 	.word	0x200009d8

0800a120 <_malloc_r>:
 800a120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a124:	1ccd      	adds	r5, r1, #3
 800a126:	f025 0503 	bic.w	r5, r5, #3
 800a12a:	3508      	adds	r5, #8
 800a12c:	2d0c      	cmp	r5, #12
 800a12e:	bf38      	it	cc
 800a130:	250c      	movcc	r5, #12
 800a132:	2d00      	cmp	r5, #0
 800a134:	4606      	mov	r6, r0
 800a136:	db01      	blt.n	800a13c <_malloc_r+0x1c>
 800a138:	42a9      	cmp	r1, r5
 800a13a:	d904      	bls.n	800a146 <_malloc_r+0x26>
 800a13c:	230c      	movs	r3, #12
 800a13e:	6033      	str	r3, [r6, #0]
 800a140:	2000      	movs	r0, #0
 800a142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a146:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a21c <_malloc_r+0xfc>
 800a14a:	f000 f869 	bl	800a220 <__malloc_lock>
 800a14e:	f8d8 3000 	ldr.w	r3, [r8]
 800a152:	461c      	mov	r4, r3
 800a154:	bb44      	cbnz	r4, 800a1a8 <_malloc_r+0x88>
 800a156:	4629      	mov	r1, r5
 800a158:	4630      	mov	r0, r6
 800a15a:	f7ff ffbf 	bl	800a0dc <sbrk_aligned>
 800a15e:	1c43      	adds	r3, r0, #1
 800a160:	4604      	mov	r4, r0
 800a162:	d158      	bne.n	800a216 <_malloc_r+0xf6>
 800a164:	f8d8 4000 	ldr.w	r4, [r8]
 800a168:	4627      	mov	r7, r4
 800a16a:	2f00      	cmp	r7, #0
 800a16c:	d143      	bne.n	800a1f6 <_malloc_r+0xd6>
 800a16e:	2c00      	cmp	r4, #0
 800a170:	d04b      	beq.n	800a20a <_malloc_r+0xea>
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	4639      	mov	r1, r7
 800a176:	4630      	mov	r0, r6
 800a178:	eb04 0903 	add.w	r9, r4, r3
 800a17c:	f000 f864 	bl	800a248 <_sbrk_r>
 800a180:	4581      	cmp	r9, r0
 800a182:	d142      	bne.n	800a20a <_malloc_r+0xea>
 800a184:	6821      	ldr	r1, [r4, #0]
 800a186:	1a6d      	subs	r5, r5, r1
 800a188:	4629      	mov	r1, r5
 800a18a:	4630      	mov	r0, r6
 800a18c:	f7ff ffa6 	bl	800a0dc <sbrk_aligned>
 800a190:	3001      	adds	r0, #1
 800a192:	d03a      	beq.n	800a20a <_malloc_r+0xea>
 800a194:	6823      	ldr	r3, [r4, #0]
 800a196:	442b      	add	r3, r5
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	f8d8 3000 	ldr.w	r3, [r8]
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	bb62      	cbnz	r2, 800a1fc <_malloc_r+0xdc>
 800a1a2:	f8c8 7000 	str.w	r7, [r8]
 800a1a6:	e00f      	b.n	800a1c8 <_malloc_r+0xa8>
 800a1a8:	6822      	ldr	r2, [r4, #0]
 800a1aa:	1b52      	subs	r2, r2, r5
 800a1ac:	d420      	bmi.n	800a1f0 <_malloc_r+0xd0>
 800a1ae:	2a0b      	cmp	r2, #11
 800a1b0:	d917      	bls.n	800a1e2 <_malloc_r+0xc2>
 800a1b2:	1961      	adds	r1, r4, r5
 800a1b4:	42a3      	cmp	r3, r4
 800a1b6:	6025      	str	r5, [r4, #0]
 800a1b8:	bf18      	it	ne
 800a1ba:	6059      	strne	r1, [r3, #4]
 800a1bc:	6863      	ldr	r3, [r4, #4]
 800a1be:	bf08      	it	eq
 800a1c0:	f8c8 1000 	streq.w	r1, [r8]
 800a1c4:	5162      	str	r2, [r4, r5]
 800a1c6:	604b      	str	r3, [r1, #4]
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	f000 f82f 	bl	800a22c <__malloc_unlock>
 800a1ce:	f104 000b 	add.w	r0, r4, #11
 800a1d2:	1d23      	adds	r3, r4, #4
 800a1d4:	f020 0007 	bic.w	r0, r0, #7
 800a1d8:	1ac2      	subs	r2, r0, r3
 800a1da:	bf1c      	itt	ne
 800a1dc:	1a1b      	subne	r3, r3, r0
 800a1de:	50a3      	strne	r3, [r4, r2]
 800a1e0:	e7af      	b.n	800a142 <_malloc_r+0x22>
 800a1e2:	6862      	ldr	r2, [r4, #4]
 800a1e4:	42a3      	cmp	r3, r4
 800a1e6:	bf0c      	ite	eq
 800a1e8:	f8c8 2000 	streq.w	r2, [r8]
 800a1ec:	605a      	strne	r2, [r3, #4]
 800a1ee:	e7eb      	b.n	800a1c8 <_malloc_r+0xa8>
 800a1f0:	4623      	mov	r3, r4
 800a1f2:	6864      	ldr	r4, [r4, #4]
 800a1f4:	e7ae      	b.n	800a154 <_malloc_r+0x34>
 800a1f6:	463c      	mov	r4, r7
 800a1f8:	687f      	ldr	r7, [r7, #4]
 800a1fa:	e7b6      	b.n	800a16a <_malloc_r+0x4a>
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	42a3      	cmp	r3, r4
 800a202:	d1fb      	bne.n	800a1fc <_malloc_r+0xdc>
 800a204:	2300      	movs	r3, #0
 800a206:	6053      	str	r3, [r2, #4]
 800a208:	e7de      	b.n	800a1c8 <_malloc_r+0xa8>
 800a20a:	230c      	movs	r3, #12
 800a20c:	6033      	str	r3, [r6, #0]
 800a20e:	4630      	mov	r0, r6
 800a210:	f000 f80c 	bl	800a22c <__malloc_unlock>
 800a214:	e794      	b.n	800a140 <_malloc_r+0x20>
 800a216:	6005      	str	r5, [r0, #0]
 800a218:	e7d6      	b.n	800a1c8 <_malloc_r+0xa8>
 800a21a:	bf00      	nop
 800a21c:	200009dc 	.word	0x200009dc

0800a220 <__malloc_lock>:
 800a220:	4801      	ldr	r0, [pc, #4]	@ (800a228 <__malloc_lock+0x8>)
 800a222:	f000 b84b 	b.w	800a2bc <__retarget_lock_acquire_recursive>
 800a226:	bf00      	nop
 800a228:	20000b1c 	.word	0x20000b1c

0800a22c <__malloc_unlock>:
 800a22c:	4801      	ldr	r0, [pc, #4]	@ (800a234 <__malloc_unlock+0x8>)
 800a22e:	f000 b846 	b.w	800a2be <__retarget_lock_release_recursive>
 800a232:	bf00      	nop
 800a234:	20000b1c 	.word	0x20000b1c

0800a238 <memset>:
 800a238:	4402      	add	r2, r0
 800a23a:	4603      	mov	r3, r0
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d100      	bne.n	800a242 <memset+0xa>
 800a240:	4770      	bx	lr
 800a242:	f803 1b01 	strb.w	r1, [r3], #1
 800a246:	e7f9      	b.n	800a23c <memset+0x4>

0800a248 <_sbrk_r>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	4d06      	ldr	r5, [pc, #24]	@ (800a264 <_sbrk_r+0x1c>)
 800a24c:	2300      	movs	r3, #0
 800a24e:	4604      	mov	r4, r0
 800a250:	4608      	mov	r0, r1
 800a252:	602b      	str	r3, [r5, #0]
 800a254:	f7f6 fdaa 	bl	8000dac <_sbrk>
 800a258:	1c43      	adds	r3, r0, #1
 800a25a:	d102      	bne.n	800a262 <_sbrk_r+0x1a>
 800a25c:	682b      	ldr	r3, [r5, #0]
 800a25e:	b103      	cbz	r3, 800a262 <_sbrk_r+0x1a>
 800a260:	6023      	str	r3, [r4, #0]
 800a262:	bd38      	pop	{r3, r4, r5, pc}
 800a264:	20000b18 	.word	0x20000b18

0800a268 <__errno>:
 800a268:	4b01      	ldr	r3, [pc, #4]	@ (800a270 <__errno+0x8>)
 800a26a:	6818      	ldr	r0, [r3, #0]
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	2000002c 	.word	0x2000002c

0800a274 <__libc_init_array>:
 800a274:	b570      	push	{r4, r5, r6, lr}
 800a276:	4d0d      	ldr	r5, [pc, #52]	@ (800a2ac <__libc_init_array+0x38>)
 800a278:	4c0d      	ldr	r4, [pc, #52]	@ (800a2b0 <__libc_init_array+0x3c>)
 800a27a:	1b64      	subs	r4, r4, r5
 800a27c:	10a4      	asrs	r4, r4, #2
 800a27e:	2600      	movs	r6, #0
 800a280:	42a6      	cmp	r6, r4
 800a282:	d109      	bne.n	800a298 <__libc_init_array+0x24>
 800a284:	4d0b      	ldr	r5, [pc, #44]	@ (800a2b4 <__libc_init_array+0x40>)
 800a286:	4c0c      	ldr	r4, [pc, #48]	@ (800a2b8 <__libc_init_array+0x44>)
 800a288:	f000 f864 	bl	800a354 <_init>
 800a28c:	1b64      	subs	r4, r4, r5
 800a28e:	10a4      	asrs	r4, r4, #2
 800a290:	2600      	movs	r6, #0
 800a292:	42a6      	cmp	r6, r4
 800a294:	d105      	bne.n	800a2a2 <__libc_init_array+0x2e>
 800a296:	bd70      	pop	{r4, r5, r6, pc}
 800a298:	f855 3b04 	ldr.w	r3, [r5], #4
 800a29c:	4798      	blx	r3
 800a29e:	3601      	adds	r6, #1
 800a2a0:	e7ee      	b.n	800a280 <__libc_init_array+0xc>
 800a2a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2a6:	4798      	blx	r3
 800a2a8:	3601      	adds	r6, #1
 800a2aa:	e7f2      	b.n	800a292 <__libc_init_array+0x1e>
 800a2ac:	0800a390 	.word	0x0800a390
 800a2b0:	0800a390 	.word	0x0800a390
 800a2b4:	0800a390 	.word	0x0800a390
 800a2b8:	0800a394 	.word	0x0800a394

0800a2bc <__retarget_lock_acquire_recursive>:
 800a2bc:	4770      	bx	lr

0800a2be <__retarget_lock_release_recursive>:
 800a2be:	4770      	bx	lr

0800a2c0 <_free_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	2900      	cmp	r1, #0
 800a2c6:	d041      	beq.n	800a34c <_free_r+0x8c>
 800a2c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2cc:	1f0c      	subs	r4, r1, #4
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	bfb8      	it	lt
 800a2d2:	18e4      	addlt	r4, r4, r3
 800a2d4:	f7ff ffa4 	bl	800a220 <__malloc_lock>
 800a2d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a350 <_free_r+0x90>)
 800a2da:	6813      	ldr	r3, [r2, #0]
 800a2dc:	b933      	cbnz	r3, 800a2ec <_free_r+0x2c>
 800a2de:	6063      	str	r3, [r4, #4]
 800a2e0:	6014      	str	r4, [r2, #0]
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2e8:	f7ff bfa0 	b.w	800a22c <__malloc_unlock>
 800a2ec:	42a3      	cmp	r3, r4
 800a2ee:	d908      	bls.n	800a302 <_free_r+0x42>
 800a2f0:	6820      	ldr	r0, [r4, #0]
 800a2f2:	1821      	adds	r1, r4, r0
 800a2f4:	428b      	cmp	r3, r1
 800a2f6:	bf01      	itttt	eq
 800a2f8:	6819      	ldreq	r1, [r3, #0]
 800a2fa:	685b      	ldreq	r3, [r3, #4]
 800a2fc:	1809      	addeq	r1, r1, r0
 800a2fe:	6021      	streq	r1, [r4, #0]
 800a300:	e7ed      	b.n	800a2de <_free_r+0x1e>
 800a302:	461a      	mov	r2, r3
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	b10b      	cbz	r3, 800a30c <_free_r+0x4c>
 800a308:	42a3      	cmp	r3, r4
 800a30a:	d9fa      	bls.n	800a302 <_free_r+0x42>
 800a30c:	6811      	ldr	r1, [r2, #0]
 800a30e:	1850      	adds	r0, r2, r1
 800a310:	42a0      	cmp	r0, r4
 800a312:	d10b      	bne.n	800a32c <_free_r+0x6c>
 800a314:	6820      	ldr	r0, [r4, #0]
 800a316:	4401      	add	r1, r0
 800a318:	1850      	adds	r0, r2, r1
 800a31a:	4283      	cmp	r3, r0
 800a31c:	6011      	str	r1, [r2, #0]
 800a31e:	d1e0      	bne.n	800a2e2 <_free_r+0x22>
 800a320:	6818      	ldr	r0, [r3, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	6053      	str	r3, [r2, #4]
 800a326:	4408      	add	r0, r1
 800a328:	6010      	str	r0, [r2, #0]
 800a32a:	e7da      	b.n	800a2e2 <_free_r+0x22>
 800a32c:	d902      	bls.n	800a334 <_free_r+0x74>
 800a32e:	230c      	movs	r3, #12
 800a330:	602b      	str	r3, [r5, #0]
 800a332:	e7d6      	b.n	800a2e2 <_free_r+0x22>
 800a334:	6820      	ldr	r0, [r4, #0]
 800a336:	1821      	adds	r1, r4, r0
 800a338:	428b      	cmp	r3, r1
 800a33a:	bf04      	itt	eq
 800a33c:	6819      	ldreq	r1, [r3, #0]
 800a33e:	685b      	ldreq	r3, [r3, #4]
 800a340:	6063      	str	r3, [r4, #4]
 800a342:	bf04      	itt	eq
 800a344:	1809      	addeq	r1, r1, r0
 800a346:	6021      	streq	r1, [r4, #0]
 800a348:	6054      	str	r4, [r2, #4]
 800a34a:	e7ca      	b.n	800a2e2 <_free_r+0x22>
 800a34c:	bd38      	pop	{r3, r4, r5, pc}
 800a34e:	bf00      	nop
 800a350:	200009dc 	.word	0x200009dc

0800a354 <_init>:
 800a354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a356:	bf00      	nop
 800a358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a35a:	bc08      	pop	{r3}
 800a35c:	469e      	mov	lr, r3
 800a35e:	4770      	bx	lr

0800a360 <_fini>:
 800a360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a362:	bf00      	nop
 800a364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a366:	bc08      	pop	{r3}
 800a368:	469e      	mov	lr, r3
 800a36a:	4770      	bx	lr
