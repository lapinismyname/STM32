
accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098a8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009a30  08009a30  0000aa30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a4c  08009a4c  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a4c  08009a4c  0000aa4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a54  08009a54  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a54  08009a54  0000aa54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a58  08009a58  0000aa58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009a5c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a5c  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ad8  20000ad8  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000172f5  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004321  00000000  00000000  000223a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  000266c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ed5  00000000  00000000  00027a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000250a9  00000000  00000000  0002892d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bf1f  00000000  00000000  0004d9d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdfae  00000000  00000000  000698f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001378a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053b4  00000000  00000000  001378e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0013cc9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009a18 	.word	0x08009a18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009a18 	.word	0x08009a18

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <Delayms>:
/**
 * @brief  Delays for amount of milli seconds
 * @param  millis: Number of milliseconds for delay
 * @retval None
 */
__STATIC_INLINE void Delayms(uint32_t millis) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	/* Use HAL library for delay ms purpose */
	HAL_Delay(millis);
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f005 fefb 	bl	80062bc <HAL_Delay>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fc5d 	bl	8000d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f875 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f971 	bl	80007c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e2:	f000 f8db 	bl	800069c <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e6:	f000 f907 	bl	80006f8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004ea:	f000 f935 	bl	8000758 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004ee:	f008 fe3d 	bl	800916c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  TM_LIS302DL_LIS3DSH_t Axes_Data;

      /* Initialize system */
      SystemInit();
 80004f2:	f000 fc13 	bl	8000d1c <SystemInit>

      /* Init delay */
      TM_DELAY_Init();
 80004f6:	f005 fe21 	bl	800613c <TM_DELAY_Init>

      /* Initialize LEDs */
      TM_DISCO_LedInit();
 80004fa:	f005 ff15 	bl	8006328 <TM_DISCO_LedInit>

      /* Detect proper device */
      if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 80004fe:	f006 f887 	bl	8006610 <TM_LIS302DL_LIS3DSH_Detect>
 8000502:	4603      	mov	r3, r0
 8000504:	2b01      	cmp	r3, #1
 8000506:	d108      	bne.n	800051a <main+0x4a>
          /* Turn on GREEN and RED */
          TM_DISCO_LedOn(LED_GREEN | LED_RED);
 8000508:	4b2e      	ldr	r3, [pc, #184]	@ (80005c4 <main+0xf4>)
 800050a:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800050e:	619a      	str	r2, [r3, #24]
          /* Initialize LIS302DL */
          TM_LIS302DL_LIS3DSH_Init(TM_LIS302DL_Sensitivity_2_3G, TM_LIS302DL_Filter_2Hz);
 8000510:	2104      	movs	r1, #4
 8000512:	2005      	movs	r0, #5
 8000514:	f006 f8a0 	bl	8006658 <TM_LIS302DL_LIS3DSH_Init>
 8000518:	e013      	b.n	8000542 <main+0x72>
      } else if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 800051a:	f006 f879 	bl	8006610 <TM_LIS302DL_LIS3DSH_Detect>
 800051e:	4603      	mov	r3, r0
 8000520:	2b02      	cmp	r3, #2
 8000522:	d108      	bne.n	8000536 <main+0x66>
          /* Turn on BLUE and ORANGE */
          TM_DISCO_LedOn(LED_BLUE | LED_ORANGE);
 8000524:	4b27      	ldr	r3, [pc, #156]	@ (80005c4 <main+0xf4>)
 8000526:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 800052a:	619a      	str	r2, [r3, #24]
          /* Initialize LIS3DSH */
          TM_LIS302DL_LIS3DSH_Init(TM_LIS3DSH_Sensitivity_2G, TM_LIS3DSH_Filter_800Hz);
 800052c:	2100      	movs	r1, #0
 800052e:	2000      	movs	r0, #0
 8000530:	f006 f892 	bl	8006658 <TM_LIS302DL_LIS3DSH_Init>
 8000534:	e005      	b.n	8000542 <main+0x72>
      } else {
          /* Device is not recognized */

          /* Turn on ALL leds */
          TM_DISCO_LedOn(LED_GREEN | LED_RED | LED_BLUE | LED_ORANGE);
 8000536:	4b23      	ldr	r3, [pc, #140]	@ (80005c4 <main+0xf4>)
 8000538:	f44f 4270 	mov.w	r2, #61440	@ 0xf000
 800053c:	619a      	str	r2, [r3, #24]

          /* Infinite loop */
          while (1);
 800053e:	bf00      	nop
 8000540:	e7fd      	b.n	800053e <main+0x6e>
      }

      /* Delay for 2 seconds */
      Delayms(2000);
 8000542:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000546:	f7ff ffb7 	bl	80004b8 <Delayms>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800054a:	f008 fe35 	bl	80091b8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    /* Read axes data from initialized accelerometer */
            TM_LIS302DL_LIS3DSH_ReadAxes(&Axes_Data);
 800054e:	463b      	mov	r3, r7
 8000550:	4618      	mov	r0, r3
 8000552:	f006 f8b1 	bl	80066b8 <TM_LIS302DL_LIS3DSH_ReadAxes>

            /* Turn LEDS on or off */
            /* Check X axes */
            if (Axes_Data.X > 200) TM_DISCO_LedOn(LED_RED);
 8000556:	f9b7 3000 	ldrsh.w	r3, [r7]
 800055a:	2bc8      	cmp	r3, #200	@ 0xc8
 800055c:	dd04      	ble.n	8000568 <main+0x98>
 800055e:	4b19      	ldr	r3, [pc, #100]	@ (80005c4 <main+0xf4>)
 8000560:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000564:	619a      	str	r2, [r3, #24]
 8000566:	e003      	b.n	8000570 <main+0xa0>
            else TM_DISCO_LedOff(LED_RED);
 8000568:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <main+0xf4>)
 800056a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800056e:	619a      	str	r2, [r3, #24]

            if (Axes_Data.X < -200) TM_DISCO_LedOn(LED_GREEN);
 8000570:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000574:	f113 0fc8 	cmn.w	r3, #200	@ 0xc8
 8000578:	da04      	bge.n	8000584 <main+0xb4>
 800057a:	4b12      	ldr	r3, [pc, #72]	@ (80005c4 <main+0xf4>)
 800057c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000580:	619a      	str	r2, [r3, #24]
 8000582:	e003      	b.n	800058c <main+0xbc>
            else TM_DISCO_LedOff(LED_GREEN);
 8000584:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <main+0xf4>)
 8000586:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800058a:	619a      	str	r2, [r3, #24]

            /* Check Y axes */
            if (Axes_Data.Y > 200) TM_DISCO_LedOn(LED_ORANGE);
 800058c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000590:	2bc8      	cmp	r3, #200	@ 0xc8
 8000592:	dd04      	ble.n	800059e <main+0xce>
 8000594:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <main+0xf4>)
 8000596:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800059a:	619a      	str	r2, [r3, #24]
 800059c:	e003      	b.n	80005a6 <main+0xd6>
            else TM_DISCO_LedOff(LED_ORANGE);
 800059e:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <main+0xf4>)
 80005a0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80005a4:	619a      	str	r2, [r3, #24]

            if (Axes_Data.Y < -200) TM_DISCO_LedOn(LED_BLUE);
 80005a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005aa:	f113 0fc8 	cmn.w	r3, #200	@ 0xc8
 80005ae:	da04      	bge.n	80005ba <main+0xea>
 80005b0:	4b04      	ldr	r3, [pc, #16]	@ (80005c4 <main+0xf4>)
 80005b2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80005b6:	619a      	str	r2, [r3, #24]
 80005b8:	e7c7      	b.n	800054a <main+0x7a>
            else TM_DISCO_LedOff(LED_BLUE);
 80005ba:	4b02      	ldr	r3, [pc, #8]	@ (80005c4 <main+0xf4>)
 80005bc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80005c0:	619a      	str	r2, [r3, #24]
    MX_USB_HOST_Process();
 80005c2:	e7c2      	b.n	800054a <main+0x7a>
 80005c4:	40020c00 	.word	0x40020c00

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	@ 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	@ 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f009 f990 	bl	80098fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b28      	ldr	r3, [pc, #160]	@ (8000694 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	4a27      	ldr	r2, [pc, #156]	@ (8000694 <SystemClock_Config+0xcc>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005fc:	4b25      	ldr	r3, [pc, #148]	@ (8000694 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a21      	ldr	r2, [pc, #132]	@ (8000698 <SystemClock_Config+0xd0>)
 8000612:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000624:	2301      	movs	r3, #1
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000628:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000638:	2308      	movs	r3, #8
 800063a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800063c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000640:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000646:	2307      	movs	r3, #7
 8000648:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	4618      	mov	r0, r3
 8000650:	f003 fdb8 	bl	80041c4 <HAL_RCC_OscConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800065a:	f000 f9b1 	bl	80009c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2302      	movs	r3, #2
 8000664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800066e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000670:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000674:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2105      	movs	r1, #5
 800067c:	4618      	mov	r0, r3
 800067e:	f004 f819 	bl	80046b4 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000688:	f000 f99a 	bl	80009c0 <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	3750      	adds	r7, #80	@ 0x50
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a0:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <MX_I2C1_Init+0x50>)
 80006a2:	4a13      	ldr	r2, [pc, #76]	@ (80006f0 <MX_I2C1_Init+0x54>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006a6:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_I2C1_Init+0x50>)
 80006a8:	4a12      	ldr	r2, [pc, #72]	@ (80006f4 <MX_I2C1_Init+0x58>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_I2C1_Init+0x50>)
 80006ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006c6:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	@ (80006ec <MX_I2C1_Init+0x50>)
 80006da:	f002 ff8f 	bl	80035fc <HAL_I2C_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e4:	f000 f96c 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000098 	.word	0x20000098
 80006f0:	40005400 	.word	0x40005400
 80006f4:	000186a0 	.word	0x000186a0

080006f8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006fc:	4b13      	ldr	r3, [pc, #76]	@ (800074c <MX_I2S3_Init+0x54>)
 80006fe:	4a14      	ldr	r2, [pc, #80]	@ (8000750 <MX_I2S3_Init+0x58>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000702:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_I2S3_Init+0x54>)
 8000704:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000708:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <MX_I2S3_Init+0x54>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000710:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_I2S3_Init+0x54>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000716:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <MX_I2S3_Init+0x54>)
 8000718:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800071c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <MX_I2S3_Init+0x54>)
 8000720:	4a0c      	ldr	r2, [pc, #48]	@ (8000754 <MX_I2S3_Init+0x5c>)
 8000722:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_I2S3_Init+0x54>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <MX_I2S3_Init+0x54>)
 800072c:	2200      	movs	r2, #0
 800072e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_I2S3_Init+0x54>)
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	@ (800074c <MX_I2S3_Init+0x54>)
 8000738:	f003 f8a4 	bl	8003884 <HAL_I2S_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000742:	f000 f93d 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200000ec 	.word	0x200000ec
 8000750:	40003c00 	.word	0x40003c00
 8000754:	00017700 	.word	0x00017700

08000758 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800075c:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <MX_SPI1_Init+0x64>)
 800075e:	4a18      	ldr	r2, [pc, #96]	@ (80007c0 <MX_SPI1_Init+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000762:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <MX_SPI1_Init+0x64>)
 8000764:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000768:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800076a:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <MX_SPI1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <MX_SPI1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_SPI1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_SPI1_Init+0x64>)
 8000784:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000788:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078a:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_SPI1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <MX_SPI1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_SPI1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <MX_SPI1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_SPI1_Init+0x64>)
 80007a4:	220a      	movs	r2, #10
 80007a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	@ (80007bc <MX_SPI1_Init+0x64>)
 80007aa:	f004 fad1 	bl	8004d50 <HAL_SPI_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007b4:	f000 f904 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000134 	.word	0x20000134
 80007c0:	40013000 	.word	0x40013000

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	@ 0x30
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	4b72      	ldr	r3, [pc, #456]	@ (80009a8 <MX_GPIO_Init+0x1e4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a71      	ldr	r2, [pc, #452]	@ (80009a8 <MX_GPIO_Init+0x1e4>)
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b6f      	ldr	r3, [pc, #444]	@ (80009a8 <MX_GPIO_Init+0x1e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0310 	and.w	r3, r3, #16
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	4b6b      	ldr	r3, [pc, #428]	@ (80009a8 <MX_GPIO_Init+0x1e4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a6a      	ldr	r2, [pc, #424]	@ (80009a8 <MX_GPIO_Init+0x1e4>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b68      	ldr	r3, [pc, #416]	@ (80009a8 <MX_GPIO_Init+0x1e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b64      	ldr	r3, [pc, #400]	@ (80009a8 <MX_GPIO_Init+0x1e4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a63      	ldr	r2, [pc, #396]	@ (80009a8 <MX_GPIO_Init+0x1e4>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b61      	ldr	r3, [pc, #388]	@ (80009a8 <MX_GPIO_Init+0x1e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b5d      	ldr	r3, [pc, #372]	@ (80009a8 <MX_GPIO_Init+0x1e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a5c      	ldr	r2, [pc, #368]	@ (80009a8 <MX_GPIO_Init+0x1e4>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b5a      	ldr	r3, [pc, #360]	@ (80009a8 <MX_GPIO_Init+0x1e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b56      	ldr	r3, [pc, #344]	@ (80009a8 <MX_GPIO_Init+0x1e4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a55      	ldr	r2, [pc, #340]	@ (80009a8 <MX_GPIO_Init+0x1e4>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b53      	ldr	r3, [pc, #332]	@ (80009a8 <MX_GPIO_Init+0x1e4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b4f      	ldr	r3, [pc, #316]	@ (80009a8 <MX_GPIO_Init+0x1e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a4e      	ldr	r2, [pc, #312]	@ (80009a8 <MX_GPIO_Init+0x1e4>)
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b4c      	ldr	r3, [pc, #304]	@ (80009a8 <MX_GPIO_Init+0x1e4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2108      	movs	r1, #8
 8000886:	4849      	ldr	r0, [pc, #292]	@ (80009ac <MX_GPIO_Init+0x1e8>)
 8000888:	f000 fd84 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2101      	movs	r1, #1
 8000890:	4847      	ldr	r0, [pc, #284]	@ (80009b0 <MX_GPIO_Init+0x1ec>)
 8000892:	f000 fd7f 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000896:	2200      	movs	r2, #0
 8000898:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800089c:	4845      	ldr	r0, [pc, #276]	@ (80009b4 <MX_GPIO_Init+0x1f0>)
 800089e:	f000 fd79 	bl	8001394 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008a2:	2308      	movs	r3, #8
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	483c      	ldr	r0, [pc, #240]	@ (80009ac <MX_GPIO_Init+0x1e8>)
 80008ba:	f000 fbcf 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008be:	2301      	movs	r3, #1
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4836      	ldr	r0, [pc, #216]	@ (80009b0 <MX_GPIO_Init+0x1ec>)
 80008d6:	f000 fbc1 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008da:	2308      	movs	r3, #8
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ea:	2305      	movs	r3, #5
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	482e      	ldr	r0, [pc, #184]	@ (80009b0 <MX_GPIO_Init+0x1ec>)
 80008f6:	f000 fbb1 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008fe:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	482a      	ldr	r0, [pc, #168]	@ (80009b8 <MX_GPIO_Init+0x1f4>)
 8000910:	f000 fba4 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000914:	2304      	movs	r3, #4
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4825      	ldr	r0, [pc, #148]	@ (80009bc <MX_GPIO_Init+0x1f8>)
 8000928:	f000 fb98 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800092c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800093e:	2305      	movs	r3, #5
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	481c      	ldr	r0, [pc, #112]	@ (80009bc <MX_GPIO_Init+0x1f8>)
 800094a:	f000 fb87 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800094e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000952:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4813      	ldr	r0, [pc, #76]	@ (80009b4 <MX_GPIO_Init+0x1f0>)
 8000968:	f000 fb78 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800096c:	2320      	movs	r3, #32
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	480d      	ldr	r0, [pc, #52]	@ (80009b4 <MX_GPIO_Init+0x1f0>)
 8000980:	f000 fb6c 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000984:	2302      	movs	r3, #2
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000988:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4804      	ldr	r0, [pc, #16]	@ (80009ac <MX_GPIO_Init+0x1e8>)
 800099a:	f000 fb5f 	bl	800105c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099e:	bf00      	nop
 80009a0:	3730      	adds	r7, #48	@ 0x30
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40020800 	.word	0x40020800
 80009b4:	40020c00 	.word	0x40020c00
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40020400 	.word	0x40020400

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c4:	b672      	cpsid	i
}
 80009c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <Error_Handler+0x8>

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b10      	ldr	r3, [pc, #64]	@ (8000a18 <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009da:	4a0f      	ldr	r2, [pc, #60]	@ (8000a18 <HAL_MspInit+0x4c>)
 80009dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a18 <HAL_MspInit+0x4c>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	4a08      	ldr	r2, [pc, #32]	@ (8000a18 <HAL_MspInit+0x4c>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fe:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <HAL_MspInit+0x4c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a0a:	2007      	movs	r0, #7
 8000a0c:	f000 fae4 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40023800 	.word	0x40023800

08000a1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	@ 0x28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a19      	ldr	r2, [pc, #100]	@ (8000aa0 <HAL_I2C_MspInit+0x84>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d12c      	bne.n	8000a98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a17      	ldr	r2, [pc, #92]	@ (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a5a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a60:	2312      	movs	r3, #18
 8000a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	480c      	ldr	r0, [pc, #48]	@ (8000aa8 <HAL_I2C_MspInit+0x8c>)
 8000a78:	f000 faf0 	bl	800105c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a84:	4a07      	ldr	r2, [pc, #28]	@ (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8c:	4b05      	ldr	r3, [pc, #20]	@ (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a98:	bf00      	nop
 8000a9a:	3728      	adds	r7, #40	@ 0x28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40005400 	.word	0x40005400
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020400 	.word	0x40020400

08000aac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08e      	sub	sp, #56	@ 0x38
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a31      	ldr	r2, [pc, #196]	@ (8000b9c <HAL_I2S_MspInit+0xf0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d15a      	bne.n	8000b92 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000adc:	2301      	movs	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ae0:	23c0      	movs	r3, #192	@ 0xc0
 8000ae2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 ffed 	bl	8004acc <HAL_RCCEx_PeriphCLKConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000af8:	f7ff ff62 	bl	80009c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	4b27      	ldr	r3, [pc, #156]	@ (8000ba0 <HAL_I2S_MspInit+0xf4>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b04:	4a26      	ldr	r2, [pc, #152]	@ (8000ba0 <HAL_I2S_MspInit+0xf4>)
 8000b06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0c:	4b24      	ldr	r3, [pc, #144]	@ (8000ba0 <HAL_I2S_MspInit+0xf4>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ba0 <HAL_I2S_MspInit+0xf4>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b20:	4a1f      	ldr	r2, [pc, #124]	@ (8000ba0 <HAL_I2S_MspInit+0xf4>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b28:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba0 <HAL_I2S_MspInit+0xf4>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	4b19      	ldr	r3, [pc, #100]	@ (8000ba0 <HAL_I2S_MspInit+0xf4>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3c:	4a18      	ldr	r2, [pc, #96]	@ (8000ba0 <HAL_I2S_MspInit+0xf4>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b44:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <HAL_I2S_MspInit+0xf4>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b50:	2310      	movs	r3, #16
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b60:	2306      	movs	r3, #6
 8000b62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480e      	ldr	r0, [pc, #56]	@ (8000ba4 <HAL_I2S_MspInit+0xf8>)
 8000b6c:	f000 fa76 	bl	800105c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b70:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b82:	2306      	movs	r3, #6
 8000b84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4806      	ldr	r0, [pc, #24]	@ (8000ba8 <HAL_I2S_MspInit+0xfc>)
 8000b8e:	f000 fa65 	bl	800105c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3738      	adds	r7, #56	@ 0x38
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40003c00 	.word	0x40003c00
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	40020800 	.word	0x40020800

08000bac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	@ 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a19      	ldr	r2, [pc, #100]	@ (8000c30 <HAL_SPI_MspInit+0x84>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d12b      	bne.n	8000c26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <HAL_SPI_MspInit+0x88>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd6:	4a17      	ldr	r2, [pc, #92]	@ (8000c34 <HAL_SPI_MspInit+0x88>)
 8000bd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <HAL_SPI_MspInit+0x88>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <HAL_SPI_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a10      	ldr	r2, [pc, #64]	@ (8000c34 <HAL_SPI_MspInit+0x88>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <HAL_SPI_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c06:	23e0      	movs	r3, #224	@ 0xe0
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c16:	2305      	movs	r3, #5
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <HAL_SPI_MspInit+0x8c>)
 8000c22:	f000 fa1b 	bl	800105c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	@ 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40013000 	.word	0x40013000
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <NMI_Handler+0x4>

08000c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <MemManage_Handler+0x4>

08000c54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c92:	f005 fa8d 	bl	80061b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ca0:	4802      	ldr	r0, [pc, #8]	@ (8000cac <OTG_FS_IRQHandler+0x10>)
 8000ca2:	f000 fe71 	bl	8001988 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200005b0 	.word	0x200005b0

08000cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb8:	4a14      	ldr	r2, [pc, #80]	@ (8000d0c <_sbrk+0x5c>)
 8000cba:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <_sbrk+0x60>)
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc4:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <_sbrk+0x64>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	@ (8000d18 <_sbrk+0x68>)
 8000cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd2:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d207      	bcs.n	8000cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce0:	f008 fe24 	bl	800992c <__errno>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
 8000cee:	e009      	b.n	8000d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf6:	4b07      	ldr	r3, [pc, #28]	@ (8000d14 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4a05      	ldr	r2, [pc, #20]	@ (8000d14 <_sbrk+0x64>)
 8000d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d02:	68fb      	ldr	r3, [r7, #12]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20020000 	.word	0x20020000
 8000d10:	00000400 	.word	0x00000400
 8000d14:	2000018c 	.word	0x2000018c
 8000d18:	20000ad8 	.word	0x20000ad8

08000d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <SystemInit+0x20>)
 8000d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d26:	4a05      	ldr	r2, [pc, #20]	@ (8000d3c <SystemInit+0x20>)
 8000d28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d44:	f7ff ffea 	bl	8000d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d48:	480c      	ldr	r0, [pc, #48]	@ (8000d7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d4a:	490d      	ldr	r1, [pc, #52]	@ (8000d80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d60:	4c0a      	ldr	r4, [pc, #40]	@ (8000d8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f008 fde3 	bl	8009938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d72:	f7ff fbad 	bl	80004d0 <main>
  bx  lr    
 8000d76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d84:	08009a5c 	.word	0x08009a5c
  ldr r2, =_sbss
 8000d88:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d8c:	20000ad8 	.word	0x20000ad8

08000d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC_IRQHandler>
	...

08000d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d98:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd4 <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <HAL_Init+0x40>)
 8000d9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da4:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd4 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <HAL_Init+0x40>)
 8000daa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db0:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a07      	ldr	r2, [pc, #28]	@ (8000dd4 <HAL_Init+0x40>)
 8000db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f000 f90b 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f000 f808 	bl	8000dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc8:	f7ff fe00 	bl	80009cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023c00 	.word	0x40023c00

08000dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de0:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <HAL_InitTick+0x54>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <HAL_InitTick+0x58>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f923 	bl	8001042 <HAL_SYSTICK_Config>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00e      	b.n	8000e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b0f      	cmp	r3, #15
 8000e0a:	d80a      	bhi.n	8000e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f000 f8eb 	bl	8000fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e18:	4a06      	ldr	r2, [pc, #24]	@ (8000e34 <HAL_InitTick+0x5c>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e000      	b.n	8000e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000004 	.word	0x20000004

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0c      	ldr	r3, [pc, #48]	@ (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	60d3      	str	r3, [r2, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	@ (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	db0b      	blt.n	8000ec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f003 021f 	and.w	r2, r3, #31
 8000eb4:	4907      	ldr	r1, [pc, #28]	@ (8000ed4 <__NVIC_EnableIRQ+0x38>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	095b      	lsrs	r3, r3, #5
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	@ (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	@ (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	@ 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	@ 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f7ff ff8e 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff29 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001000:	f7ff ff3e 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8001004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f7ff ff8e 	bl	8000f2c <NVIC_EncodePriority>
 8001010:	4602      	mov	r2, r0
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5d 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff31 	bl	8000e9c <__NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffa2 	bl	8000f94 <SysTick_Config>
 8001050:	4603      	mov	r3, r0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	@ 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
 8001076:	e16b      	b.n	8001350 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001078:	2201      	movs	r2, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	429a      	cmp	r2, r3
 8001092:	f040 815a 	bne.w	800134a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d005      	beq.n	80010ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d130      	bne.n	8001110 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2203      	movs	r2, #3
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e4:	2201      	movs	r2, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	091b      	lsrs	r3, r3, #4
 80010fa:	f003 0201 	and.w	r2, r3, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	2b03      	cmp	r3, #3
 800111a:	d017      	beq.n	800114c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d123      	bne.n	80011a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	08da      	lsrs	r2, r3, #3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3208      	adds	r2, #8
 8001160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	220f      	movs	r2, #15
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	08da      	lsrs	r2, r3, #3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3208      	adds	r2, #8
 800119a:	69b9      	ldr	r1, [r7, #24]
 800119c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0203 	and.w	r2, r3, #3
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 80b4 	beq.w	800134a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b60      	ldr	r3, [pc, #384]	@ (8001368 <HAL_GPIO_Init+0x30c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	4a5f      	ldr	r2, [pc, #380]	@ (8001368 <HAL_GPIO_Init+0x30c>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001368 <HAL_GPIO_Init+0x30c>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011fe:	4a5b      	ldr	r2, [pc, #364]	@ (800136c <HAL_GPIO_Init+0x310>)
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	220f      	movs	r2, #15
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a52      	ldr	r2, [pc, #328]	@ (8001370 <HAL_GPIO_Init+0x314>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d02b      	beq.n	8001282 <HAL_GPIO_Init+0x226>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a51      	ldr	r2, [pc, #324]	@ (8001374 <HAL_GPIO_Init+0x318>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d025      	beq.n	800127e <HAL_GPIO_Init+0x222>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a50      	ldr	r2, [pc, #320]	@ (8001378 <HAL_GPIO_Init+0x31c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d01f      	beq.n	800127a <HAL_GPIO_Init+0x21e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4f      	ldr	r2, [pc, #316]	@ (800137c <HAL_GPIO_Init+0x320>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d019      	beq.n	8001276 <HAL_GPIO_Init+0x21a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4e      	ldr	r2, [pc, #312]	@ (8001380 <HAL_GPIO_Init+0x324>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d013      	beq.n	8001272 <HAL_GPIO_Init+0x216>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4d      	ldr	r2, [pc, #308]	@ (8001384 <HAL_GPIO_Init+0x328>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00d      	beq.n	800126e <HAL_GPIO_Init+0x212>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4c      	ldr	r2, [pc, #304]	@ (8001388 <HAL_GPIO_Init+0x32c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d007      	beq.n	800126a <HAL_GPIO_Init+0x20e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4b      	ldr	r2, [pc, #300]	@ (800138c <HAL_GPIO_Init+0x330>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d101      	bne.n	8001266 <HAL_GPIO_Init+0x20a>
 8001262:	2307      	movs	r3, #7
 8001264:	e00e      	b.n	8001284 <HAL_GPIO_Init+0x228>
 8001266:	2308      	movs	r3, #8
 8001268:	e00c      	b.n	8001284 <HAL_GPIO_Init+0x228>
 800126a:	2306      	movs	r3, #6
 800126c:	e00a      	b.n	8001284 <HAL_GPIO_Init+0x228>
 800126e:	2305      	movs	r3, #5
 8001270:	e008      	b.n	8001284 <HAL_GPIO_Init+0x228>
 8001272:	2304      	movs	r3, #4
 8001274:	e006      	b.n	8001284 <HAL_GPIO_Init+0x228>
 8001276:	2303      	movs	r3, #3
 8001278:	e004      	b.n	8001284 <HAL_GPIO_Init+0x228>
 800127a:	2302      	movs	r3, #2
 800127c:	e002      	b.n	8001284 <HAL_GPIO_Init+0x228>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_GPIO_Init+0x228>
 8001282:	2300      	movs	r3, #0
 8001284:	69fa      	ldr	r2, [r7, #28]
 8001286:	f002 0203 	and.w	r2, r2, #3
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	4093      	lsls	r3, r2
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001294:	4935      	ldr	r1, [pc, #212]	@ (800136c <HAL_GPIO_Init+0x310>)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001390 <HAL_GPIO_Init+0x334>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c6:	4a32      	ldr	r2, [pc, #200]	@ (8001390 <HAL_GPIO_Init+0x334>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012cc:	4b30      	ldr	r3, [pc, #192]	@ (8001390 <HAL_GPIO_Init+0x334>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f0:	4a27      	ldr	r2, [pc, #156]	@ (8001390 <HAL_GPIO_Init+0x334>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012f6:	4b26      	ldr	r3, [pc, #152]	@ (8001390 <HAL_GPIO_Init+0x334>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800131a:	4a1d      	ldr	r2, [pc, #116]	@ (8001390 <HAL_GPIO_Init+0x334>)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001320:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <HAL_GPIO_Init+0x334>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001344:	4a12      	ldr	r2, [pc, #72]	@ (8001390 <HAL_GPIO_Init+0x334>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3301      	adds	r3, #1
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	2b0f      	cmp	r3, #15
 8001354:	f67f ae90 	bls.w	8001078 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3724      	adds	r7, #36	@ 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40013800 	.word	0x40013800
 8001370:	40020000 	.word	0x40020000
 8001374:	40020400 	.word	0x40020400
 8001378:	40020800 	.word	0x40020800
 800137c:	40020c00 	.word	0x40020c00
 8001380:	40021000 	.word	0x40021000
 8001384:	40021400 	.word	0x40021400
 8001388:	40021800 	.word	0x40021800
 800138c:	40021c00 	.word	0x40021c00
 8001390:	40013c00 	.word	0x40013c00

08001394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
 80013a0:	4613      	mov	r3, r2
 80013a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a4:	787b      	ldrb	r3, [r7, #1]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013b0:	e003      	b.n	80013ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	041a      	lsls	r2, r3, #16
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	619a      	str	r2, [r3, #24]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af02      	add	r7, sp, #8
 80013cc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e059      	b.n	800148c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d106      	bne.n	80013f8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f007 ff18 	bl	8009228 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2203      	movs	r2, #3
 80013fc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001406:	d102      	bne.n	800140e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f003 fd9a 	bl	8004f4c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6818      	ldr	r0, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	7c1a      	ldrb	r2, [r3, #16]
 8001420:	f88d 2000 	strb.w	r2, [sp]
 8001424:	3304      	adds	r3, #4
 8001426:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001428:	f003 fd1b 	bl	8004e62 <USB_CoreInit>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2202      	movs	r2, #2
 8001436:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e026      	b.n	800148c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2101      	movs	r1, #1
 8001444:	4618      	mov	r0, r3
 8001446:	f003 fd92 	bl	8004f6e <USB_SetCurrentMode>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2202      	movs	r2, #2
 8001454:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e017      	b.n	800148c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7c1a      	ldrb	r2, [r3, #16]
 8001464:	f88d 2000 	strb.w	r2, [sp]
 8001468:	3304      	adds	r3, #4
 800146a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800146c:	f003 ff34 	bl	80052d8 <USB_HostInit>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d005      	beq.n	8001482 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2202      	movs	r2, #2
 800147a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e004      	b.n	800148c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b08b      	sub	sp, #44	@ 0x2c
 8001498:	af04      	add	r7, sp, #16
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	4608      	mov	r0, r1
 800149e:	4611      	mov	r1, r2
 80014a0:	461a      	mov	r2, r3
 80014a2:	4603      	mov	r3, r0
 80014a4:	70fb      	strb	r3, [r7, #3]
 80014a6:	460b      	mov	r3, r1
 80014a8:	70bb      	strb	r3, [r7, #2]
 80014aa:	4613      	mov	r3, r2
 80014ac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80014ae:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80014b0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_HCD_HC_Init+0x2c>
 80014bc:	2302      	movs	r3, #2
 80014be:	e09d      	b.n	80015fc <HAL_HCD_HC_Init+0x168>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80014c8:	78fa      	ldrb	r2, [r7, #3]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	3319      	adds	r3, #25
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014dc:	78fa      	ldrb	r2, [r7, #3]
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	1a9b      	subs	r3, r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	3314      	adds	r3, #20
 80014ec:	787a      	ldrb	r2, [r7, #1]
 80014ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014f0:	78fa      	ldrb	r2, [r7, #3]
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	1a9b      	subs	r3, r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	3315      	adds	r3, #21
 8001500:	78fa      	ldrb	r2, [r7, #3]
 8001502:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001504:	78fa      	ldrb	r2, [r7, #3]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	1a9b      	subs	r3, r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	3326      	adds	r3, #38	@ 0x26
 8001514:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001518:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800151a:	78fa      	ldrb	r2, [r7, #3]
 800151c:	78bb      	ldrb	r3, [r7, #2]
 800151e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001522:	b2d8      	uxtb	r0, r3
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	011b      	lsls	r3, r3, #4
 800152a:	1a9b      	subs	r3, r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	3316      	adds	r3, #22
 8001532:	4602      	mov	r2, r0
 8001534:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	4619      	mov	r1, r3
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 fbc8 	bl	8001cd0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001540:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001544:	2b00      	cmp	r3, #0
 8001546:	da0a      	bge.n	800155e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001548:	78fa      	ldrb	r2, [r7, #3]
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	1a9b      	subs	r3, r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	3317      	adds	r3, #23
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	e009      	b.n	8001572 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800155e:	78fa      	ldrb	r2, [r7, #3]
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	011b      	lsls	r3, r3, #4
 8001566:	1a9b      	subs	r3, r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	3317      	adds	r3, #23
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f004 f812 	bl	80055a0 <USB_GetHostSpeed>
 800157c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800157e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001582:	2b01      	cmp	r3, #1
 8001584:	d10b      	bne.n	800159e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001586:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800158a:	2b01      	cmp	r3, #1
 800158c:	d107      	bne.n	800159e <HAL_HCD_HC_Init+0x10a>
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d104      	bne.n	800159e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	2bbc      	cmp	r3, #188	@ 0xbc
 8001598:	d901      	bls.n	800159e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800159a:	23bc      	movs	r3, #188	@ 0xbc
 800159c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800159e:	78fa      	ldrb	r2, [r7, #3]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	3318      	adds	r3, #24
 80015ae:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80015b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80015b4:	78fa      	ldrb	r2, [r7, #3]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	b298      	uxth	r0, r3
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	1a9b      	subs	r3, r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	3328      	adds	r3, #40	@ 0x28
 80015c8:	4602      	mov	r2, r0
 80015ca:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	787c      	ldrb	r4, [r7, #1]
 80015d6:	78ba      	ldrb	r2, [r7, #2]
 80015d8:	78f9      	ldrb	r1, [r7, #3]
 80015da:	9302      	str	r3, [sp, #8]
 80015dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	4623      	mov	r3, r4
 80015ea:	f004 f801 	bl	80055f0 <USB_HC_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	371c      	adds	r7, #28
 8001600:	46bd      	mov	sp, r7
 8001602:	bd90      	pop	{r4, r7, pc}

08001604 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800161a:	2b01      	cmp	r3, #1
 800161c:	d101      	bne.n	8001622 <HAL_HCD_HC_Halt+0x1e>
 800161e:	2302      	movs	r3, #2
 8001620:	e00f      	b.n	8001642 <HAL_HCD_HC_Halt+0x3e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	78fa      	ldrb	r2, [r7, #3]
 8001630:	4611      	mov	r1, r2
 8001632:	4618      	mov	r0, r3
 8001634:	f004 fb93 	bl	8005d5e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	4608      	mov	r0, r1
 8001656:	4611      	mov	r1, r2
 8001658:	461a      	mov	r2, r3
 800165a:	4603      	mov	r3, r0
 800165c:	70fb      	strb	r3, [r7, #3]
 800165e:	460b      	mov	r3, r1
 8001660:	70bb      	strb	r3, [r7, #2]
 8001662:	4613      	mov	r3, r2
 8001664:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001666:	78fa      	ldrb	r2, [r7, #3]
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	1a9b      	subs	r3, r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	3317      	adds	r3, #23
 8001676:	78ba      	ldrb	r2, [r7, #2]
 8001678:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800167a:	78fa      	ldrb	r2, [r7, #3]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	1a9b      	subs	r3, r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	3326      	adds	r3, #38	@ 0x26
 800168a:	787a      	ldrb	r2, [r7, #1]
 800168c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800168e:	7c3b      	ldrb	r3, [r7, #16]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d114      	bne.n	80016be <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001694:	78fa      	ldrb	r2, [r7, #3]
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	1a9b      	subs	r3, r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	332a      	adds	r3, #42	@ 0x2a
 80016a4:	2203      	movs	r2, #3
 80016a6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80016a8:	78fa      	ldrb	r2, [r7, #3]
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	011b      	lsls	r3, r3, #4
 80016b0:	1a9b      	subs	r3, r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	3319      	adds	r3, #25
 80016b8:	7f3a      	ldrb	r2, [r7, #28]
 80016ba:	701a      	strb	r2, [r3, #0]
 80016bc:	e009      	b.n	80016d2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016be:	78fa      	ldrb	r2, [r7, #3]
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	1a9b      	subs	r3, r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	440b      	add	r3, r1
 80016cc:	332a      	adds	r3, #42	@ 0x2a
 80016ce:	2202      	movs	r2, #2
 80016d0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016d2:	787b      	ldrb	r3, [r7, #1]
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	f200 8102 	bhi.w	80018de <HAL_HCD_HC_SubmitRequest+0x292>
 80016da:	a201      	add	r2, pc, #4	@ (adr r2, 80016e0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80016dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e0:	080016f1 	.word	0x080016f1
 80016e4:	080018c9 	.word	0x080018c9
 80016e8:	080017b5 	.word	0x080017b5
 80016ec:	0800183f 	.word	0x0800183f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80016f0:	7c3b      	ldrb	r3, [r7, #16]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	f040 80f5 	bne.w	80018e2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80016f8:	78bb      	ldrb	r3, [r7, #2]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d12d      	bne.n	800175a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80016fe:	8b3b      	ldrh	r3, [r7, #24]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d109      	bne.n	8001718 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001704:	78fa      	ldrb	r2, [r7, #3]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	1a9b      	subs	r3, r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	333d      	adds	r3, #61	@ 0x3d
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001718:	78fa      	ldrb	r2, [r7, #3]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	1a9b      	subs	r3, r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	333d      	adds	r3, #61	@ 0x3d
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10a      	bne.n	8001744 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800172e:	78fa      	ldrb	r2, [r7, #3]
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	1a9b      	subs	r3, r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	332a      	adds	r3, #42	@ 0x2a
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001742:	e0ce      	b.n	80018e2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001744:	78fa      	ldrb	r2, [r7, #3]
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	1a9b      	subs	r3, r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	332a      	adds	r3, #42	@ 0x2a
 8001754:	2202      	movs	r2, #2
 8001756:	701a      	strb	r2, [r3, #0]
      break;
 8001758:	e0c3      	b.n	80018e2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800175a:	78fa      	ldrb	r2, [r7, #3]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	1a9b      	subs	r3, r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	331a      	adds	r3, #26
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b01      	cmp	r3, #1
 800176e:	f040 80b8 	bne.w	80018e2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	1a9b      	subs	r3, r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	333c      	adds	r3, #60	@ 0x3c
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d10a      	bne.n	800179e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001788:	78fa      	ldrb	r2, [r7, #3]
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	1a9b      	subs	r3, r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	332a      	adds	r3, #42	@ 0x2a
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
      break;
 800179c:	e0a1      	b.n	80018e2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800179e:	78fa      	ldrb	r2, [r7, #3]
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	1a9b      	subs	r3, r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	332a      	adds	r3, #42	@ 0x2a
 80017ae:	2202      	movs	r2, #2
 80017b0:	701a      	strb	r2, [r3, #0]
      break;
 80017b2:	e096      	b.n	80018e2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017b4:	78bb      	ldrb	r3, [r7, #2]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d120      	bne.n	80017fc <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017ba:	78fa      	ldrb	r2, [r7, #3]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	1a9b      	subs	r3, r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	333d      	adds	r3, #61	@ 0x3d
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10a      	bne.n	80017e6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017d0:	78fa      	ldrb	r2, [r7, #3]
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	011b      	lsls	r3, r3, #4
 80017d8:	1a9b      	subs	r3, r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	332a      	adds	r3, #42	@ 0x2a
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017e4:	e07e      	b.n	80018e4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017e6:	78fa      	ldrb	r2, [r7, #3]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	1a9b      	subs	r3, r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	332a      	adds	r3, #42	@ 0x2a
 80017f6:	2202      	movs	r2, #2
 80017f8:	701a      	strb	r2, [r3, #0]
      break;
 80017fa:	e073      	b.n	80018e4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017fc:	78fa      	ldrb	r2, [r7, #3]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	333c      	adds	r3, #60	@ 0x3c
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10a      	bne.n	8001828 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001812:	78fa      	ldrb	r2, [r7, #3]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	1a9b      	subs	r3, r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	440b      	add	r3, r1
 8001820:	332a      	adds	r3, #42	@ 0x2a
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
      break;
 8001826:	e05d      	b.n	80018e4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001828:	78fa      	ldrb	r2, [r7, #3]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	332a      	adds	r3, #42	@ 0x2a
 8001838:	2202      	movs	r2, #2
 800183a:	701a      	strb	r2, [r3, #0]
      break;
 800183c:	e052      	b.n	80018e4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800183e:	78bb      	ldrb	r3, [r7, #2]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d120      	bne.n	8001886 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001844:	78fa      	ldrb	r2, [r7, #3]
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	1a9b      	subs	r3, r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	333d      	adds	r3, #61	@ 0x3d
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10a      	bne.n	8001870 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800185a:	78fa      	ldrb	r2, [r7, #3]
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	4613      	mov	r3, r2
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	1a9b      	subs	r3, r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	440b      	add	r3, r1
 8001868:	332a      	adds	r3, #42	@ 0x2a
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800186e:	e039      	b.n	80018e4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001870:	78fa      	ldrb	r2, [r7, #3]
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	1a9b      	subs	r3, r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	332a      	adds	r3, #42	@ 0x2a
 8001880:	2202      	movs	r2, #2
 8001882:	701a      	strb	r2, [r3, #0]
      break;
 8001884:	e02e      	b.n	80018e4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001886:	78fa      	ldrb	r2, [r7, #3]
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	333c      	adds	r3, #60	@ 0x3c
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10a      	bne.n	80018b2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800189c:	78fa      	ldrb	r2, [r7, #3]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	1a9b      	subs	r3, r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	332a      	adds	r3, #42	@ 0x2a
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
      break;
 80018b0:	e018      	b.n	80018e4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018b2:	78fa      	ldrb	r2, [r7, #3]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	1a9b      	subs	r3, r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	332a      	adds	r3, #42	@ 0x2a
 80018c2:	2202      	movs	r2, #2
 80018c4:	701a      	strb	r2, [r3, #0]
      break;
 80018c6:	e00d      	b.n	80018e4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	1a9b      	subs	r3, r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	332a      	adds	r3, #42	@ 0x2a
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
      break;
 80018dc:	e002      	b.n	80018e4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80018de:	bf00      	nop
 80018e0:	e000      	b.n	80018e4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80018e2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	1a9b      	subs	r3, r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	332c      	adds	r3, #44	@ 0x2c
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	8b39      	ldrh	r1, [r7, #24]
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	1a9b      	subs	r3, r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4403      	add	r3, r0
 8001908:	3334      	adds	r3, #52	@ 0x34
 800190a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800190c:	78fa      	ldrb	r2, [r7, #3]
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	1a9b      	subs	r3, r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	334c      	adds	r3, #76	@ 0x4c
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	3338      	adds	r3, #56	@ 0x38
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	3315      	adds	r3, #21
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001948:	78fa      	ldrb	r2, [r7, #3]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	334d      	adds	r3, #77	@ 0x4d
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	4613      	mov	r3, r2
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	1a9b      	subs	r3, r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	3310      	adds	r3, #16
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	1d19      	adds	r1, r3, #4
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	799b      	ldrb	r3, [r3, #6]
 8001976:	461a      	mov	r2, r3
 8001978:	f003 ff66 	bl	8005848 <USB_HC_StartXfer>
 800197c:	4603      	mov	r3, r0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop

08001988 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 fc5b 	bl	800525a <USB_GetMode>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	f040 80fb 	bne.w	8001ba2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f003 fc1e 	bl	80051f2 <USB_ReadInterrupts>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 80f1 	beq.w	8001ba0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 fc15 	bl	80051f2 <USB_ReadInterrupts>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80019d2:	d104      	bne.n	80019de <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80019dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 fc05 	bl	80051f2 <USB_ReadInterrupts>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019f2:	d104      	bne.n	80019fe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80019fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f003 fbf5 	bl	80051f2 <USB_ReadInterrupts>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001a12:	d104      	bne.n	8001a1e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f003 fbe5 	bl	80051f2 <USB_ReadInterrupts>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d103      	bne.n	8001a3a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2202      	movs	r2, #2
 8001a38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 fbd7 	bl	80051f2 <USB_ReadInterrupts>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a4e:	d120      	bne.n	8001a92 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001a58:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d113      	bne.n	8001a92 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a6a:	2110      	movs	r1, #16
 8001a6c:	6938      	ldr	r0, [r7, #16]
 8001a6e:	f003 faca 	bl	8005006 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a72:	6938      	ldr	r0, [r7, #16]
 8001a74:	f003 faf9 	bl	800506a <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	7a5b      	ldrb	r3, [r3, #9]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d105      	bne.n	8001a8c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2101      	movs	r1, #1
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 fcea 	bl	8005460 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f007 fc49 	bl	8009324 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 fbab 	bl	80051f2 <USB_ReadInterrupts>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001aa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aa6:	d102      	bne.n	8001aae <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f001 fd33 	bl	8003514 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 fb9d 	bl	80051f2 <USB_ReadInterrupts>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d106      	bne.n	8001ad0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f007 fc12 	bl	80092ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2208      	movs	r2, #8
 8001ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f003 fb8c 	bl	80051f2 <USB_ReadInterrupts>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ae4:	d139      	bne.n	8001b5a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f004 f926 	bl	8005d3c <USB_HC_ReadInterrupt>
 8001af0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	e025      	b.n	8001b44 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d018      	beq.n	8001b3e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	015a      	lsls	r2, r3, #5
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b22:	d106      	bne.n	8001b32 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	4619      	mov	r1, r3
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f905 	bl	8001d3a <HCD_HC_IN_IRQHandler>
 8001b30:	e005      	b.n	8001b3e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	4619      	mov	r1, r3
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 ff67 	bl	8002a0c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3301      	adds	r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	795b      	ldrb	r3, [r3, #5]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d3d3      	bcc.n	8001af8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f003 fb47 	bl	80051f2 <USB_ReadInterrupts>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	2b10      	cmp	r3, #16
 8001b6c:	d101      	bne.n	8001b72 <HAL_HCD_IRQHandler+0x1ea>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <HAL_HCD_IRQHandler+0x1ec>
 8001b72:	2300      	movs	r3, #0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d014      	beq.n	8001ba2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	699a      	ldr	r2, [r3, #24]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0210 	bic.w	r2, r2, #16
 8001b86:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f001 fbe4 	bl	8003356 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	699a      	ldr	r2, [r3, #24]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f042 0210 	orr.w	r2, r2, #16
 8001b9c:	619a      	str	r2, [r3, #24]
 8001b9e:	e000      	b.n	8001ba2 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001ba0:	bf00      	nop
    }
  }
}
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_HCD_Start+0x16>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e013      	b.n	8001be6 <HAL_HCD_Start+0x3e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2101      	movs	r1, #1
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f003 fcae 	bl	800552e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 f9a7 	bl	8004f2a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_HCD_Stop+0x16>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e00d      	b.n	8001c20 <HAL_HCD_Stop+0x32>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f004 fa01 	bl	8006018 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f003 fc50 	bl	80054da <USB_ResetPort>
 8001c3a:	4603      	mov	r3, r0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c50:	78fa      	ldrb	r2, [r7, #3]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	1a9b      	subs	r3, r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	334c      	adds	r3, #76	@ 0x4c
 8001c60:	781b      	ldrb	r3, [r3, #0]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	460b      	mov	r3, r1
 8001c78:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c7a:	78fa      	ldrb	r2, [r7, #3]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	011b      	lsls	r3, r3, #4
 8001c82:	1a9b      	subs	r3, r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	3338      	adds	r3, #56	@ 0x38
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f003 fc92 	bl	80055ce <USB_GetCurrentFrame>
 8001caa:	4603      	mov	r3, r0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f003 fc6d 	bl	80055a0 <USB_GetHostSpeed>
 8001cc6:	4603      	mov	r3, r0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001cdc:	78fa      	ldrb	r2, [r7, #3]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	331a      	adds	r3, #26
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001cf0:	78fa      	ldrb	r2, [r7, #3]
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	1a9b      	subs	r3, r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	331b      	adds	r3, #27
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001d04:	78fa      	ldrb	r2, [r7, #3]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	3325      	adds	r3, #37	@ 0x25
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	3324      	adds	r3, #36	@ 0x24
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	460b      	mov	r3, r1
 8001d44:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	78fa      	ldrb	r2, [r7, #3]
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 fa5d 	bl	8005218 <USB_ReadChInterrupts>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d11a      	bne.n	8001d9e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	015a      	lsls	r2, r3, #5
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d74:	461a      	mov	r2, r3
 8001d76:	2304      	movs	r3, #4
 8001d78:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001d7a:	78fa      	ldrb	r2, [r7, #3]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	1a9b      	subs	r3, r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	334d      	adds	r3, #77	@ 0x4d
 8001d8a:	2207      	movs	r2, #7
 8001d8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	78fa      	ldrb	r2, [r7, #3]
 8001d94:	4611      	mov	r1, r2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 ffe1 	bl	8005d5e <USB_HC_Halt>
 8001d9c:	e09e      	b.n	8001edc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	78fa      	ldrb	r2, [r7, #3]
 8001da4:	4611      	mov	r1, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f003 fa36 	bl	8005218 <USB_ReadChInterrupts>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001db6:	d11b      	bne.n	8001df0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001dcc:	78fa      	ldrb	r2, [r7, #3]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	334d      	adds	r3, #77	@ 0x4d
 8001ddc:	2208      	movs	r2, #8
 8001dde:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	78fa      	ldrb	r2, [r7, #3]
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 ffb8 	bl	8005d5e <USB_HC_Halt>
 8001dee:	e075      	b.n	8001edc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	78fa      	ldrb	r2, [r7, #3]
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f003 fa0d 	bl	8005218 <USB_ReadChInterrupts>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d11a      	bne.n	8001e3e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e14:	461a      	mov	r2, r3
 8001e16:	2308      	movs	r3, #8
 8001e18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001e1a:	78fa      	ldrb	r2, [r7, #3]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	1a9b      	subs	r3, r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	334d      	adds	r3, #77	@ 0x4d
 8001e2a:	2206      	movs	r2, #6
 8001e2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	78fa      	ldrb	r2, [r7, #3]
 8001e34:	4611      	mov	r1, r2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f003 ff91 	bl	8005d5e <USB_HC_Halt>
 8001e3c:	e04e      	b.n	8001edc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	78fa      	ldrb	r2, [r7, #3]
 8001e44:	4611      	mov	r1, r2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f003 f9e6 	bl	8005218 <USB_ReadChInterrupts>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e56:	d11b      	bne.n	8001e90 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	015a      	lsls	r2, r3, #5
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e64:	461a      	mov	r2, r3
 8001e66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001e6c:	78fa      	ldrb	r2, [r7, #3]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	334d      	adds	r3, #77	@ 0x4d
 8001e7c:	2209      	movs	r2, #9
 8001e7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	78fa      	ldrb	r2, [r7, #3]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f003 ff68 	bl	8005d5e <USB_HC_Halt>
 8001e8e:	e025      	b.n	8001edc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	78fa      	ldrb	r2, [r7, #3]
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f003 f9bd 	bl	8005218 <USB_ReadChInterrupts>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ea4:	2b80      	cmp	r3, #128	@ 0x80
 8001ea6:	d119      	bne.n	8001edc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	015a      	lsls	r2, r3, #5
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	2380      	movs	r3, #128	@ 0x80
 8001eb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001eba:	78fa      	ldrb	r2, [r7, #3]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	334d      	adds	r3, #77	@ 0x4d
 8001eca:	2207      	movs	r2, #7
 8001ecc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	78fa      	ldrb	r2, [r7, #3]
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 ff41 	bl	8005d5e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 f997 	bl	8005218 <USB_ReadChInterrupts>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ef4:	d112      	bne.n	8001f1c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 ff2d 	bl	8005d5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	015a      	lsls	r2, r3, #5
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f10:	461a      	mov	r2, r3
 8001f12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f16:	6093      	str	r3, [r2, #8]
 8001f18:	f000 bd75 	b.w	8002a06 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	78fa      	ldrb	r2, [r7, #3]
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f003 f977 	bl	8005218 <USB_ReadChInterrupts>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	f040 8128 	bne.w	8002186 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	015a      	lsls	r2, r3, #5
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f42:	461a      	mov	r2, r3
 8001f44:	2320      	movs	r3, #32
 8001f46:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001f48:	78fa      	ldrb	r2, [r7, #3]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	1a9b      	subs	r3, r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	331b      	adds	r3, #27
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d119      	bne.n	8001f92 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	331b      	adds	r3, #27
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	0151      	lsls	r1, r2, #5
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	440a      	add	r2, r1
 8001f88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001f8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f90:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	799b      	ldrb	r3, [r3, #6]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d01b      	beq.n	8001fd2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f9a:	78fa      	ldrb	r2, [r7, #3]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	1a9b      	subs	r3, r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	3330      	adds	r3, #48	@ 0x30
 8001faa:	6819      	ldr	r1, [r3, #0]
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	015a      	lsls	r2, r3, #5
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbe:	78fa      	ldrb	r2, [r7, #3]
 8001fc0:	1ac9      	subs	r1, r1, r3
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4403      	add	r3, r0
 8001fce:	3338      	adds	r3, #56	@ 0x38
 8001fd0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	334d      	adds	r3, #77	@ 0x4d
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001fe6:	78fa      	ldrb	r2, [r7, #3]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3344      	adds	r3, #68	@ 0x44
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4413      	add	r3, r2
 8002002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002006:	461a      	mov	r2, r3
 8002008:	2301      	movs	r3, #1
 800200a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	3326      	adds	r3, #38	@ 0x26
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	3326      	adds	r3, #38	@ 0x26
 8002032:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002034:	2b02      	cmp	r3, #2
 8002036:	d110      	bne.n	800205a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	78fa      	ldrb	r2, [r7, #3]
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f003 fe8c 	bl	8005d5e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	015a      	lsls	r2, r3, #5
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4413      	add	r3, r2
 800204e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002052:	461a      	mov	r2, r3
 8002054:	2310      	movs	r3, #16
 8002056:	6093      	str	r3, [r2, #8]
 8002058:	e03d      	b.n	80020d6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800205a:	78fa      	ldrb	r2, [r7, #3]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	3326      	adds	r3, #38	@ 0x26
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b03      	cmp	r3, #3
 800206e:	d00a      	beq.n	8002086 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	3326      	adds	r3, #38	@ 0x26
 8002080:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002082:	2b01      	cmp	r3, #1
 8002084:	d127      	bne.n	80020d6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	78fa      	ldrb	r2, [r7, #3]
 8002096:	0151      	lsls	r1, r2, #5
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	440a      	add	r2, r1
 800209c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80020a4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	334c      	adds	r3, #76	@ 0x4c
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80020ba:	78fa      	ldrb	r2, [r7, #3]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	334c      	adds	r3, #76	@ 0x4c
 80020ca:	781a      	ldrb	r2, [r3, #0]
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	4619      	mov	r1, r3
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f007 f935 	bl	8009340 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	799b      	ldrb	r3, [r3, #6]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d13b      	bne.n	8002156 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80020de:	78fa      	ldrb	r2, [r7, #3]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	3338      	adds	r3, #56	@ 0x38
 80020ee:	6819      	ldr	r1, [r3, #0]
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4403      	add	r3, r0
 80020fe:	3328      	adds	r3, #40	@ 0x28
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	440b      	add	r3, r1
 8002104:	1e59      	subs	r1, r3, #1
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4403      	add	r3, r0
 8002114:	3328      	adds	r3, #40	@ 0x28
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	fbb1 f3f3 	udiv	r3, r1, r3
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 8470 	beq.w	8002a06 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002126:	78fa      	ldrb	r2, [r7, #3]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	1a9b      	subs	r3, r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	333c      	adds	r3, #60	@ 0x3c
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	f083 0301 	eor.w	r3, r3, #1
 800213e:	b2d8      	uxtb	r0, r3
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	333c      	adds	r3, #60	@ 0x3c
 800214e:	4602      	mov	r2, r0
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	f000 bc58 	b.w	8002a06 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	333c      	adds	r3, #60	@ 0x3c
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	f083 0301 	eor.w	r3, r3, #1
 800216e:	b2d8      	uxtb	r0, r3
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	333c      	adds	r3, #60	@ 0x3c
 800217e:	4602      	mov	r2, r0
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	f000 bc40 	b.w	8002a06 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	78fa      	ldrb	r2, [r7, #3]
 800218c:	4611      	mov	r1, r2
 800218e:	4618      	mov	r0, r3
 8002190:	f003 f842 	bl	8005218 <USB_ReadChInterrupts>
 8002194:	4603      	mov	r3, r0
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b20      	cmp	r3, #32
 800219c:	d131      	bne.n	8002202 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021aa:	461a      	mov	r2, r3
 80021ac:	2320      	movs	r3, #32
 80021ae:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	331a      	adds	r3, #26
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	f040 841f 	bne.w	8002a06 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	331b      	adds	r3, #27
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80021dc:	78fa      	ldrb	r2, [r7, #3]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	334d      	adds	r3, #77	@ 0x4d
 80021ec:	2203      	movs	r2, #3
 80021ee:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 fdb0 	bl	8005d5e <USB_HC_Halt>
 80021fe:	f000 bc02 	b.w	8002a06 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f003 f804 	bl	8005218 <USB_ReadChInterrupts>
 8002210:	4603      	mov	r3, r0
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b02      	cmp	r3, #2
 8002218:	f040 8305 	bne.w	8002826 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	015a      	lsls	r2, r3, #5
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4413      	add	r3, r2
 8002224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002228:	461a      	mov	r2, r3
 800222a:	2302      	movs	r3, #2
 800222c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	1a9b      	subs	r3, r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	334d      	adds	r3, #77	@ 0x4d
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d114      	bne.n	800226e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	334d      	adds	r3, #77	@ 0x4d
 8002254:	2202      	movs	r2, #2
 8002256:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	334c      	adds	r3, #76	@ 0x4c
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	e2cc      	b.n	8002808 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	1a9b      	subs	r3, r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	334d      	adds	r3, #77	@ 0x4d
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b06      	cmp	r3, #6
 8002282:	d114      	bne.n	80022ae <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	1a9b      	subs	r3, r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	334d      	adds	r3, #77	@ 0x4d
 8002294:	2202      	movs	r2, #2
 8002296:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	1a9b      	subs	r3, r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	334c      	adds	r3, #76	@ 0x4c
 80022a8:	2205      	movs	r2, #5
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	e2ac      	b.n	8002808 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	1a9b      	subs	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	334d      	adds	r3, #77	@ 0x4d
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b07      	cmp	r3, #7
 80022c2:	d00b      	beq.n	80022dc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	334d      	adds	r3, #77	@ 0x4d
 80022d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80022d6:	2b09      	cmp	r3, #9
 80022d8:	f040 80a6 	bne.w	8002428 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	334d      	adds	r3, #77	@ 0x4d
 80022ec:	2202      	movs	r2, #2
 80022ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	3344      	adds	r3, #68	@ 0x44
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	1c59      	adds	r1, r3, #1
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	1a9b      	subs	r3, r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4403      	add	r3, r0
 8002310:	3344      	adds	r3, #68	@ 0x44
 8002312:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	3344      	adds	r3, #68	@ 0x44
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d943      	bls.n	80023b2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	3344      	adds	r3, #68	@ 0x44
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	331a      	adds	r3, #26
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d123      	bne.n	800239c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	331b      	adds	r3, #27
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	331c      	adds	r3, #28
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	0151      	lsls	r1, r2, #5
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	440a      	add	r2, r1
 8002392:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800239a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	334c      	adds	r3, #76	@ 0x4c
 80023ac:	2204      	movs	r2, #4
 80023ae:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023b0:	e229      	b.n	8002806 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	334c      	adds	r3, #76	@ 0x4c
 80023c2:	2202      	movs	r2, #2
 80023c4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023c6:	78fa      	ldrb	r2, [r7, #3]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	3326      	adds	r3, #38	@ 0x26
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00b      	beq.n	80023f4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	3326      	adds	r3, #38	@ 0x26
 80023ec:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	f040 8209 	bne.w	8002806 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800240a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002412:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4413      	add	r3, r2
 800241c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002420:	461a      	mov	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002426:	e1ee      	b.n	8002806 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	334d      	adds	r3, #77	@ 0x4d
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b05      	cmp	r3, #5
 800243c:	f040 80c8 	bne.w	80025d0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002440:	78fa      	ldrb	r2, [r7, #3]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	334d      	adds	r3, #77	@ 0x4d
 8002450:	2202      	movs	r2, #2
 8002452:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	331b      	adds	r3, #27
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b01      	cmp	r3, #1
 8002468:	f040 81ce 	bne.w	8002808 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	3326      	adds	r3, #38	@ 0x26
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d16b      	bne.n	800255a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	3348      	adds	r3, #72	@ 0x48
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	1c59      	adds	r1, r3, #1
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4403      	add	r3, r0
 80024a2:	3348      	adds	r3, #72	@ 0x48
 80024a4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	3348      	adds	r3, #72	@ 0x48
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d943      	bls.n	8002544 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	1a9b      	subs	r3, r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	3348      	adds	r3, #72	@ 0x48
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	331b      	adds	r3, #27
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	3344      	adds	r3, #68	@ 0x44
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d809      	bhi.n	800250e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	331c      	adds	r3, #28
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800250e:	78fb      	ldrb	r3, [r7, #3]
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4413      	add	r3, r2
 8002516:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	0151      	lsls	r1, r2, #5
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	440a      	add	r2, r1
 8002524:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002528:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800252c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800252e:	78fa      	ldrb	r2, [r7, #3]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	334c      	adds	r3, #76	@ 0x4c
 800253e:	2204      	movs	r2, #4
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	e014      	b.n	800256e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	334c      	adds	r3, #76	@ 0x4c
 8002554:	2202      	movs	r2, #2
 8002556:	701a      	strb	r2, [r3, #0]
 8002558:	e009      	b.n	800256e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800255a:	78fa      	ldrb	r2, [r7, #3]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	334c      	adds	r3, #76	@ 0x4c
 800256a:	2202      	movs	r2, #2
 800256c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800256e:	78fa      	ldrb	r2, [r7, #3]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	3326      	adds	r3, #38	@ 0x26
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00b      	beq.n	800259c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	3326      	adds	r3, #38	@ 0x26
 8002594:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002596:	2b02      	cmp	r3, #2
 8002598:	f040 8136 	bne.w	8002808 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800259c:	78fb      	ldrb	r3, [r7, #3]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80025b2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80025ba:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025c8:	461a      	mov	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e11b      	b.n	8002808 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	334d      	adds	r3, #77	@ 0x4d
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	f040 8081 	bne.w	80026ea <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	334d      	adds	r3, #77	@ 0x4d
 80025f8:	2202      	movs	r2, #2
 80025fa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	331b      	adds	r3, #27
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b01      	cmp	r3, #1
 8002610:	f040 80fa 	bne.w	8002808 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	334c      	adds	r3, #76	@ 0x4c
 8002624:	2202      	movs	r2, #2
 8002626:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	78fa      	ldrb	r2, [r7, #3]
 8002638:	0151      	lsls	r1, r2, #5
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	440a      	add	r2, r1
 800263e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002646:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	0151      	lsls	r1, r2, #5
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	440a      	add	r2, r1
 800265e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002666:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	78fa      	ldrb	r2, [r7, #3]
 8002678:	0151      	lsls	r1, r2, #5
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	440a      	add	r2, r1
 800267e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002682:	f023 0320 	bic.w	r3, r3, #32
 8002686:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	3326      	adds	r3, #38	@ 0x26
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00b      	beq.n	80026b6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	3326      	adds	r3, #38	@ 0x26
 80026ae:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	f040 80a9 	bne.w	8002808 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026cc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026d4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	e08e      	b.n	8002808 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80026ea:	78fa      	ldrb	r2, [r7, #3]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	334d      	adds	r3, #77	@ 0x4d
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d143      	bne.n	8002788 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	334d      	adds	r3, #77	@ 0x4d
 8002710:	2202      	movs	r2, #2
 8002712:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	334c      	adds	r3, #76	@ 0x4c
 8002724:	2202      	movs	r2, #2
 8002726:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002728:	78fa      	ldrb	r2, [r7, #3]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	3326      	adds	r3, #38	@ 0x26
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800273e:	78fa      	ldrb	r2, [r7, #3]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	1a9b      	subs	r3, r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	3326      	adds	r3, #38	@ 0x26
 800274e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002750:	2b02      	cmp	r3, #2
 8002752:	d159      	bne.n	8002808 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002754:	78fb      	ldrb	r3, [r7, #3]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800276a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002772:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002780:	461a      	mov	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e03f      	b.n	8002808 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	334d      	adds	r3, #77	@ 0x4d
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b08      	cmp	r3, #8
 800279c:	d126      	bne.n	80027ec <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	334d      	adds	r3, #77	@ 0x4d
 80027ae:	2202      	movs	r2, #2
 80027b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	3344      	adds	r3, #68	@ 0x44
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	1c59      	adds	r1, r3, #1
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4403      	add	r3, r0
 80027d2:	3344      	adds	r3, #68	@ 0x44
 80027d4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80027d6:	78fa      	ldrb	r2, [r7, #3]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	334c      	adds	r3, #76	@ 0x4c
 80027e6:	2204      	movs	r2, #4
 80027e8:	701a      	strb	r2, [r3, #0]
 80027ea:	e00d      	b.n	8002808 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80027ec:	78fa      	ldrb	r2, [r7, #3]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	1a9b      	subs	r3, r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	334d      	adds	r3, #77	@ 0x4d
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	f000 8100 	beq.w	8002a04 <HCD_HC_IN_IRQHandler+0xcca>
 8002804:	e000      	b.n	8002808 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002806:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	334c      	adds	r3, #76	@ 0x4c
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	4619      	mov	r1, r3
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f006 fd8e 	bl	8009340 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002824:	e0ef      	b.n	8002a06 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f002 fcf2 	bl	8005218 <USB_ReadChInterrupts>
 8002834:	4603      	mov	r3, r0
 8002836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800283a:	2b40      	cmp	r3, #64	@ 0x40
 800283c:	d12f      	bne.n	800289e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800284a:	461a      	mov	r2, r3
 800284c:	2340      	movs	r3, #64	@ 0x40
 800284e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	334d      	adds	r3, #77	@ 0x4d
 8002860:	2205      	movs	r2, #5
 8002862:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002864:	78fa      	ldrb	r2, [r7, #3]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	331a      	adds	r3, #26
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800287a:	78fa      	ldrb	r2, [r7, #3]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	1a9b      	subs	r3, r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	3344      	adds	r3, #68	@ 0x44
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	78fa      	ldrb	r2, [r7, #3]
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f003 fa61 	bl	8005d5e <USB_HC_Halt>
 800289c:	e0b3      	b.n	8002a06 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	78fa      	ldrb	r2, [r7, #3]
 80028a4:	4611      	mov	r1, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f002 fcb6 	bl	8005218 <USB_ReadChInterrupts>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	2b10      	cmp	r3, #16
 80028b4:	f040 80a7 	bne.w	8002a06 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80028b8:	78fa      	ldrb	r2, [r7, #3]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	3326      	adds	r3, #38	@ 0x26
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d11b      	bne.n	8002906 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	3344      	adds	r3, #68	@ 0x44
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	334d      	adds	r3, #77	@ 0x4d
 80028f2:	2204      	movs	r2, #4
 80028f4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f003 fa2d 	bl	8005d5e <USB_HC_Halt>
 8002904:	e03f      	b.n	8002986 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	3326      	adds	r3, #38	@ 0x26
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00a      	beq.n	8002932 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	3326      	adds	r3, #38	@ 0x26
 800292c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800292e:	2b02      	cmp	r3, #2
 8002930:	d129      	bne.n	8002986 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3344      	adds	r3, #68	@ 0x44
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	799b      	ldrb	r3, [r3, #6]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HCD_HC_IN_IRQHandler+0xc2a>
 800294e:	78fa      	ldrb	r2, [r7, #3]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	331b      	adds	r3, #27
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d110      	bne.n	8002986 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	334d      	adds	r3, #77	@ 0x4d
 8002974:	2204      	movs	r2, #4
 8002976:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	4611      	mov	r1, r2
 8002980:	4618      	mov	r0, r3
 8002982:	f003 f9ec 	bl	8005d5e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	331b      	adds	r3, #27
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d129      	bne.n	80029f0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	331b      	adds	r3, #27
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	0151      	lsls	r1, r2, #5
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	440a      	add	r2, r1
 80029c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ce:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	0151      	lsls	r1, r2, #5
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	440a      	add	r2, r1
 80029e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029ea:	f043 0320 	orr.w	r3, r3, #32
 80029ee:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029fc:	461a      	mov	r2, r3
 80029fe:	2310      	movs	r3, #16
 8002a00:	6093      	str	r3, [r2, #8]
 8002a02:	e000      	b.n	8002a06 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002a04:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f002 fbf4 	bl	8005218 <USB_ReadChInterrupts>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d11b      	bne.n	8002a72 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a3a:	78fb      	ldrb	r3, [r7, #3]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a46:	461a      	mov	r2, r3
 8002a48:	2304      	movs	r3, #4
 8002a4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	334d      	adds	r3, #77	@ 0x4d
 8002a5c:	2207      	movs	r2, #7
 8002a5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f003 f978 	bl	8005d5e <USB_HC_Halt>
 8002a6e:	f000 bc6f 	b.w	8003350 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	4611      	mov	r1, r2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f002 fbcc 	bl	8005218 <USB_ReadChInterrupts>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	f040 8082 	bne.w	8002b90 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a98:	461a      	mov	r2, r3
 8002a9a:	2320      	movs	r3, #32
 8002a9c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	3319      	adds	r3, #25
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d124      	bne.n	8002afe <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	3319      	adds	r3, #25
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	334c      	adds	r3, #76	@ 0x4c
 8002ad8:	2202      	movs	r2, #2
 8002ada:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	1a9b      	subs	r3, r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	334d      	adds	r3, #77	@ 0x4d
 8002aec:	2203      	movs	r2, #3
 8002aee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f003 f930 	bl	8005d5e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002afe:	78fa      	ldrb	r2, [r7, #3]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	331a      	adds	r3, #26
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	f040 841d 	bne.w	8003350 <HCD_HC_OUT_IRQHandler+0x944>
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	331b      	adds	r3, #27
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f040 8411 	bne.w	8003350 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002b2e:	78fa      	ldrb	r2, [r7, #3]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	1a9b      	subs	r3, r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3326      	adds	r3, #38	@ 0x26
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d009      	beq.n	8002b58 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002b44:	78fa      	ldrb	r2, [r7, #3]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	331b      	adds	r3, #27
 8002b54:	2201      	movs	r2, #1
 8002b56:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	334d      	adds	r3, #77	@ 0x4d
 8002b68:	2203      	movs	r2, #3
 8002b6a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	78fa      	ldrb	r2, [r7, #3]
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f003 f8f2 	bl	8005d5e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b7a:	78fa      	ldrb	r2, [r7, #3]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	1a9b      	subs	r3, r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	3344      	adds	r3, #68	@ 0x44
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	e3df      	b.n	8003350 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f002 fb3d 	bl	8005218 <USB_ReadChInterrupts>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ba8:	d111      	bne.n	8002bce <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bbc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f003 f8c9 	bl	8005d5e <USB_HC_Halt>
 8002bcc:	e3c0      	b.n	8003350 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f002 fb1e 	bl	8005218 <USB_ReadChInterrupts>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d168      	bne.n	8002cb8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3344      	adds	r3, #68	@ 0x44
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	4611      	mov	r1, r2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f002 fb08 	bl	8005218 <USB_ReadChInterrupts>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c0e:	2b40      	cmp	r3, #64	@ 0x40
 8002c10:	d112      	bne.n	8002c38 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	3319      	adds	r3, #25
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c32:	461a      	mov	r2, r3
 8002c34:	2340      	movs	r3, #64	@ 0x40
 8002c36:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	331b      	adds	r3, #27
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d019      	beq.n	8002c82 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	331b      	adds	r3, #27
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	0151      	lsls	r1, r2, #5
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	440a      	add	r2, r1
 8002c78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c80:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c8e:	461a      	mov	r2, r3
 8002c90:	2301      	movs	r3, #1
 8002c92:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	334d      	adds	r3, #77	@ 0x4d
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	4611      	mov	r1, r2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f003 f854 	bl	8005d5e <USB_HC_Halt>
 8002cb6:	e34b      	b.n	8003350 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f002 faa9 	bl	8005218 <USB_ReadChInterrupts>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ccc:	2b40      	cmp	r3, #64	@ 0x40
 8002cce:	d139      	bne.n	8002d44 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	334d      	adds	r3, #77	@ 0x4d
 8002ce0:	2205      	movs	r2, #5
 8002ce2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	331a      	adds	r3, #26
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	3319      	adds	r3, #25
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3344      	adds	r3, #68	@ 0x44
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f003 f817 	bl	8005d5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	2340      	movs	r3, #64	@ 0x40
 8002d40:	6093      	str	r3, [r2, #8]
 8002d42:	e305      	b.n	8003350 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	78fa      	ldrb	r2, [r7, #3]
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f002 fa63 	bl	8005218 <USB_ReadChInterrupts>
 8002d52:	4603      	mov	r3, r0
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d11a      	bne.n	8002d92 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d68:	461a      	mov	r2, r3
 8002d6a:	2308      	movs	r3, #8
 8002d6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	334d      	adds	r3, #77	@ 0x4d
 8002d7e:	2206      	movs	r2, #6
 8002d80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	4611      	mov	r1, r2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f002 ffe7 	bl	8005d5e <USB_HC_Halt>
 8002d90:	e2de      	b.n	8003350 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	78fa      	ldrb	r2, [r7, #3]
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f002 fa3c 	bl	8005218 <USB_ReadChInterrupts>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	d144      	bne.n	8002e34 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	3344      	adds	r3, #68	@ 0x44
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	334d      	adds	r3, #77	@ 0x4d
 8002dce:	2204      	movs	r2, #4
 8002dd0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	1a9b      	subs	r3, r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	3319      	adds	r3, #25
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d114      	bne.n	8002e12 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	3318      	adds	r3, #24
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002dfe:	78fa      	ldrb	r2, [r7, #3]
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	3319      	adds	r3, #25
 8002e0e:	2201      	movs	r2, #1
 8002e10:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	4611      	mov	r1, r2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f002 ff9f 	bl	8005d5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2310      	movs	r3, #16
 8002e30:	6093      	str	r3, [r2, #8]
 8002e32:	e28d      	b.n	8003350 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f002 f9eb 	bl	8005218 <USB_ReadChInterrupts>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e48:	2b80      	cmp	r3, #128	@ 0x80
 8002e4a:	d169      	bne.n	8002f20 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	799b      	ldrb	r3, [r3, #6]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d111      	bne.n	8002e78 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	334d      	adds	r3, #77	@ 0x4d
 8002e64:	2207      	movs	r2, #7
 8002e66:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f002 ff74 	bl	8005d5e <USB_HC_Halt>
 8002e76:	e049      	b.n	8002f0c <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	3344      	adds	r3, #68	@ 0x44
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	1c59      	adds	r1, r3, #1
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4403      	add	r3, r0
 8002e98:	3344      	adds	r3, #68	@ 0x44
 8002e9a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3344      	adds	r3, #68	@ 0x44
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d922      	bls.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3344      	adds	r3, #68	@ 0x44
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	334c      	adds	r3, #76	@ 0x4c
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	334c      	adds	r3, #76	@ 0x4c
 8002eea:	781a      	ldrb	r2, [r3, #0]
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f006 fa25 	bl	8009340 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ef6:	e009      	b.n	8002f0c <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	334c      	adds	r3, #76	@ 0x4c
 8002f08:	2202      	movs	r2, #2
 8002f0a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f18:	461a      	mov	r2, r3
 8002f1a:	2380      	movs	r3, #128	@ 0x80
 8002f1c:	6093      	str	r3, [r2, #8]
 8002f1e:	e217      	b.n	8003350 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f002 f975 	bl	8005218 <USB_ReadChInterrupts>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f38:	d11b      	bne.n	8002f72 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	334d      	adds	r3, #77	@ 0x4d
 8002f4a:	2209      	movs	r2, #9
 8002f4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	4611      	mov	r1, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f002 ff01 	bl	8005d5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f68:	461a      	mov	r2, r3
 8002f6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f6e:	6093      	str	r3, [r2, #8]
 8002f70:	e1ee      	b.n	8003350 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f002 f94c 	bl	8005218 <USB_ReadChInterrupts>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	f040 81df 	bne.w	800334a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	015a      	lsls	r2, r3, #5
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	334d      	adds	r3, #77	@ 0x4d
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	f040 8093 	bne.w	80030dc <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	334d      	adds	r3, #77	@ 0x4d
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	334c      	adds	r3, #76	@ 0x4c
 8002fda:	2201      	movs	r2, #1
 8002fdc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	3326      	adds	r3, #38	@ 0x26
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d00b      	beq.n	800300c <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	3326      	adds	r3, #38	@ 0x26
 8003004:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003006:	2b03      	cmp	r3, #3
 8003008:	f040 8190 	bne.w	800332c <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	799b      	ldrb	r3, [r3, #6]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d115      	bne.n	8003040 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	333d      	adds	r3, #61	@ 0x3d
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	f083 0301 	eor.w	r3, r3, #1
 800302c:	b2d8      	uxtb	r0, r3
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	333d      	adds	r3, #61	@ 0x3d
 800303c:	4602      	mov	r2, r0
 800303e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	799b      	ldrb	r3, [r3, #6]
 8003044:	2b01      	cmp	r3, #1
 8003046:	f040 8171 	bne.w	800332c <HCD_HC_OUT_IRQHandler+0x920>
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	3334      	adds	r3, #52	@ 0x34
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8165 	beq.w	800332c <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	1a9b      	subs	r3, r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	3334      	adds	r3, #52	@ 0x34
 8003072:	6819      	ldr	r1, [r3, #0]
 8003074:	78fa      	ldrb	r2, [r7, #3]
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4403      	add	r3, r0
 8003082:	3328      	adds	r3, #40	@ 0x28
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	440b      	add	r3, r1
 8003088:	1e59      	subs	r1, r3, #1
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4403      	add	r3, r0
 8003098:	3328      	adds	r3, #40	@ 0x28
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	fbb1 f3f3 	udiv	r3, r1, r3
 80030a0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 813f 	beq.w	800332c <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	333d      	adds	r3, #61	@ 0x3d
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	f083 0301 	eor.w	r3, r3, #1
 80030c6:	b2d8      	uxtb	r0, r3
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	333d      	adds	r3, #61	@ 0x3d
 80030d6:	4602      	mov	r2, r0
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	e127      	b.n	800332c <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80030dc:	78fa      	ldrb	r2, [r7, #3]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	1a9b      	subs	r3, r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	334d      	adds	r3, #77	@ 0x4d
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b03      	cmp	r3, #3
 80030f0:	d120      	bne.n	8003134 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	334d      	adds	r3, #77	@ 0x4d
 8003102:	2202      	movs	r2, #2
 8003104:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	331b      	adds	r3, #27
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b01      	cmp	r3, #1
 800311a:	f040 8107 	bne.w	800332c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	334c      	adds	r3, #76	@ 0x4c
 800312e:	2202      	movs	r2, #2
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	e0fb      	b.n	800332c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	334d      	adds	r3, #77	@ 0x4d
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b04      	cmp	r3, #4
 8003148:	d13a      	bne.n	80031c0 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	334d      	adds	r3, #77	@ 0x4d
 800315a:	2202      	movs	r2, #2
 800315c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	334c      	adds	r3, #76	@ 0x4c
 800316e:	2202      	movs	r2, #2
 8003170:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	331b      	adds	r3, #27
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b01      	cmp	r3, #1
 8003186:	f040 80d1 	bne.w	800332c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	331b      	adds	r3, #27
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	0151      	lsls	r1, r2, #5
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	440a      	add	r2, r1
 80031b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031bc:	6053      	str	r3, [r2, #4]
 80031be:	e0b5      	b.n	800332c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	334d      	adds	r3, #77	@ 0x4d
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b05      	cmp	r3, #5
 80031d4:	d114      	bne.n	8003200 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	334d      	adds	r3, #77	@ 0x4d
 80031e6:	2202      	movs	r2, #2
 80031e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	334c      	adds	r3, #76	@ 0x4c
 80031fa:	2202      	movs	r2, #2
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	e095      	b.n	800332c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	334d      	adds	r3, #77	@ 0x4d
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b06      	cmp	r3, #6
 8003214:	d114      	bne.n	8003240 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	334d      	adds	r3, #77	@ 0x4d
 8003226:	2202      	movs	r2, #2
 8003228:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	334c      	adds	r3, #76	@ 0x4c
 800323a:	2205      	movs	r2, #5
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	e075      	b.n	800332c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	334d      	adds	r3, #77	@ 0x4d
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b07      	cmp	r3, #7
 8003254:	d00a      	beq.n	800326c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	334d      	adds	r3, #77	@ 0x4d
 8003266:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003268:	2b09      	cmp	r3, #9
 800326a:	d170      	bne.n	800334e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	334d      	adds	r3, #77	@ 0x4d
 800327c:	2202      	movs	r2, #2
 800327e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	3344      	adds	r3, #68	@ 0x44
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	1c59      	adds	r1, r3, #1
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4403      	add	r3, r0
 80032a0:	3344      	adds	r3, #68	@ 0x44
 80032a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	3344      	adds	r3, #68	@ 0x44
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d914      	bls.n	80032e4 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	3344      	adds	r3, #68	@ 0x44
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	334c      	adds	r3, #76	@ 0x4c
 80032de:	2204      	movs	r2, #4
 80032e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032e2:	e022      	b.n	800332a <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	334c      	adds	r3, #76	@ 0x4c
 80032f4:	2202      	movs	r2, #2
 80032f6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800330e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003316:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4413      	add	r3, r2
 8003320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003324:	461a      	mov	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800332a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	334c      	adds	r3, #76	@ 0x4c
 800333c:	781a      	ldrb	r2, [r3, #0]
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	4619      	mov	r1, r3
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f005 fffc 	bl	8009340 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003348:	e002      	b.n	8003350 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800334a:	bf00      	nop
 800334c:	e000      	b.n	8003350 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800334e:	bf00      	nop
  }
}
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b08a      	sub	sp, #40	@ 0x28
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003366:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	0c5b      	lsrs	r3, r3, #17
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800338a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d004      	beq.n	800339c <HCD_RXQLVL_IRQHandler+0x46>
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b05      	cmp	r3, #5
 8003396:	f000 80b6 	beq.w	8003506 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800339a:	e0b7      	b.n	800350c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80b3 	beq.w	800350a <HCD_RXQLVL_IRQHandler+0x1b4>
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	332c      	adds	r3, #44	@ 0x2c
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80a7 	beq.w	800350a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4613      	mov	r3, r2
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	3338      	adds	r3, #56	@ 0x38
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	18d1      	adds	r1, r2, r3
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4403      	add	r3, r0
 80033e0:	3334      	adds	r3, #52	@ 0x34
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4299      	cmp	r1, r3
 80033e6:	f200 8083 	bhi.w	80034f0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4613      	mov	r3, r2
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	332c      	adds	r3, #44	@ 0x2c
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	b292      	uxth	r2, r2
 8003404:	4619      	mov	r1, r3
 8003406:	f001 fe9c 	bl	8005142 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	332c      	adds	r3, #44	@ 0x2c
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	18d1      	adds	r1, r2, r3
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4403      	add	r3, r0
 800342e:	332c      	adds	r3, #44	@ 0x2c
 8003430:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	3338      	adds	r3, #56	@ 0x38
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	18d1      	adds	r1, r2, r3
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4403      	add	r3, r0
 8003456:	3338      	adds	r3, #56	@ 0x38
 8003458:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	4413      	add	r3, r2
 8003462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	0cdb      	lsrs	r3, r3, #19
 800346a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800346e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	3328      	adds	r3, #40	@ 0x28
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4293      	cmp	r3, r2
 8003488:	d13f      	bne.n	800350a <HCD_RXQLVL_IRQHandler+0x1b4>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d03c      	beq.n	800350a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	4413      	add	r3, r2
 8003498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034a6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034ae:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034bc:	461a      	mov	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	333c      	adds	r3, #60	@ 0x3c
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	f083 0301 	eor.w	r3, r3, #1
 80034d8:	b2d8      	uxtb	r0, r3
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	333c      	adds	r3, #60	@ 0x3c
 80034ea:	4602      	mov	r2, r0
 80034ec:	701a      	strb	r2, [r3, #0]
      break;
 80034ee:	e00c      	b.n	800350a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	334c      	adds	r3, #76	@ 0x4c
 8003500:	2204      	movs	r2, #4
 8003502:	701a      	strb	r2, [r3, #0]
      break;
 8003504:	e001      	b.n	800350a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003506:	bf00      	nop
 8003508:	e000      	b.n	800350c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800350a:	bf00      	nop
  }
}
 800350c:	bf00      	nop
 800350e:	3728      	adds	r7, #40	@ 0x28
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003540:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b02      	cmp	r3, #2
 800354a:	d10b      	bne.n	8003564 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b01      	cmp	r3, #1
 8003554:	d102      	bne.n	800355c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f005 fed6 	bl	8009308 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f043 0302 	orr.w	r3, r3, #2
 8003562:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b08      	cmp	r3, #8
 800356c:	d132      	bne.n	80035d4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f043 0308 	orr.w	r3, r3, #8
 8003574:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b04      	cmp	r3, #4
 800357e:	d126      	bne.n	80035ce <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	7a5b      	ldrb	r3, [r3, #9]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d113      	bne.n	80035b0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800358e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003592:	d106      	bne.n	80035a2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2102      	movs	r1, #2
 800359a:	4618      	mov	r0, r3
 800359c:	f001 ff60 	bl	8005460 <USB_InitFSLSPClkSel>
 80035a0:	e011      	b.n	80035c6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2101      	movs	r1, #1
 80035a8:	4618      	mov	r0, r3
 80035aa:	f001 ff59 	bl	8005460 <USB_InitFSLSPClkSel>
 80035ae:	e00a      	b.n	80035c6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	79db      	ldrb	r3, [r3, #7]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d106      	bne.n	80035c6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035be:	461a      	mov	r2, r3
 80035c0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80035c4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f005 fec8 	bl	800935c <HAL_HCD_PortEnabled_Callback>
 80035cc:	e002      	b.n	80035d4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f005 fed2 	bl	8009378 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b20      	cmp	r3, #32
 80035dc:	d103      	bne.n	80035e6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f043 0320 	orr.w	r3, r3, #32
 80035e4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80035ec:	461a      	mov	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	6013      	str	r3, [r2, #0]
}
 80035f2:	bf00      	nop
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e12b      	b.n	8003866 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fd f9fa 	bl	8000a1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2224      	movs	r2, #36	@ 0x24
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800364e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800365e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003660:	f001 fa20 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 8003664:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	4a81      	ldr	r2, [pc, #516]	@ (8003870 <HAL_I2C_Init+0x274>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d807      	bhi.n	8003680 <HAL_I2C_Init+0x84>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4a80      	ldr	r2, [pc, #512]	@ (8003874 <HAL_I2C_Init+0x278>)
 8003674:	4293      	cmp	r3, r2
 8003676:	bf94      	ite	ls
 8003678:	2301      	movls	r3, #1
 800367a:	2300      	movhi	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	e006      	b.n	800368e <HAL_I2C_Init+0x92>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4a7d      	ldr	r2, [pc, #500]	@ (8003878 <HAL_I2C_Init+0x27c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	bf94      	ite	ls
 8003688:	2301      	movls	r3, #1
 800368a:	2300      	movhi	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e0e7      	b.n	8003866 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4a78      	ldr	r2, [pc, #480]	@ (800387c <HAL_I2C_Init+0x280>)
 800369a:	fba2 2303 	umull	r2, r3, r2, r3
 800369e:	0c9b      	lsrs	r3, r3, #18
 80036a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003870 <HAL_I2C_Init+0x274>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d802      	bhi.n	80036d0 <HAL_I2C_Init+0xd4>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	3301      	adds	r3, #1
 80036ce:	e009      	b.n	80036e4 <HAL_I2C_Init+0xe8>
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80036d6:	fb02 f303 	mul.w	r3, r2, r3
 80036da:	4a69      	ldr	r2, [pc, #420]	@ (8003880 <HAL_I2C_Init+0x284>)
 80036dc:	fba2 2303 	umull	r2, r3, r2, r3
 80036e0:	099b      	lsrs	r3, r3, #6
 80036e2:	3301      	adds	r3, #1
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	430b      	orrs	r3, r1
 80036ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80036f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	495c      	ldr	r1, [pc, #368]	@ (8003870 <HAL_I2C_Init+0x274>)
 8003700:	428b      	cmp	r3, r1
 8003702:	d819      	bhi.n	8003738 <HAL_I2C_Init+0x13c>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	1e59      	subs	r1, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003712:	1c59      	adds	r1, r3, #1
 8003714:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003718:	400b      	ands	r3, r1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_I2C_Init+0x138>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1e59      	subs	r1, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	fbb1 f3f3 	udiv	r3, r1, r3
 800372c:	3301      	adds	r3, #1
 800372e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003732:	e051      	b.n	80037d8 <HAL_I2C_Init+0x1dc>
 8003734:	2304      	movs	r3, #4
 8003736:	e04f      	b.n	80037d8 <HAL_I2C_Init+0x1dc>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d111      	bne.n	8003764 <HAL_I2C_Init+0x168>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	1e58      	subs	r0, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6859      	ldr	r1, [r3, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	440b      	add	r3, r1
 800374e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003752:	3301      	adds	r3, #1
 8003754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003758:	2b00      	cmp	r3, #0
 800375a:	bf0c      	ite	eq
 800375c:	2301      	moveq	r3, #1
 800375e:	2300      	movne	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	e012      	b.n	800378a <HAL_I2C_Init+0x18e>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	1e58      	subs	r0, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6859      	ldr	r1, [r3, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	0099      	lsls	r1, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	fbb0 f3f3 	udiv	r3, r0, r3
 800377a:	3301      	adds	r3, #1
 800377c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003780:	2b00      	cmp	r3, #0
 8003782:	bf0c      	ite	eq
 8003784:	2301      	moveq	r3, #1
 8003786:	2300      	movne	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_I2C_Init+0x196>
 800378e:	2301      	movs	r3, #1
 8003790:	e022      	b.n	80037d8 <HAL_I2C_Init+0x1dc>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10e      	bne.n	80037b8 <HAL_I2C_Init+0x1bc>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1e58      	subs	r0, r3, #1
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6859      	ldr	r1, [r3, #4]
 80037a2:	460b      	mov	r3, r1
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	440b      	add	r3, r1
 80037a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ac:	3301      	adds	r3, #1
 80037ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037b6:	e00f      	b.n	80037d8 <HAL_I2C_Init+0x1dc>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	1e58      	subs	r0, r3, #1
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6859      	ldr	r1, [r3, #4]
 80037c0:	460b      	mov	r3, r1
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	0099      	lsls	r1, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ce:	3301      	adds	r3, #1
 80037d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	6809      	ldr	r1, [r1, #0]
 80037dc:	4313      	orrs	r3, r2
 80037de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69da      	ldr	r2, [r3, #28]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003806:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6911      	ldr	r1, [r2, #16]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	68d2      	ldr	r2, [r2, #12]
 8003812:	4311      	orrs	r1, r2
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	430b      	orrs	r3, r1
 800381a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695a      	ldr	r2, [r3, #20]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	000186a0 	.word	0x000186a0
 8003874:	001e847f 	.word	0x001e847f
 8003878:	003d08ff 	.word	0x003d08ff
 800387c:	431bde83 	.word	0x431bde83
 8003880:	10624dd3 	.word	0x10624dd3

08003884 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e128      	b.n	8003ae8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d109      	bne.n	80038b6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a90      	ldr	r2, [pc, #576]	@ (8003af0 <HAL_I2S_Init+0x26c>)
 80038ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fd f8fb 	bl	8000aac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2202      	movs	r2, #2
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80038cc:	f023 030f 	bic.w	r3, r3, #15
 80038d0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2202      	movs	r2, #2
 80038d8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d060      	beq.n	80039a4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d102      	bne.n	80038f0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80038ea:	2310      	movs	r3, #16
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	e001      	b.n	80038f4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80038f0:	2320      	movs	r3, #32
 80038f2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d802      	bhi.n	8003902 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003902:	2001      	movs	r0, #1
 8003904:	f001 f9c4 	bl	8004c90 <HAL_RCCEx_GetPeriphCLKFreq>
 8003908:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003912:	d125      	bne.n	8003960 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d010      	beq.n	800393e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	fbb2 f2f3 	udiv	r2, r2, r3
 8003926:	4613      	mov	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	461a      	mov	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	fbb2 f3f3 	udiv	r3, r2, r3
 8003938:	3305      	adds	r3, #5
 800393a:	613b      	str	r3, [r7, #16]
 800393c:	e01f      	b.n	800397e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	fbb2 f2f3 	udiv	r2, r2, r3
 8003948:	4613      	mov	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	461a      	mov	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	fbb2 f3f3 	udiv	r3, r2, r3
 800395a:	3305      	adds	r3, #5
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	e00e      	b.n	800397e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	fbb2 f2f3 	udiv	r2, r2, r3
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	461a      	mov	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	fbb2 f3f3 	udiv	r3, r2, r3
 800397a:	3305      	adds	r3, #5
 800397c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4a5c      	ldr	r2, [pc, #368]	@ (8003af4 <HAL_I2S_Init+0x270>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	08db      	lsrs	r3, r3, #3
 8003988:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	085b      	lsrs	r3, r3, #1
 800399a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	021b      	lsls	r3, r3, #8
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	e003      	b.n	80039ac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80039a4:	2302      	movs	r3, #2
 80039a6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d902      	bls.n	80039b8 <HAL_I2S_Init+0x134>
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	2bff      	cmp	r3, #255	@ 0xff
 80039b6:	d907      	bls.n	80039c8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039bc:	f043 0210 	orr.w	r2, r3, #16
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e08f      	b.n	8003ae8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	ea42 0103 	orr.w	r1, r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69fa      	ldr	r2, [r7, #28]
 80039d8:	430a      	orrs	r2, r1
 80039da:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80039e6:	f023 030f 	bic.w	r3, r3, #15
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6851      	ldr	r1, [r2, #4]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6892      	ldr	r2, [r2, #8]
 80039f2:	4311      	orrs	r1, r2
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	68d2      	ldr	r2, [r2, #12]
 80039f8:	4311      	orrs	r1, r2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6992      	ldr	r2, [r2, #24]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a0a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d161      	bne.n	8003ad8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a38      	ldr	r2, [pc, #224]	@ (8003af8 <HAL_I2S_Init+0x274>)
 8003a18:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a37      	ldr	r2, [pc, #220]	@ (8003afc <HAL_I2S_Init+0x278>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d101      	bne.n	8003a28 <HAL_I2S_Init+0x1a4>
 8003a24:	4b36      	ldr	r3, [pc, #216]	@ (8003b00 <HAL_I2S_Init+0x27c>)
 8003a26:	e001      	b.n	8003a2c <HAL_I2S_Init+0x1a8>
 8003a28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6812      	ldr	r2, [r2, #0]
 8003a32:	4932      	ldr	r1, [pc, #200]	@ (8003afc <HAL_I2S_Init+0x278>)
 8003a34:	428a      	cmp	r2, r1
 8003a36:	d101      	bne.n	8003a3c <HAL_I2S_Init+0x1b8>
 8003a38:	4a31      	ldr	r2, [pc, #196]	@ (8003b00 <HAL_I2S_Init+0x27c>)
 8003a3a:	e001      	b.n	8003a40 <HAL_I2S_Init+0x1bc>
 8003a3c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a40:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a44:	f023 030f 	bic.w	r3, r3, #15
 8003a48:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a2b      	ldr	r2, [pc, #172]	@ (8003afc <HAL_I2S_Init+0x278>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d101      	bne.n	8003a58 <HAL_I2S_Init+0x1d4>
 8003a54:	4b2a      	ldr	r3, [pc, #168]	@ (8003b00 <HAL_I2S_Init+0x27c>)
 8003a56:	e001      	b.n	8003a5c <HAL_I2S_Init+0x1d8>
 8003a58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a25      	ldr	r2, [pc, #148]	@ (8003afc <HAL_I2S_Init+0x278>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d101      	bne.n	8003a6e <HAL_I2S_Init+0x1ea>
 8003a6a:	4b25      	ldr	r3, [pc, #148]	@ (8003b00 <HAL_I2S_Init+0x27c>)
 8003a6c:	e001      	b.n	8003a72 <HAL_I2S_Init+0x1ee>
 8003a6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a7e:	d003      	beq.n	8003a88 <HAL_I2S_Init+0x204>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d103      	bne.n	8003a90 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003a88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	e001      	b.n	8003a94 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003a90:	2300      	movs	r3, #0
 8003a92:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	897b      	ldrh	r3, [r7, #10]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ac0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a0d      	ldr	r2, [pc, #52]	@ (8003afc <HAL_I2S_Init+0x278>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d101      	bne.n	8003ad0 <HAL_I2S_Init+0x24c>
 8003acc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b00 <HAL_I2S_Init+0x27c>)
 8003ace:	e001      	b.n	8003ad4 <HAL_I2S_Init+0x250>
 8003ad0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ad4:	897a      	ldrh	r2, [r7, #10]
 8003ad6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3720      	adds	r7, #32
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	08003bfb 	.word	0x08003bfb
 8003af4:	cccccccd 	.word	0xcccccccd
 8003af8:	08003d11 	.word	0x08003d11
 8003afc:	40003800 	.word	0x40003800
 8003b00:	40003400 	.word	0x40003400

08003b04 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	881a      	ldrh	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b58:	1c9a      	adds	r2, r3, #2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10e      	bne.n	8003b94 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b84:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff ffb8 	bl	8003b04 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b94:	bf00      	nop
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	b292      	uxth	r2, r2
 8003bb0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb6:	1c9a      	adds	r2, r3, #2
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10e      	bne.n	8003bf2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003be2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff ff93 	bl	8003b18 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b086      	sub	sp, #24
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d13a      	bne.n	8003c8c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d109      	bne.n	8003c34 <I2S_IRQHandler+0x3a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c2a:	2b40      	cmp	r3, #64	@ 0x40
 8003c2c:	d102      	bne.n	8003c34 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff ffb4 	bl	8003b9c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3a:	2b40      	cmp	r3, #64	@ 0x40
 8003c3c:	d126      	bne.n	8003c8c <I2S_IRQHandler+0x92>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d11f      	bne.n	8003c8c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c5a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	613b      	str	r3, [r7, #16]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7e:	f043 0202 	orr.w	r2, r3, #2
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff ff50 	bl	8003b2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d136      	bne.n	8003d06 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d109      	bne.n	8003cb6 <I2S_IRQHandler+0xbc>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cac:	2b80      	cmp	r3, #128	@ 0x80
 8003cae:	d102      	bne.n	8003cb6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff ff45 	bl	8003b40 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d122      	bne.n	8003d06 <I2S_IRQHandler+0x10c>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d11b      	bne.n	8003d06 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003cdc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf8:	f043 0204 	orr.w	r2, r3, #4
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff ff13 	bl	8003b2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d06:	bf00      	nop
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a92      	ldr	r2, [pc, #584]	@ (8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d101      	bne.n	8003d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d2a:	4b92      	ldr	r3, [pc, #584]	@ (8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d2c:	e001      	b.n	8003d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a8b      	ldr	r2, [pc, #556]	@ (8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d101      	bne.n	8003d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d48:	4b8a      	ldr	r3, [pc, #552]	@ (8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d4a:	e001      	b.n	8003d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d5c:	d004      	beq.n	8003d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f040 8099 	bne.w	8003e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d107      	bne.n	8003d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f925 	bl	8003fcc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d107      	bne.n	8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f9c8 	bl	800412c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da2:	2b40      	cmp	r3, #64	@ 0x40
 8003da4:	d13a      	bne.n	8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d035      	beq.n	8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a6e      	ldr	r2, [pc, #440]	@ (8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003dba:	4b6e      	ldr	r3, [pc, #440]	@ (8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dbc:	e001      	b.n	8003dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003dbe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4969      	ldr	r1, [pc, #420]	@ (8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dca:	428b      	cmp	r3, r1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003dce:	4b69      	ldr	r3, [pc, #420]	@ (8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dd0:	e001      	b.n	8003dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003dd2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dd6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003dda:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003dea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0e:	f043 0202 	orr.w	r2, r3, #2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff fe88 	bl	8003b2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	f040 80c3 	bne.w	8003fae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 80bd 	beq.w	8003fae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a49      	ldr	r2, [pc, #292]	@ (8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d101      	bne.n	8003e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e4e:	4b49      	ldr	r3, [pc, #292]	@ (8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e50:	e001      	b.n	8003e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4944      	ldr	r1, [pc, #272]	@ (8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e5e:	428b      	cmp	r3, r1
 8003e60:	d101      	bne.n	8003e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e62:	4b44      	ldr	r3, [pc, #272]	@ (8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e64:	e001      	b.n	8003e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e6e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e70:	2300      	movs	r3, #0
 8003e72:	60bb      	str	r3, [r7, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	60bb      	str	r3, [r7, #8]
 8003e7c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8a:	f043 0204 	orr.w	r2, r3, #4
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff fe4a 	bl	8003b2c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e98:	e089      	b.n	8003fae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d107      	bne.n	8003eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f8be 	bl	8004030 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d107      	bne.n	8003ece <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f8fd 	bl	80040c8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed4:	2b40      	cmp	r3, #64	@ 0x40
 8003ed6:	d12f      	bne.n	8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d02a      	beq.n	8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ef0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d101      	bne.n	8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003efc:	4b1d      	ldr	r3, [pc, #116]	@ (8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003efe:	e001      	b.n	8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4919      	ldr	r1, [pc, #100]	@ (8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f0c:	428b      	cmp	r3, r1
 8003f0e:	d101      	bne.n	8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f10:	4b18      	ldr	r3, [pc, #96]	@ (8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f12:	e001      	b.n	8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f18:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2a:	f043 0202 	orr.w	r2, r3, #2
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff fdfa 	bl	8003b2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d136      	bne.n	8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d031      	beq.n	8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a07      	ldr	r2, [pc, #28]	@ (8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d101      	bne.n	8003f5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f56:	4b07      	ldr	r3, [pc, #28]	@ (8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f58:	e001      	b.n	8003f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4902      	ldr	r1, [pc, #8]	@ (8003f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f66:	428b      	cmp	r3, r1
 8003f68:	d106      	bne.n	8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003f6a:	4b02      	ldr	r3, [pc, #8]	@ (8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f6c:	e006      	b.n	8003f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003f6e:	bf00      	nop
 8003f70:	40003800 	.word	0x40003800
 8003f74:	40003400 	.word	0x40003400
 8003f78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f7c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f80:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f90:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	f043 0204 	orr.w	r2, r3, #4
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff fdc0 	bl	8003b2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fac:	e000      	b.n	8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fae:	bf00      	nop
}
 8003fb0:	bf00      	nop
 8003fb2:	3720      	adds	r7, #32
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd8:	1c99      	adds	r1, r3, #2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6251      	str	r1, [r2, #36]	@ 0x24
 8003fde:	881a      	ldrh	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d113      	bne.n	8004026 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800400c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d106      	bne.n	8004026 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ffc9 	bl	8003fb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	1c99      	adds	r1, r3, #2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6251      	str	r1, [r2, #36]	@ 0x24
 8004042:	8819      	ldrh	r1, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a1d      	ldr	r2, [pc, #116]	@ (80040c0 <I2SEx_TxISR_I2SExt+0x90>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d101      	bne.n	8004052 <I2SEx_TxISR_I2SExt+0x22>
 800404e:	4b1d      	ldr	r3, [pc, #116]	@ (80040c4 <I2SEx_TxISR_I2SExt+0x94>)
 8004050:	e001      	b.n	8004056 <I2SEx_TxISR_I2SExt+0x26>
 8004052:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004056:	460a      	mov	r2, r1
 8004058:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d121      	bne.n	80040b6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a12      	ldr	r2, [pc, #72]	@ (80040c0 <I2SEx_TxISR_I2SExt+0x90>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d101      	bne.n	8004080 <I2SEx_TxISR_I2SExt+0x50>
 800407c:	4b11      	ldr	r3, [pc, #68]	@ (80040c4 <I2SEx_TxISR_I2SExt+0x94>)
 800407e:	e001      	b.n	8004084 <I2SEx_TxISR_I2SExt+0x54>
 8004080:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	490d      	ldr	r1, [pc, #52]	@ (80040c0 <I2SEx_TxISR_I2SExt+0x90>)
 800408c:	428b      	cmp	r3, r1
 800408e:	d101      	bne.n	8004094 <I2SEx_TxISR_I2SExt+0x64>
 8004090:	4b0c      	ldr	r3, [pc, #48]	@ (80040c4 <I2SEx_TxISR_I2SExt+0x94>)
 8004092:	e001      	b.n	8004098 <I2SEx_TxISR_I2SExt+0x68>
 8004094:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004098:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800409c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d106      	bne.n	80040b6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff ff81 	bl	8003fb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40003800 	.word	0x40003800
 80040c4:	40003400 	.word	0x40003400

080040c8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68d8      	ldr	r0, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040da:	1c99      	adds	r1, r3, #2
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80040e0:	b282      	uxth	r2, r0
 80040e2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d113      	bne.n	8004124 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800410a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff ff4a 	bl	8003fb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004124:	bf00      	nop
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a20      	ldr	r2, [pc, #128]	@ (80041bc <I2SEx_RxISR_I2SExt+0x90>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d101      	bne.n	8004142 <I2SEx_RxISR_I2SExt+0x16>
 800413e:	4b20      	ldr	r3, [pc, #128]	@ (80041c0 <I2SEx_RxISR_I2SExt+0x94>)
 8004140:	e001      	b.n	8004146 <I2SEx_RxISR_I2SExt+0x1a>
 8004142:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004146:	68d8      	ldr	r0, [r3, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414c:	1c99      	adds	r1, r3, #2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004152:	b282      	uxth	r2, r0
 8004154:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d121      	bne.n	80041b2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a12      	ldr	r2, [pc, #72]	@ (80041bc <I2SEx_RxISR_I2SExt+0x90>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d101      	bne.n	800417c <I2SEx_RxISR_I2SExt+0x50>
 8004178:	4b11      	ldr	r3, [pc, #68]	@ (80041c0 <I2SEx_RxISR_I2SExt+0x94>)
 800417a:	e001      	b.n	8004180 <I2SEx_RxISR_I2SExt+0x54>
 800417c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	490d      	ldr	r1, [pc, #52]	@ (80041bc <I2SEx_RxISR_I2SExt+0x90>)
 8004188:	428b      	cmp	r3, r1
 800418a:	d101      	bne.n	8004190 <I2SEx_RxISR_I2SExt+0x64>
 800418c:	4b0c      	ldr	r3, [pc, #48]	@ (80041c0 <I2SEx_RxISR_I2SExt+0x94>)
 800418e:	e001      	b.n	8004194 <I2SEx_RxISR_I2SExt+0x68>
 8004190:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004194:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004198:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d106      	bne.n	80041b2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff ff03 	bl	8003fb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40003800 	.word	0x40003800
 80041c0:	40003400 	.word	0x40003400

080041c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e267      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d075      	beq.n	80042ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041e2:	4b88      	ldr	r3, [pc, #544]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d00c      	beq.n	8004208 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ee:	4b85      	ldr	r3, [pc, #532]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d112      	bne.n	8004220 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041fa:	4b82      	ldr	r3, [pc, #520]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004202:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004206:	d10b      	bne.n	8004220 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004208:	4b7e      	ldr	r3, [pc, #504]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d05b      	beq.n	80042cc <HAL_RCC_OscConfig+0x108>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d157      	bne.n	80042cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e242      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004228:	d106      	bne.n	8004238 <HAL_RCC_OscConfig+0x74>
 800422a:	4b76      	ldr	r3, [pc, #472]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a75      	ldr	r2, [pc, #468]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 8004230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e01d      	b.n	8004274 <HAL_RCC_OscConfig+0xb0>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004240:	d10c      	bne.n	800425c <HAL_RCC_OscConfig+0x98>
 8004242:	4b70      	ldr	r3, [pc, #448]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a6f      	ldr	r2, [pc, #444]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 8004248:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	4b6d      	ldr	r3, [pc, #436]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a6c      	ldr	r2, [pc, #432]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 8004254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	e00b      	b.n	8004274 <HAL_RCC_OscConfig+0xb0>
 800425c:	4b69      	ldr	r3, [pc, #420]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a68      	ldr	r2, [pc, #416]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 8004262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	4b66      	ldr	r3, [pc, #408]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a65      	ldr	r2, [pc, #404]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 800426e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d013      	beq.n	80042a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f002 f848 	bl	8006310 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004284:	f002 f844 	bl	8006310 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b64      	cmp	r3, #100	@ 0x64
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e207      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	4b5b      	ldr	r3, [pc, #364]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0xc0>
 80042a2:	e014      	b.n	80042ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a4:	f002 f834 	bl	8006310 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042ac:	f002 f830 	bl	8006310 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b64      	cmp	r3, #100	@ 0x64
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e1f3      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042be:	4b51      	ldr	r3, [pc, #324]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f0      	bne.n	80042ac <HAL_RCC_OscConfig+0xe8>
 80042ca:	e000      	b.n	80042ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d063      	beq.n	80043a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042da:	4b4a      	ldr	r3, [pc, #296]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00b      	beq.n	80042fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042e6:	4b47      	ldr	r3, [pc, #284]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d11c      	bne.n	800432c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042f2:	4b44      	ldr	r3, [pc, #272]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d116      	bne.n	800432c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fe:	4b41      	ldr	r3, [pc, #260]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <HAL_RCC_OscConfig+0x152>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d001      	beq.n	8004316 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e1c7      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004316:	4b3b      	ldr	r3, [pc, #236]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4937      	ldr	r1, [pc, #220]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800432a:	e03a      	b.n	80043a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d020      	beq.n	8004376 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004334:	4b34      	ldr	r3, [pc, #208]	@ (8004408 <HAL_RCC_OscConfig+0x244>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433a:	f001 ffe9 	bl	8006310 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004342:	f001 ffe5 	bl	8006310 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e1a8      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004354:	4b2b      	ldr	r3, [pc, #172]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004360:	4b28      	ldr	r3, [pc, #160]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4925      	ldr	r1, [pc, #148]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 8004370:	4313      	orrs	r3, r2
 8004372:	600b      	str	r3, [r1, #0]
 8004374:	e015      	b.n	80043a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004376:	4b24      	ldr	r3, [pc, #144]	@ (8004408 <HAL_RCC_OscConfig+0x244>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f001 ffc8 	bl	8006310 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004384:	f001 ffc4 	bl	8006310 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e187      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004396:	4b1b      	ldr	r3, [pc, #108]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d036      	beq.n	800441c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d016      	beq.n	80043e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b6:	4b15      	ldr	r3, [pc, #84]	@ (800440c <HAL_RCC_OscConfig+0x248>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043bc:	f001 ffa8 	bl	8006310 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043c4:	f001 ffa4 	bl	8006310 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e167      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004404 <HAL_RCC_OscConfig+0x240>)
 80043d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0x200>
 80043e2:	e01b      	b.n	800441c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e4:	4b09      	ldr	r3, [pc, #36]	@ (800440c <HAL_RCC_OscConfig+0x248>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ea:	f001 ff91 	bl	8006310 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f0:	e00e      	b.n	8004410 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043f2:	f001 ff8d 	bl	8006310 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d907      	bls.n	8004410 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e150      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
 8004404:	40023800 	.word	0x40023800
 8004408:	42470000 	.word	0x42470000
 800440c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004410:	4b88      	ldr	r3, [pc, #544]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 8004412:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1ea      	bne.n	80043f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8097 	beq.w	8004558 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800442a:	2300      	movs	r3, #0
 800442c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800442e:	4b81      	ldr	r3, [pc, #516]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10f      	bne.n	800445a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	4b7d      	ldr	r3, [pc, #500]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004442:	4a7c      	ldr	r2, [pc, #496]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 8004444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004448:	6413      	str	r3, [r2, #64]	@ 0x40
 800444a:	4b7a      	ldr	r3, [pc, #488]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004456:	2301      	movs	r3, #1
 8004458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445a:	4b77      	ldr	r3, [pc, #476]	@ (8004638 <HAL_RCC_OscConfig+0x474>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d118      	bne.n	8004498 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004466:	4b74      	ldr	r3, [pc, #464]	@ (8004638 <HAL_RCC_OscConfig+0x474>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a73      	ldr	r2, [pc, #460]	@ (8004638 <HAL_RCC_OscConfig+0x474>)
 800446c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004472:	f001 ff4d 	bl	8006310 <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447a:	f001 ff49 	bl	8006310 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e10c      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448c:	4b6a      	ldr	r3, [pc, #424]	@ (8004638 <HAL_RCC_OscConfig+0x474>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f0      	beq.n	800447a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d106      	bne.n	80044ae <HAL_RCC_OscConfig+0x2ea>
 80044a0:	4b64      	ldr	r3, [pc, #400]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a4:	4a63      	ldr	r2, [pc, #396]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80044ac:	e01c      	b.n	80044e8 <HAL_RCC_OscConfig+0x324>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	2b05      	cmp	r3, #5
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCC_OscConfig+0x30c>
 80044b6:	4b5f      	ldr	r3, [pc, #380]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ba:	4a5e      	ldr	r2, [pc, #376]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 80044bc:	f043 0304 	orr.w	r3, r3, #4
 80044c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80044c2:	4b5c      	ldr	r3, [pc, #368]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 80044c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c6:	4a5b      	ldr	r2, [pc, #364]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80044ce:	e00b      	b.n	80044e8 <HAL_RCC_OscConfig+0x324>
 80044d0:	4b58      	ldr	r3, [pc, #352]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d4:	4a57      	ldr	r2, [pc, #348]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	6713      	str	r3, [r2, #112]	@ 0x70
 80044dc:	4b55      	ldr	r3, [pc, #340]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e0:	4a54      	ldr	r2, [pc, #336]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 80044e2:	f023 0304 	bic.w	r3, r3, #4
 80044e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d015      	beq.n	800451c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f0:	f001 ff0e 	bl	8006310 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f6:	e00a      	b.n	800450e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f8:	f001 ff0a 	bl	8006310 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e0cb      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450e:	4b49      	ldr	r3, [pc, #292]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0ee      	beq.n	80044f8 <HAL_RCC_OscConfig+0x334>
 800451a:	e014      	b.n	8004546 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800451c:	f001 fef8 	bl	8006310 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004522:	e00a      	b.n	800453a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004524:	f001 fef4 	bl	8006310 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e0b5      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453a:	4b3e      	ldr	r3, [pc, #248]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1ee      	bne.n	8004524 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004546:	7dfb      	ldrb	r3, [r7, #23]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d105      	bne.n	8004558 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800454c:	4b39      	ldr	r3, [pc, #228]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 800454e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004550:	4a38      	ldr	r2, [pc, #224]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 8004552:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004556:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 80a1 	beq.w	80046a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004562:	4b34      	ldr	r3, [pc, #208]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b08      	cmp	r3, #8
 800456c:	d05c      	beq.n	8004628 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d141      	bne.n	80045fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004576:	4b31      	ldr	r3, [pc, #196]	@ (800463c <HAL_RCC_OscConfig+0x478>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457c:	f001 fec8 	bl	8006310 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004584:	f001 fec4 	bl	8006310 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e087      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004596:	4b27      	ldr	r3, [pc, #156]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69da      	ldr	r2, [r3, #28]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b0:	019b      	lsls	r3, r3, #6
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b8:	085b      	lsrs	r3, r3, #1
 80045ba:	3b01      	subs	r3, #1
 80045bc:	041b      	lsls	r3, r3, #16
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c4:	061b      	lsls	r3, r3, #24
 80045c6:	491b      	ldr	r1, [pc, #108]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045cc:	4b1b      	ldr	r3, [pc, #108]	@ (800463c <HAL_RCC_OscConfig+0x478>)
 80045ce:	2201      	movs	r2, #1
 80045d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d2:	f001 fe9d 	bl	8006310 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045da:	f001 fe99 	bl	8006310 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e05c      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ec:	4b11      	ldr	r3, [pc, #68]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x416>
 80045f8:	e054      	b.n	80046a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045fa:	4b10      	ldr	r3, [pc, #64]	@ (800463c <HAL_RCC_OscConfig+0x478>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004600:	f001 fe86 	bl	8006310 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004608:	f001 fe82 	bl	8006310 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e045      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461a:	4b06      	ldr	r3, [pc, #24]	@ (8004634 <HAL_RCC_OscConfig+0x470>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0x444>
 8004626:	e03d      	b.n	80046a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d107      	bne.n	8004640 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e038      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
 8004634:	40023800 	.word	0x40023800
 8004638:	40007000 	.word	0x40007000
 800463c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004640:	4b1b      	ldr	r3, [pc, #108]	@ (80046b0 <HAL_RCC_OscConfig+0x4ec>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d028      	beq.n	80046a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004658:	429a      	cmp	r2, r3
 800465a:	d121      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004666:	429a      	cmp	r2, r3
 8004668:	d11a      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004670:	4013      	ands	r3, r2
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004676:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004678:	4293      	cmp	r3, r2
 800467a:	d111      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004686:	085b      	lsrs	r3, r3, #1
 8004688:	3b01      	subs	r3, #1
 800468a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800468c:	429a      	cmp	r2, r3
 800468e:	d107      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e000      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40023800 	.word	0x40023800

080046b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0cc      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046c8:	4b68      	ldr	r3, [pc, #416]	@ (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d90c      	bls.n	80046f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d6:	4b65      	ldr	r3, [pc, #404]	@ (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046de:	4b63      	ldr	r3, [pc, #396]	@ (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0b8      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d020      	beq.n	800473e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004708:	4b59      	ldr	r3, [pc, #356]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	4a58      	ldr	r2, [pc, #352]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004712:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004720:	4b53      	ldr	r3, [pc, #332]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	4a52      	ldr	r2, [pc, #328]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004726:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800472a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800472c:	4b50      	ldr	r3, [pc, #320]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	494d      	ldr	r1, [pc, #308]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	4313      	orrs	r3, r2
 800473c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d044      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d107      	bne.n	8004762 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004752:	4b47      	ldr	r3, [pc, #284]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d119      	bne.n	8004792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e07f      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d003      	beq.n	8004772 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800476e:	2b03      	cmp	r3, #3
 8004770:	d107      	bne.n	8004782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004772:	4b3f      	ldr	r3, [pc, #252]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e06f      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004782:	4b3b      	ldr	r3, [pc, #236]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e067      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004792:	4b37      	ldr	r3, [pc, #220]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f023 0203 	bic.w	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4934      	ldr	r1, [pc, #208]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a4:	f001 fdb4 	bl	8006310 <HAL_GetTick>
 80047a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047aa:	e00a      	b.n	80047c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ac:	f001 fdb0 	bl	8006310 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e04f      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 020c 	and.w	r2, r3, #12
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d1eb      	bne.n	80047ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d4:	4b25      	ldr	r3, [pc, #148]	@ (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d20c      	bcs.n	80047fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e2:	4b22      	ldr	r3, [pc, #136]	@ (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ea:	4b20      	ldr	r3, [pc, #128]	@ (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e032      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004808:	4b19      	ldr	r3, [pc, #100]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4916      	ldr	r1, [pc, #88]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	4313      	orrs	r3, r2
 8004818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d009      	beq.n	800483a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004826:	4b12      	ldr	r3, [pc, #72]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	490e      	ldr	r1, [pc, #56]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	4313      	orrs	r3, r2
 8004838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800483a:	f000 f821 	bl	8004880 <HAL_RCC_GetSysClockFreq>
 800483e:	4602      	mov	r2, r0
 8004840:	4b0b      	ldr	r3, [pc, #44]	@ (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	091b      	lsrs	r3, r3, #4
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	490a      	ldr	r1, [pc, #40]	@ (8004874 <HAL_RCC_ClockConfig+0x1c0>)
 800484c:	5ccb      	ldrb	r3, [r1, r3]
 800484e:	fa22 f303 	lsr.w	r3, r2, r3
 8004852:	4a09      	ldr	r2, [pc, #36]	@ (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 8004854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004856:	4b09      	ldr	r3, [pc, #36]	@ (800487c <HAL_RCC_ClockConfig+0x1c8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f7fc fabc 	bl	8000dd8 <HAL_InitTick>

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40023c00 	.word	0x40023c00
 8004870:	40023800 	.word	0x40023800
 8004874:	08009a34 	.word	0x08009a34
 8004878:	20000000 	.word	0x20000000
 800487c:	20000004 	.word	0x20000004

08004880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004884:	b094      	sub	sp, #80	@ 0x50
 8004886:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	647b      	str	r3, [r7, #68]	@ 0x44
 800488c:	2300      	movs	r3, #0
 800488e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004890:	2300      	movs	r3, #0
 8004892:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004898:	4b79      	ldr	r3, [pc, #484]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x200>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 030c 	and.w	r3, r3, #12
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d00d      	beq.n	80048c0 <HAL_RCC_GetSysClockFreq+0x40>
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	f200 80e1 	bhi.w	8004a6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <HAL_RCC_GetSysClockFreq+0x34>
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d003      	beq.n	80048ba <HAL_RCC_GetSysClockFreq+0x3a>
 80048b2:	e0db      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048b4:	4b73      	ldr	r3, [pc, #460]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0x204>)
 80048b6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80048b8:	e0db      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048ba:	4b73      	ldr	r3, [pc, #460]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0x208>)
 80048bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048be:	e0d8      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048c0:	4b6f      	ldr	r3, [pc, #444]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ca:	4b6d      	ldr	r3, [pc, #436]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d063      	beq.n	800499e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	099b      	lsrs	r3, r3, #6
 80048dc:	2200      	movs	r2, #0
 80048de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80048ea:	2300      	movs	r3, #0
 80048ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80048ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048f2:	4622      	mov	r2, r4
 80048f4:	462b      	mov	r3, r5
 80048f6:	f04f 0000 	mov.w	r0, #0
 80048fa:	f04f 0100 	mov.w	r1, #0
 80048fe:	0159      	lsls	r1, r3, #5
 8004900:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004904:	0150      	lsls	r0, r2, #5
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	4621      	mov	r1, r4
 800490c:	1a51      	subs	r1, r2, r1
 800490e:	6139      	str	r1, [r7, #16]
 8004910:	4629      	mov	r1, r5
 8004912:	eb63 0301 	sbc.w	r3, r3, r1
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004924:	4659      	mov	r1, fp
 8004926:	018b      	lsls	r3, r1, #6
 8004928:	4651      	mov	r1, sl
 800492a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800492e:	4651      	mov	r1, sl
 8004930:	018a      	lsls	r2, r1, #6
 8004932:	4651      	mov	r1, sl
 8004934:	ebb2 0801 	subs.w	r8, r2, r1
 8004938:	4659      	mov	r1, fp
 800493a:	eb63 0901 	sbc.w	r9, r3, r1
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800494a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800494e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004952:	4690      	mov	r8, r2
 8004954:	4699      	mov	r9, r3
 8004956:	4623      	mov	r3, r4
 8004958:	eb18 0303 	adds.w	r3, r8, r3
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	462b      	mov	r3, r5
 8004960:	eb49 0303 	adc.w	r3, r9, r3
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004972:	4629      	mov	r1, r5
 8004974:	024b      	lsls	r3, r1, #9
 8004976:	4621      	mov	r1, r4
 8004978:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800497c:	4621      	mov	r1, r4
 800497e:	024a      	lsls	r2, r1, #9
 8004980:	4610      	mov	r0, r2
 8004982:	4619      	mov	r1, r3
 8004984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004986:	2200      	movs	r2, #0
 8004988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800498a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800498c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004990:	f7fb fc1a 	bl	80001c8 <__aeabi_uldivmod>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4613      	mov	r3, r2
 800499a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800499c:	e058      	b.n	8004a50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800499e:	4b38      	ldr	r3, [pc, #224]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	099b      	lsrs	r3, r3, #6
 80049a4:	2200      	movs	r2, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	4611      	mov	r1, r2
 80049aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049ae:	623b      	str	r3, [r7, #32]
 80049b0:	2300      	movs	r3, #0
 80049b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80049b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049b8:	4642      	mov	r2, r8
 80049ba:	464b      	mov	r3, r9
 80049bc:	f04f 0000 	mov.w	r0, #0
 80049c0:	f04f 0100 	mov.w	r1, #0
 80049c4:	0159      	lsls	r1, r3, #5
 80049c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ca:	0150      	lsls	r0, r2, #5
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4641      	mov	r1, r8
 80049d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80049d6:	4649      	mov	r1, r9
 80049d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049f0:	ebb2 040a 	subs.w	r4, r2, sl
 80049f4:	eb63 050b 	sbc.w	r5, r3, fp
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	00eb      	lsls	r3, r5, #3
 8004a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a06:	00e2      	lsls	r2, r4, #3
 8004a08:	4614      	mov	r4, r2
 8004a0a:	461d      	mov	r5, r3
 8004a0c:	4643      	mov	r3, r8
 8004a0e:	18e3      	adds	r3, r4, r3
 8004a10:	603b      	str	r3, [r7, #0]
 8004a12:	464b      	mov	r3, r9
 8004a14:	eb45 0303 	adc.w	r3, r5, r3
 8004a18:	607b      	str	r3, [r7, #4]
 8004a1a:	f04f 0200 	mov.w	r2, #0
 8004a1e:	f04f 0300 	mov.w	r3, #0
 8004a22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a26:	4629      	mov	r1, r5
 8004a28:	028b      	lsls	r3, r1, #10
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a30:	4621      	mov	r1, r4
 8004a32:	028a      	lsls	r2, r1, #10
 8004a34:	4610      	mov	r0, r2
 8004a36:	4619      	mov	r1, r3
 8004a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	61fa      	str	r2, [r7, #28]
 8004a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a44:	f7fb fbc0 	bl	80001c8 <__aeabi_uldivmod>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a50:	4b0b      	ldr	r3, [pc, #44]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	0c1b      	lsrs	r3, r3, #16
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004a60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a6a:	e002      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a6c:	4b05      	ldr	r3, [pc, #20]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3750      	adds	r7, #80	@ 0x50
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a7e:	bf00      	nop
 8004a80:	40023800 	.word	0x40023800
 8004a84:	00f42400 	.word	0x00f42400
 8004a88:	007a1200 	.word	0x007a1200

08004a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a90:	4b03      	ldr	r3, [pc, #12]	@ (8004aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a92:	681b      	ldr	r3, [r3, #0]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	20000000 	.word	0x20000000

08004aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004aa8:	f7ff fff0 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8004aac:	4602      	mov	r2, r0
 8004aae:	4b05      	ldr	r3, [pc, #20]	@ (8004ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	0a9b      	lsrs	r3, r3, #10
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	4903      	ldr	r1, [pc, #12]	@ (8004ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aba:	5ccb      	ldrb	r3, [r1, r3]
 8004abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	08009a44 	.word	0x08009a44

08004acc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d105      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d035      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004af4:	4b62      	ldr	r3, [pc, #392]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004afa:	f001 fc09 	bl	8006310 <HAL_GetTick>
 8004afe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b00:	e008      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b02:	f001 fc05 	bl	8006310 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e0b0      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b14:	4b5b      	ldr	r3, [pc, #364]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1f0      	bne.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	019a      	lsls	r2, r3, #6
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	071b      	lsls	r3, r3, #28
 8004b2c:	4955      	ldr	r1, [pc, #340]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b34:	4b52      	ldr	r3, [pc, #328]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b3a:	f001 fbe9 	bl	8006310 <HAL_GetTick>
 8004b3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b40:	e008      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b42:	f001 fbe5 	bl	8006310 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e090      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b54:	4b4b      	ldr	r3, [pc, #300]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0f0      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 8083 	beq.w	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	4b44      	ldr	r3, [pc, #272]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b76:	4a43      	ldr	r2, [pc, #268]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b7e:	4b41      	ldr	r3, [pc, #260]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b8a:	4b3f      	ldr	r3, [pc, #252]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a3e      	ldr	r2, [pc, #248]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b96:	f001 fbbb 	bl	8006310 <HAL_GetTick>
 8004b9a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b9e:	f001 fbb7 	bl	8006310 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e062      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004bb0:	4b35      	ldr	r3, [pc, #212]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0f0      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bbc:	4b31      	ldr	r3, [pc, #196]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bc4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d02f      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d028      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bda:	4b2a      	ldr	r3, [pc, #168]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004be2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004be4:	4b29      	ldr	r3, [pc, #164]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bea:	4b28      	ldr	r3, [pc, #160]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004bf0:	4a24      	ldr	r2, [pc, #144]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bf6:	4b23      	ldr	r3, [pc, #140]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d114      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c02:	f001 fb85 	bl	8006310 <HAL_GetTick>
 8004c06:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c08:	e00a      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c0a:	f001 fb81 	bl	8006310 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e02a      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c20:	4b18      	ldr	r3, [pc, #96]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0ee      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c38:	d10d      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004c3a:	4b12      	ldr	r3, [pc, #72]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004c4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c4e:	490d      	ldr	r1, [pc, #52]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	608b      	str	r3, [r1, #8]
 8004c54:	e005      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c56:	4b0b      	ldr	r3, [pc, #44]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c5c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c60:	6093      	str	r3, [r2, #8]
 8004c62:	4b08      	ldr	r3, [pc, #32]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c64:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c6e:	4905      	ldr	r1, [pc, #20]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	42470068 	.word	0x42470068
 8004c84:	40023800 	.word	0x40023800
 8004c88:	40007000 	.word	0x40007000
 8004c8c:	42470e40 	.word	0x42470e40

08004c90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d13f      	bne.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004cae:	4b24      	ldr	r3, [pc, #144]	@ (8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d006      	beq.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004cc4:	d12f      	bne.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004cc8:	617b      	str	r3, [r7, #20]
          break;
 8004cca:	e02f      	b.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cd8:	d108      	bne.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004cda:	4b19      	ldr	r3, [pc, #100]	@ (8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ce2:	4a19      	ldr	r2, [pc, #100]	@ (8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	613b      	str	r3, [r7, #16]
 8004cea:	e007      	b.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004cec:	4b14      	ldr	r3, [pc, #80]	@ (8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cf4:	4a15      	ldr	r2, [pc, #84]	@ (8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfa:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004cfc:	4b10      	ldr	r3, [pc, #64]	@ (8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d02:	099b      	lsrs	r3, r3, #6
 8004d04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	fb02 f303 	mul.w	r3, r2, r3
 8004d0e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d10:	4b0b      	ldr	r3, [pc, #44]	@ (8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d16:	0f1b      	lsrs	r3, r3, #28
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d22:	617b      	str	r3, [r7, #20]
          break;
 8004d24:	e002      	b.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]
          break;
 8004d2a:	bf00      	nop
        }
      }
      break;
 8004d2c:	e000      	b.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004d2e:	bf00      	nop
    }
  }
  return frequency;
 8004d30:	697b      	ldr	r3, [r7, #20]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40023800 	.word	0x40023800
 8004d44:	00bb8000 	.word	0x00bb8000
 8004d48:	007a1200 	.word	0x007a1200
 8004d4c:	00f42400 	.word	0x00f42400

08004d50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e07b      	b.n	8004e5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d108      	bne.n	8004d7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d72:	d009      	beq.n	8004d88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	61da      	str	r2, [r3, #28]
 8004d7a:	e005      	b.n	8004d88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7fb ff02 	bl	8000bac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e0c:	ea42 0103 	orr.w	r1, r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e14:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	0c1b      	lsrs	r3, r3, #16
 8004e26:	f003 0104 	and.w	r1, r3, #4
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2e:	f003 0210 	and.w	r2, r3, #16
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69da      	ldr	r2, [r3, #28]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e62:	b084      	sub	sp, #16
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	f107 001c 	add.w	r0, r7, #28
 8004e70:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e74:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d123      	bne.n	8004ec4 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e80:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004e90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ea4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d105      	bne.n	8004eb8 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f9dc 	bl	8005276 <USB_CoreReset>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	73fb      	strb	r3, [r7, #15]
 8004ec2:	e01b      	b.n	8004efc <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f9d0 	bl	8005276 <USB_CoreReset>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004eda:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d106      	bne.n	8004ef0 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	639a      	str	r2, [r3, #56]	@ 0x38
 8004eee:	e005      	b.n	8004efc <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004efc:	7fbb      	ldrb	r3, [r7, #30]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d10b      	bne.n	8004f1a <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f043 0206 	orr.w	r2, r3, #6
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f043 0220 	orr.w	r2, r3, #32
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f26:	b004      	add	sp, #16
 8004f28:	4770      	bx	lr

08004f2a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b083      	sub	sp, #12
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f043 0201 	orr.w	r2, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f023 0201 	bic.w	r2, r3, #1
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	460b      	mov	r3, r1
 8004f78:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d115      	bne.n	8004fbc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f9c:	200a      	movs	r0, #10
 8004f9e:	f001 f98d 	bl	80062bc <HAL_Delay>
      ms += 10U;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	330a      	adds	r3, #10
 8004fa6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f956 	bl	800525a <USB_GetMode>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d01e      	beq.n	8004ff2 <USB_SetCurrentMode+0x84>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2bc7      	cmp	r3, #199	@ 0xc7
 8004fb8:	d9f0      	bls.n	8004f9c <USB_SetCurrentMode+0x2e>
 8004fba:	e01a      	b.n	8004ff2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d115      	bne.n	8004fee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fce:	200a      	movs	r0, #10
 8004fd0:	f001 f974 	bl	80062bc <HAL_Delay>
      ms += 10U;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	330a      	adds	r3, #10
 8004fd8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f93d 	bl	800525a <USB_GetMode>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <USB_SetCurrentMode+0x84>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2bc7      	cmp	r3, #199	@ 0xc7
 8004fea:	d9f0      	bls.n	8004fce <USB_SetCurrentMode+0x60>
 8004fec:	e001      	b.n	8004ff2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e005      	b.n	8004ffe <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2bc8      	cmp	r3, #200	@ 0xc8
 8004ff6:	d101      	bne.n	8004ffc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005006:	b480      	push	{r7}
 8005008:	b085      	sub	sp, #20
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	3301      	adds	r3, #1
 8005018:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005020:	d901      	bls.n	8005026 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e01b      	b.n	800505e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	2b00      	cmp	r3, #0
 800502c:	daf2      	bge.n	8005014 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	019b      	lsls	r3, r3, #6
 8005036:	f043 0220 	orr.w	r2, r3, #32
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3301      	adds	r3, #1
 8005042:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800504a:	d901      	bls.n	8005050 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e006      	b.n	800505e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b20      	cmp	r3, #32
 800505a:	d0f0      	beq.n	800503e <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800506a:	b480      	push	{r7}
 800506c:	b085      	sub	sp, #20
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3301      	adds	r3, #1
 800507a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005082:	d901      	bls.n	8005088 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e018      	b.n	80050ba <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	daf2      	bge.n	8005076 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2210      	movs	r2, #16
 8005098:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3301      	adds	r3, #1
 800509e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050a6:	d901      	bls.n	80050ac <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e006      	b.n	80050ba <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b10      	cmp	r3, #16
 80050b6:	d0f0      	beq.n	800509a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b089      	sub	sp, #36	@ 0x24
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	60b9      	str	r1, [r7, #8]
 80050d0:	4611      	mov	r1, r2
 80050d2:	461a      	mov	r2, r3
 80050d4:	460b      	mov	r3, r1
 80050d6:	71fb      	strb	r3, [r7, #7]
 80050d8:	4613      	mov	r3, r2
 80050da:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80050e4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d123      	bne.n	8005134 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050ec:	88bb      	ldrh	r3, [r7, #4]
 80050ee:	3303      	adds	r3, #3
 80050f0:	089b      	lsrs	r3, r3, #2
 80050f2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050f4:	2300      	movs	r3, #0
 80050f6:	61bb      	str	r3, [r7, #24]
 80050f8:	e018      	b.n	800512c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	031a      	lsls	r2, r3, #12
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	4413      	add	r3, r2
 8005102:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005106:	461a      	mov	r2, r3
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	3301      	adds	r3, #1
 8005112:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	3301      	adds	r3, #1
 8005118:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	3301      	adds	r3, #1
 800511e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	3301      	adds	r3, #1
 8005124:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	3301      	adds	r3, #1
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	429a      	cmp	r2, r3
 8005132:	d3e2      	bcc.n	80050fa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3724      	adds	r7, #36	@ 0x24
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005142:	b480      	push	{r7}
 8005144:	b08b      	sub	sp, #44	@ 0x2c
 8005146:	af00      	add	r7, sp, #0
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	4613      	mov	r3, r2
 800514e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005158:	88fb      	ldrh	r3, [r7, #6]
 800515a:	089b      	lsrs	r3, r3, #2
 800515c:	b29b      	uxth	r3, r3
 800515e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005168:	2300      	movs	r3, #0
 800516a:	623b      	str	r3, [r7, #32]
 800516c:	e014      	b.n	8005198 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005178:	601a      	str	r2, [r3, #0]
    pDest++;
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	3301      	adds	r3, #1
 800517e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	3301      	adds	r3, #1
 8005184:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	3301      	adds	r3, #1
 800518a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518e:	3301      	adds	r3, #1
 8005190:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	3301      	adds	r3, #1
 8005196:	623b      	str	r3, [r7, #32]
 8005198:	6a3a      	ldr	r2, [r7, #32]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	429a      	cmp	r2, r3
 800519e:	d3e6      	bcc.n	800516e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80051a0:	8bfb      	ldrh	r3, [r7, #30]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d01e      	beq.n	80051e4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051b0:	461a      	mov	r2, r3
 80051b2:	f107 0310 	add.w	r3, r7, #16
 80051b6:	6812      	ldr	r2, [r2, #0]
 80051b8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	fa22 f303 	lsr.w	r3, r2, r3
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ca:	701a      	strb	r2, [r3, #0]
      i++;
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	3301      	adds	r3, #1
 80051d0:	623b      	str	r3, [r7, #32]
      pDest++;
 80051d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d4:	3301      	adds	r3, #1
 80051d6:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80051d8:	8bfb      	ldrh	r3, [r7, #30]
 80051da:	3b01      	subs	r3, #1
 80051dc:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051de:	8bfb      	ldrh	r3, [r7, #30]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1ea      	bne.n	80051ba <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	372c      	adds	r7, #44	@ 0x2c
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b085      	sub	sp, #20
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4013      	ands	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800520a:	68fb      	ldr	r3, [r7, #12]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	460b      	mov	r3, r1
 8005222:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005238:	78fb      	ldrb	r3, [r7, #3]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4413      	add	r3, r2
 8005240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	4013      	ands	r3, r2
 800524a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800524c:	68bb      	ldr	r3, [r7, #8]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800525a:	b480      	push	{r7}
 800525c:	b083      	sub	sp, #12
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f003 0301 	and.w	r3, r3, #1
}
 800526a:	4618      	mov	r0, r3
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005276:	b480      	push	{r7}
 8005278:	b085      	sub	sp, #20
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	3301      	adds	r3, #1
 8005286:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800528e:	d901      	bls.n	8005294 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e01b      	b.n	80052cc <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	daf2      	bge.n	8005282 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	f043 0201 	orr.w	r2, r3, #1
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3301      	adds	r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052b8:	d901      	bls.n	80052be <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e006      	b.n	80052cc <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d0f0      	beq.n	80052ac <USB_CoreReset+0x36>

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052d8:	b084      	sub	sp, #16
 80052da:	b580      	push	{r7, lr}
 80052dc:	b086      	sub	sp, #24
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80052e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052f8:	461a      	mov	r2, r3
 80052fa:	2300      	movs	r3, #0
 80052fc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005302:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532a:	2b00      	cmp	r3, #0
 800532c:	d119      	bne.n	8005362 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800532e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005332:	2b01      	cmp	r3, #1
 8005334:	d10a      	bne.n	800534c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005344:	f043 0304 	orr.w	r3, r3, #4
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	e014      	b.n	8005376 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800535a:	f023 0304 	bic.w	r3, r3, #4
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	e009      	b.n	8005376 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005370:	f023 0304 	bic.w	r3, r3, #4
 8005374:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005376:	2110      	movs	r1, #16
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff fe44 	bl	8005006 <USB_FlushTxFifo>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7ff fe6e 	bl	800506a <USB_FlushRxFifo>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005398:	2300      	movs	r3, #0
 800539a:	613b      	str	r3, [r7, #16]
 800539c:	e015      	b.n	80053ca <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053aa:	461a      	mov	r2, r3
 80053ac:	f04f 33ff 	mov.w	r3, #4294967295
 80053b0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053be:	461a      	mov	r2, r3
 80053c0:	2300      	movs	r3, #0
 80053c2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	3301      	adds	r3, #1
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80053ce:	461a      	mov	r2, r3
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d3e3      	bcc.n	800539e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f04f 32ff 	mov.w	r2, #4294967295
 80053e2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a18      	ldr	r2, [pc, #96]	@ (8005448 <USB_HostInit+0x170>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d10b      	bne.n	8005404 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053f2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a15      	ldr	r2, [pc, #84]	@ (800544c <USB_HostInit+0x174>)
 80053f8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a14      	ldr	r2, [pc, #80]	@ (8005450 <USB_HostInit+0x178>)
 80053fe:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005402:	e009      	b.n	8005418 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2280      	movs	r2, #128	@ 0x80
 8005408:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a11      	ldr	r2, [pc, #68]	@ (8005454 <USB_HostInit+0x17c>)
 800540e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a11      	ldr	r2, [pc, #68]	@ (8005458 <USB_HostInit+0x180>)
 8005414:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005418:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800541c:	2b00      	cmp	r3, #0
 800541e:	d105      	bne.n	800542c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	f043 0210 	orr.w	r2, r3, #16
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	699a      	ldr	r2, [r3, #24]
 8005430:	4b0a      	ldr	r3, [pc, #40]	@ (800545c <USB_HostInit+0x184>)
 8005432:	4313      	orrs	r3, r2
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005438:	7dfb      	ldrb	r3, [r7, #23]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005444:	b004      	add	sp, #16
 8005446:	4770      	bx	lr
 8005448:	40040000 	.word	0x40040000
 800544c:	01000200 	.word	0x01000200
 8005450:	00e00300 	.word	0x00e00300
 8005454:	00600080 	.word	0x00600080
 8005458:	004000e0 	.word	0x004000e0
 800545c:	a3200008 	.word	0xa3200008

08005460 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800547e:	f023 0303 	bic.w	r3, r3, #3
 8005482:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	78fb      	ldrb	r3, [r7, #3]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	68f9      	ldr	r1, [r7, #12]
 8005494:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005498:	4313      	orrs	r3, r2
 800549a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800549c:	78fb      	ldrb	r3, [r7, #3]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d107      	bne.n	80054b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054a8:	461a      	mov	r2, r3
 80054aa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80054ae:	6053      	str	r3, [r2, #4]
 80054b0:	e00c      	b.n	80054cc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80054b2:	78fb      	ldrb	r3, [r7, #3]
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d107      	bne.n	80054c8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054be:	461a      	mov	r2, r3
 80054c0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80054c4:	6053      	str	r3, [r2, #4]
 80054c6:	e001      	b.n	80054cc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e000      	b.n	80054ce <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80054fa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005508:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800550a:	2064      	movs	r0, #100	@ 0x64
 800550c:	f000 fed6 	bl	80062bc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800551c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800551e:	200a      	movs	r0, #10
 8005520:	f000 fecc 	bl	80062bc <HAL_Delay>

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800552e:	b480      	push	{r7}
 8005530:	b085      	sub	sp, #20
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	460b      	mov	r3, r1
 8005538:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005552:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d109      	bne.n	8005572 <USB_DriveVbus+0x44>
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d106      	bne.n	8005572 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800556c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005570:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800557c:	d109      	bne.n	8005592 <USB_DriveVbus+0x64>
 800557e:	78fb      	ldrb	r3, [r7, #3]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d106      	bne.n	8005592 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800558c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005590:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	0c5b      	lsrs	r3, r3, #17
 80055be:	f003 0303 	and.w	r3, r3, #3
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b085      	sub	sp, #20
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	b29b      	uxth	r3, r3
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	4608      	mov	r0, r1
 80055fa:	4611      	mov	r1, r2
 80055fc:	461a      	mov	r2, r3
 80055fe:	4603      	mov	r3, r0
 8005600:	70fb      	strb	r3, [r7, #3]
 8005602:	460b      	mov	r3, r1
 8005604:	70bb      	strb	r3, [r7, #2]
 8005606:	4613      	mov	r3, r2
 8005608:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005612:	78fb      	ldrb	r3, [r7, #3]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	4413      	add	r3, r2
 800561a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800561e:	461a      	mov	r2, r3
 8005620:	f04f 33ff 	mov.w	r3, #4294967295
 8005624:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005626:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800562a:	2b03      	cmp	r3, #3
 800562c:	d87c      	bhi.n	8005728 <USB_HC_Init+0x138>
 800562e:	a201      	add	r2, pc, #4	@ (adr r2, 8005634 <USB_HC_Init+0x44>)
 8005630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005634:	08005645 	.word	0x08005645
 8005638:	080056eb 	.word	0x080056eb
 800563c:	08005645 	.word	0x08005645
 8005640:	080056ad 	.word	0x080056ad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005644:	78fb      	ldrb	r3, [r7, #3]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	4413      	add	r3, r2
 800564c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005650:	461a      	mov	r2, r3
 8005652:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005656:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005658:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800565c:	2b00      	cmp	r3, #0
 800565e:	da10      	bge.n	8005682 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005660:	78fb      	ldrb	r3, [r7, #3]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	4413      	add	r3, r2
 8005668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	78fa      	ldrb	r2, [r7, #3]
 8005670:	0151      	lsls	r1, r2, #5
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	440a      	add	r2, r1
 8005676:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800567a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800567e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005680:	e055      	b.n	800572e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a6f      	ldr	r2, [pc, #444]	@ (8005844 <USB_HC_Init+0x254>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d151      	bne.n	800572e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800568a:	78fb      	ldrb	r3, [r7, #3]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	4413      	add	r3, r2
 8005692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	78fa      	ldrb	r2, [r7, #3]
 800569a:	0151      	lsls	r1, r2, #5
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	440a      	add	r2, r1
 80056a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056a4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80056a8:	60d3      	str	r3, [r2, #12]
      break;
 80056aa:	e040      	b.n	800572e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056ac:	78fb      	ldrb	r3, [r7, #3]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056b8:	461a      	mov	r2, r3
 80056ba:	f240 639d 	movw	r3, #1693	@ 0x69d
 80056be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	da34      	bge.n	8005732 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80056c8:	78fb      	ldrb	r3, [r7, #3]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	78fa      	ldrb	r2, [r7, #3]
 80056d8:	0151      	lsls	r1, r2, #5
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	440a      	add	r2, r1
 80056de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056e6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80056e8:	e023      	b.n	8005732 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056ea:	78fb      	ldrb	r3, [r7, #3]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056f6:	461a      	mov	r2, r3
 80056f8:	f240 2325 	movw	r3, #549	@ 0x225
 80056fc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005702:	2b00      	cmp	r3, #0
 8005704:	da17      	bge.n	8005736 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005706:	78fb      	ldrb	r3, [r7, #3]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4413      	add	r3, r2
 800570e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	78fa      	ldrb	r2, [r7, #3]
 8005716:	0151      	lsls	r1, r2, #5
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	440a      	add	r2, r1
 800571c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005720:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005724:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005726:	e006      	b.n	8005736 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	77fb      	strb	r3, [r7, #31]
      break;
 800572c:	e004      	b.n	8005738 <USB_HC_Init+0x148>
      break;
 800572e:	bf00      	nop
 8005730:	e002      	b.n	8005738 <USB_HC_Init+0x148>
      break;
 8005732:	bf00      	nop
 8005734:	e000      	b.n	8005738 <USB_HC_Init+0x148>
      break;
 8005736:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005738:	78fb      	ldrb	r3, [r7, #3]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	4413      	add	r3, r2
 8005740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005744:	461a      	mov	r2, r3
 8005746:	2300      	movs	r3, #0
 8005748:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800574a:	78fb      	ldrb	r3, [r7, #3]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	4413      	add	r3, r2
 8005752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	78fa      	ldrb	r2, [r7, #3]
 800575a:	0151      	lsls	r1, r2, #5
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	440a      	add	r2, r1
 8005760:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005764:	f043 0302 	orr.w	r3, r3, #2
 8005768:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	78fb      	ldrb	r3, [r7, #3]
 8005774:	f003 030f 	and.w	r3, r3, #15
 8005778:	2101      	movs	r1, #1
 800577a:	fa01 f303 	lsl.w	r3, r1, r3
 800577e:	6939      	ldr	r1, [r7, #16]
 8005780:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005784:	4313      	orrs	r3, r2
 8005786:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005794:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005798:	2b00      	cmp	r3, #0
 800579a:	da03      	bge.n	80057a4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800579c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	e001      	b.n	80057a8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff fef9 	bl	80055a0 <USB_GetHostSpeed>
 80057ae:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80057b0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d106      	bne.n	80057c6 <USB_HC_Init+0x1d6>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d003      	beq.n	80057c6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80057be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	e001      	b.n	80057ca <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057ca:	787b      	ldrb	r3, [r7, #1]
 80057cc:	059b      	lsls	r3, r3, #22
 80057ce:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80057d2:	78bb      	ldrb	r3, [r7, #2]
 80057d4:	02db      	lsls	r3, r3, #11
 80057d6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057da:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80057dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80057e0:	049b      	lsls	r3, r3, #18
 80057e2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80057e6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80057e8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80057ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80057ee:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057f8:	78fa      	ldrb	r2, [r7, #3]
 80057fa:	0151      	lsls	r1, r2, #5
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	440a      	add	r2, r1
 8005800:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005804:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005808:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800580a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800580e:	2b03      	cmp	r3, #3
 8005810:	d003      	beq.n	800581a <USB_HC_Init+0x22a>
 8005812:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005816:	2b01      	cmp	r3, #1
 8005818:	d10f      	bne.n	800583a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800581a:	78fb      	ldrb	r3, [r7, #3]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	4413      	add	r3, r2
 8005822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	78fa      	ldrb	r2, [r7, #3]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	440a      	add	r2, r1
 8005830:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005834:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005838:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800583a:	7ffb      	ldrb	r3, [r7, #31]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3720      	adds	r7, #32
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40040000 	.word	0x40040000

08005848 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b08c      	sub	sp, #48	@ 0x30
 800584c:	af02      	add	r7, sp, #8
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	4613      	mov	r3, r2
 8005854:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	785b      	ldrb	r3, [r3, #1]
 800585e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005860:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005864:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4a5d      	ldr	r2, [pc, #372]	@ (80059e0 <USB_HC_StartXfer+0x198>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d12f      	bne.n	80058ce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d11c      	bne.n	80058ae <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	7c9b      	ldrb	r3, [r3, #18]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <USB_HC_StartXfer+0x3c>
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	7c9b      	ldrb	r3, [r3, #18]
 8005880:	2b02      	cmp	r3, #2
 8005882:	d124      	bne.n	80058ce <USB_HC_StartXfer+0x86>
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	799b      	ldrb	r3, [r3, #6]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d120      	bne.n	80058ce <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	4413      	add	r3, r2
 8005894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	0151      	lsls	r1, r2, #5
 800589e:	6a3a      	ldr	r2, [r7, #32]
 80058a0:	440a      	add	r2, r1
 80058a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058aa:	60d3      	str	r3, [r2, #12]
 80058ac:	e00f      	b.n	80058ce <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	791b      	ldrb	r3, [r3, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10b      	bne.n	80058ce <USB_HC_StartXfer+0x86>
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	795b      	ldrb	r3, [r3, #5]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d107      	bne.n	80058ce <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	785b      	ldrb	r3, [r3, #1]
 80058c2:	4619      	mov	r1, r3
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 fb6b 	bl	8005fa0 <USB_DoPing>
        return HAL_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	e232      	b.n	8005d34 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	799b      	ldrb	r3, [r3, #6]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d158      	bne.n	8005988 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80058d6:	2301      	movs	r3, #1
 80058d8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	78db      	ldrb	r3, [r3, #3]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d007      	beq.n	80058f2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	8a92      	ldrh	r2, [r2, #20]
 80058e8:	fb03 f202 	mul.w	r2, r3, r2
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	61da      	str	r2, [r3, #28]
 80058f0:	e07c      	b.n	80059ec <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	7c9b      	ldrb	r3, [r3, #18]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d130      	bne.n	800595c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	2bbc      	cmp	r3, #188	@ 0xbc
 8005900:	d918      	bls.n	8005934 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	8a9b      	ldrh	r3, [r3, #20]
 8005906:	461a      	mov	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	69da      	ldr	r2, [r3, #28]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d003      	beq.n	8005924 <USB_HC_StartXfer+0xdc>
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	2b02      	cmp	r3, #2
 8005922:	d103      	bne.n	800592c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2202      	movs	r2, #2
 8005928:	60da      	str	r2, [r3, #12]
 800592a:	e05f      	b.n	80059ec <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2201      	movs	r2, #1
 8005930:	60da      	str	r2, [r3, #12]
 8005932:	e05b      	b.n	80059ec <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	6a1a      	ldr	r2, [r3, #32]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d007      	beq.n	8005954 <USB_HC_StartXfer+0x10c>
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	2b02      	cmp	r3, #2
 800594a:	d003      	beq.n	8005954 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2204      	movs	r2, #4
 8005950:	60da      	str	r2, [r3, #12]
 8005952:	e04b      	b.n	80059ec <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2203      	movs	r2, #3
 8005958:	60da      	str	r2, [r3, #12]
 800595a:	e047      	b.n	80059ec <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800595c:	79fb      	ldrb	r3, [r7, #7]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d10d      	bne.n	800597e <USB_HC_StartXfer+0x136>
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	8a92      	ldrh	r2, [r2, #20]
 800596a:	4293      	cmp	r3, r2
 800596c:	d907      	bls.n	800597e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800596e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	8a92      	ldrh	r2, [r2, #20]
 8005974:	fb03 f202 	mul.w	r2, r3, r2
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	61da      	str	r2, [r3, #28]
 800597c:	e036      	b.n	80059ec <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	6a1a      	ldr	r2, [r3, #32]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	61da      	str	r2, [r3, #28]
 8005986:	e031      	b.n	80059ec <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d018      	beq.n	80059c2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	8a92      	ldrh	r2, [r2, #20]
 8005998:	4413      	add	r3, r2
 800599a:	3b01      	subs	r3, #1
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	8a92      	ldrh	r2, [r2, #20]
 80059a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80059a4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80059a6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80059a8:	8b7b      	ldrh	r3, [r7, #26]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d90b      	bls.n	80059c6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80059ae:	8b7b      	ldrh	r3, [r7, #26]
 80059b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	8a92      	ldrh	r2, [r2, #20]
 80059b8:	fb03 f202 	mul.w	r2, r3, r2
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	61da      	str	r2, [r3, #28]
 80059c0:	e001      	b.n	80059c6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80059c2:	2301      	movs	r3, #1
 80059c4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	78db      	ldrb	r3, [r3, #3]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	8a92      	ldrh	r2, [r2, #20]
 80059d4:	fb03 f202 	mul.w	r2, r3, r2
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	61da      	str	r2, [r3, #28]
 80059dc:	e006      	b.n	80059ec <USB_HC_StartXfer+0x1a4>
 80059de:	bf00      	nop
 80059e0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	6a1a      	ldr	r2, [r3, #32]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80059f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80059f6:	04d9      	lsls	r1, r3, #19
 80059f8:	4ba3      	ldr	r3, [pc, #652]	@ (8005c88 <USB_HC_StartXfer+0x440>)
 80059fa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059fc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	7d9b      	ldrb	r3, [r3, #22]
 8005a02:	075b      	lsls	r3, r3, #29
 8005a04:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a08:	69f9      	ldr	r1, [r7, #28]
 8005a0a:	0148      	lsls	r0, r1, #5
 8005a0c:	6a39      	ldr	r1, [r7, #32]
 8005a0e:	4401      	add	r1, r0
 8005a10:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a14:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a16:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005a18:	79fb      	ldrb	r3, [r7, #7]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	6999      	ldr	r1, [r3, #24]
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	015a      	lsls	r2, r3, #5
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a2e:	460a      	mov	r2, r1
 8005a30:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	bf0c      	ite	eq
 8005a42:	2301      	moveq	r3, #1
 8005a44:	2300      	movne	r3, #0
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	69fa      	ldr	r2, [r7, #28]
 8005a5a:	0151      	lsls	r1, r2, #5
 8005a5c:	6a3a      	ldr	r2, [r7, #32]
 8005a5e:	440a      	add	r2, r1
 8005a60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a64:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005a68:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	7e7b      	ldrb	r3, [r7, #25]
 8005a7a:	075b      	lsls	r3, r3, #29
 8005a7c:	69f9      	ldr	r1, [r7, #28]
 8005a7e:	0148      	lsls	r0, r1, #5
 8005a80:	6a39      	ldr	r1, [r7, #32]
 8005a82:	4401      	add	r1, r0
 8005a84:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	799b      	ldrb	r3, [r3, #6]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	f040 80c3 	bne.w	8005c1c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	7c5b      	ldrb	r3, [r3, #17]
 8005a9a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	69fa      	ldr	r2, [r7, #28]
 8005aa4:	0151      	lsls	r1, r2, #5
 8005aa6:	6a3a      	ldr	r2, [r7, #32]
 8005aa8:	440a      	add	r2, r1
 8005aaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005aae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005ab2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	6a3a      	ldr	r2, [r7, #32]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ace:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005ad2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	79db      	ldrb	r3, [r3, #7]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d123      	bne.n	8005b24 <USB_HC_StartXfer+0x2dc>
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	78db      	ldrb	r3, [r3, #3]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d11f      	bne.n	8005b24 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	69fa      	ldr	r2, [r7, #28]
 8005af4:	0151      	lsls	r1, r2, #5
 8005af6:	6a3a      	ldr	r2, [r7, #32]
 8005af8:	440a      	add	r2, r1
 8005afa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005afe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b02:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	0151      	lsls	r1, r2, #5
 8005b16:	6a3a      	ldr	r2, [r7, #32]
 8005b18:	440a      	add	r2, r1
 8005b1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b22:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	7c9b      	ldrb	r3, [r3, #18]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d003      	beq.n	8005b34 <USB_HC_StartXfer+0x2ec>
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	7c9b      	ldrb	r3, [r3, #18]
 8005b30:	2b03      	cmp	r3, #3
 8005b32:	d117      	bne.n	8005b64 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d113      	bne.n	8005b64 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	78db      	ldrb	r3, [r3, #3]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d10f      	bne.n	8005b64 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	69fa      	ldr	r2, [r7, #28]
 8005b54:	0151      	lsls	r1, r2, #5
 8005b56:	6a3a      	ldr	r2, [r7, #32]
 8005b58:	440a      	add	r2, r1
 8005b5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b62:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	7c9b      	ldrb	r3, [r3, #18]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d162      	bne.n	8005c32 <USB_HC_StartXfer+0x3ea>
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	78db      	ldrb	r3, [r3, #3]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d15e      	bne.n	8005c32 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d858      	bhi.n	8005c30 <USB_HC_StartXfer+0x3e8>
 8005b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b84 <USB_HC_StartXfer+0x33c>)
 8005b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b84:	08005b95 	.word	0x08005b95
 8005b88:	08005bb7 	.word	0x08005bb7
 8005b8c:	08005bd9 	.word	0x08005bd9
 8005b90:	08005bfb 	.word	0x08005bfb
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	0151      	lsls	r1, r2, #5
 8005ba6:	6a3a      	ldr	r2, [r7, #32]
 8005ba8:	440a      	add	r2, r1
 8005baa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bb2:	6053      	str	r3, [r2, #4]
          break;
 8005bb4:	e03d      	b.n	8005c32 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	69fa      	ldr	r2, [r7, #28]
 8005bc6:	0151      	lsls	r1, r2, #5
 8005bc8:	6a3a      	ldr	r2, [r7, #32]
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bd0:	f043 030e 	orr.w	r3, r3, #14
 8005bd4:	6053      	str	r3, [r2, #4]
          break;
 8005bd6:	e02c      	b.n	8005c32 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	69fa      	ldr	r2, [r7, #28]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	6a3a      	ldr	r2, [r7, #32]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005bf6:	6053      	str	r3, [r2, #4]
          break;
 8005bf8:	e01b      	b.n	8005c32 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	0151      	lsls	r1, r2, #5
 8005c0c:	6a3a      	ldr	r2, [r7, #32]
 8005c0e:	440a      	add	r2, r1
 8005c10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c18:	6053      	str	r3, [r2, #4]
          break;
 8005c1a:	e00a      	b.n	8005c32 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c28:	461a      	mov	r2, r3
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	6053      	str	r3, [r2, #4]
 8005c2e:	e000      	b.n	8005c32 <USB_HC_StartXfer+0x3ea>
          break;
 8005c30:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c48:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	78db      	ldrb	r3, [r3, #3]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d004      	beq.n	8005c5c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c58:	613b      	str	r3, [r7, #16]
 8005c5a:	e003      	b.n	8005c64 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c62:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c6a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c78:	461a      	mov	r2, r3
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	e055      	b.n	8005d34 <USB_HC_StartXfer+0x4ec>
 8005c88:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	78db      	ldrb	r3, [r3, #3]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d14e      	bne.n	8005d32 <USB_HC_StartXfer+0x4ea>
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d04a      	beq.n	8005d32 <USB_HC_StartXfer+0x4ea>
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	79db      	ldrb	r3, [r3, #7]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d146      	bne.n	8005d32 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	7c9b      	ldrb	r3, [r3, #18]
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d831      	bhi.n	8005d10 <USB_HC_StartXfer+0x4c8>
 8005cac:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb4 <USB_HC_StartXfer+0x46c>)
 8005cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb2:	bf00      	nop
 8005cb4:	08005cc5 	.word	0x08005cc5
 8005cb8:	08005ce9 	.word	0x08005ce9
 8005cbc:	08005cc5 	.word	0x08005cc5
 8005cc0:	08005ce9 	.word	0x08005ce9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	3303      	adds	r3, #3
 8005cca:	089b      	lsrs	r3, r3, #2
 8005ccc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005cce:	8afa      	ldrh	r2, [r7, #22]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d91c      	bls.n	8005d14 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	f043 0220 	orr.w	r2, r3, #32
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	619a      	str	r2, [r3, #24]
        }
        break;
 8005ce6:	e015      	b.n	8005d14 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	3303      	adds	r3, #3
 8005cee:	089b      	lsrs	r3, r3, #2
 8005cf0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005cf2:	8afa      	ldrh	r2, [r7, #22]
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d90a      	bls.n	8005d18 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005d0e:	e003      	b.n	8005d18 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005d10:	bf00      	nop
 8005d12:	e002      	b.n	8005d1a <USB_HC_StartXfer+0x4d2>
        break;
 8005d14:	bf00      	nop
 8005d16:	e000      	b.n	8005d1a <USB_HC_StartXfer+0x4d2>
        break;
 8005d18:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	6999      	ldr	r1, [r3, #24]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	785a      	ldrb	r2, [r3, #1]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2000      	movs	r0, #0
 8005d2a:	9000      	str	r0, [sp, #0]
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f7ff f9ca 	bl	80050c6 <USB_WritePacket>
  }

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3728      	adds	r7, #40	@ 0x28
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	b29b      	uxth	r3, r3
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b089      	sub	sp, #36	@ 0x24
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	460b      	mov	r3, r1
 8005d68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005d6e:	78fb      	ldrb	r3, [r7, #3]
 8005d70:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	0c9b      	lsrs	r3, r3, #18
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	0fdb      	lsrs	r3, r3, #31
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	0fdb      	lsrs	r3, r3, #31
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	d10d      	bne.n	8005de0 <USB_HC_Halt+0x82>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10a      	bne.n	8005de0 <USB_HC_Halt+0x82>
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d005      	beq.n	8005ddc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d002      	beq.n	8005ddc <USB_HC_Halt+0x7e>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d101      	bne.n	8005de0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	e0d8      	b.n	8005f92 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <USB_HC_Halt+0x8e>
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d173      	bne.n	8005ed4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	0151      	lsls	r1, r2, #5
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	440a      	add	r2, r1
 8005e02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e0a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d14a      	bne.n	8005eae <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d133      	bne.n	8005e8c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	0151      	lsls	r1, r2, #5
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	440a      	add	r2, r1
 8005e3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e42:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e62:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	3301      	adds	r3, #1
 8005e68:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e70:	d82e      	bhi.n	8005ed0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e88:	d0ec      	beq.n	8005e64 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e8a:	e081      	b.n	8005f90 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	0151      	lsls	r1, r2, #5
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ea6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005eaa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005eac:	e070      	b.n	8005f90 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	0151      	lsls	r1, r2, #5
 8005ec0:	69fa      	ldr	r2, [r7, #28]
 8005ec2:	440a      	add	r2, r1
 8005ec4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ec8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ecc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ece:	e05f      	b.n	8005f90 <USB_HC_Halt+0x232>
            break;
 8005ed0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ed2:	e05d      	b.n	8005f90 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005eee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ef2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d133      	bne.n	8005f6c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	0151      	lsls	r1, r2, #5
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	440a      	add	r2, r1
 8005f1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f22:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f42:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	3301      	adds	r3, #1
 8005f48:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f50:	d81d      	bhi.n	8005f8e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f68:	d0ec      	beq.n	8005f44 <USB_HC_Halt+0x1e6>
 8005f6a:	e011      	b.n	8005f90 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	0151      	lsls	r1, r2, #5
 8005f7e:	69fa      	ldr	r2, [r7, #28]
 8005f80:	440a      	add	r2, r1
 8005f82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	e000      	b.n	8005f90 <USB_HC_Halt+0x232>
          break;
 8005f8e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3724      	adds	r7, #36	@ 0x24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
	...

08005fa0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	04da      	lsls	r2, r3, #19
 8005fbc:	4b15      	ldr	r3, [pc, #84]	@ (8006014 <USB_DoPing+0x74>)
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fcc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fd0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005fe8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ff0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ffe:	461a      	mov	r2, r3
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	371c      	adds	r7, #28
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	1ff80000 	.word	0x1ff80000

08006018 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006020:	2300      	movs	r3, #0
 8006022:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7fe ff8d 	bl	8004f4c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006032:	2110      	movs	r1, #16
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7fe ffe6 	bl	8005006 <USB_FlushTxFifo>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7ff f810 	bl	800506a <USB_FlushRxFifo>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006054:	2300      	movs	r3, #0
 8006056:	61bb      	str	r3, [r7, #24]
 8006058:	e01f      	b.n	800609a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	4413      	add	r3, r2
 8006062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006070:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006078:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006080:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	4413      	add	r3, r2
 800608a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800608e:	461a      	mov	r2, r3
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	3301      	adds	r3, #1
 8006098:	61bb      	str	r3, [r7, #24]
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	2b0f      	cmp	r3, #15
 800609e:	d9dc      	bls.n	800605a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80060a0:	2300      	movs	r3, #0
 80060a2:	61bb      	str	r3, [r7, #24]
 80060a4:	e034      	b.n	8006110 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060da:	461a      	mov	r2, r3
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3301      	adds	r3, #1
 80060e4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80060ec:	d80c      	bhi.n	8006108 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006100:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006104:	d0ec      	beq.n	80060e0 <USB_StopHost+0xc8>
 8006106:	e000      	b.n	800610a <USB_StopHost+0xf2>
        break;
 8006108:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	3301      	adds	r3, #1
 800610e:	61bb      	str	r3, [r7, #24]
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	2b0f      	cmp	r3, #15
 8006114:	d9c7      	bls.n	80060a6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800611c:	461a      	mov	r2, r3
 800611e:	f04f 33ff 	mov.w	r3, #4294967295
 8006122:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f04f 32ff 	mov.w	r2, #4294967295
 800612a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7fe fefc 	bl	8004f2a <USB_EnableGlobalInt>

  return ret;
 8006132:	7ffb      	ldrb	r3, [r7, #31]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3720      	adds	r7, #32
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <TM_DELAY_Init>:
} TM_DELAY_Timers_t;

/* Custom timers structure */
static TM_DELAY_Timers_t CustomTimers = {0};

uint32_t TM_DELAY_Init(void) {
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
#if !defined(STM32F0xx)
	uint32_t c;
	
    /* Enable TRC */
    CoreDebug->DEMCR &= ~0x01000000;
 8006142:	4b15      	ldr	r3, [pc, #84]	@ (8006198 <TM_DELAY_Init+0x5c>)
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	4a14      	ldr	r2, [pc, #80]	@ (8006198 <TM_DELAY_Init+0x5c>)
 8006148:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800614c:	60d3      	str	r3, [r2, #12]
    CoreDebug->DEMCR |=  0x01000000;
 800614e:	4b12      	ldr	r3, [pc, #72]	@ (8006198 <TM_DELAY_Init+0x5c>)
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	4a11      	ldr	r2, [pc, #68]	@ (8006198 <TM_DELAY_Init+0x5c>)
 8006154:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006158:	60d3      	str	r3, [r2, #12]
	
    /* Enable counter */
    DWT->CTRL &= ~0x00000001;
 800615a:	4b10      	ldr	r3, [pc, #64]	@ (800619c <TM_DELAY_Init+0x60>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a0f      	ldr	r2, [pc, #60]	@ (800619c <TM_DELAY_Init+0x60>)
 8006160:	f023 0301 	bic.w	r3, r3, #1
 8006164:	6013      	str	r3, [r2, #0]
    DWT->CTRL |=  0x00000001;
 8006166:	4b0d      	ldr	r3, [pc, #52]	@ (800619c <TM_DELAY_Init+0x60>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a0c      	ldr	r2, [pc, #48]	@ (800619c <TM_DELAY_Init+0x60>)
 800616c:	f043 0301 	orr.w	r3, r3, #1
 8006170:	6013      	str	r3, [r2, #0]
	
    /* Reset counter */
    DWT->CYCCNT = 0;
 8006172:	4b0a      	ldr	r3, [pc, #40]	@ (800619c <TM_DELAY_Init+0x60>)
 8006174:	2200      	movs	r2, #0
 8006176:	605a      	str	r2, [r3, #4]
	
	/* Check if DWT has started */
	c = DWT->CYCCNT;
 8006178:	4b08      	ldr	r3, [pc, #32]	@ (800619c <TM_DELAY_Init+0x60>)
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	607b      	str	r3, [r7, #4]
	
	/* 2 dummys */
	__ASM volatile ("NOP");
 800617e:	bf00      	nop
	__ASM volatile ("NOP");
 8006180:	bf00      	nop
	
	/* Return difference, if result is zero, DWT has not started */
	return (DWT->CYCCNT - c);
 8006182:	4b06      	ldr	r3, [pc, #24]	@ (800619c <TM_DELAY_Init+0x60>)
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	1ad3      	subs	r3, r2, r3
#else
	/* Return OK */
	return 1;
#endif
}
 800618a:	4618      	mov	r0, r3
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	e000edf0 	.word	0xe000edf0
 800619c:	e0001000 	.word	0xe0001000

080061a0 <TM_DELAY_1msHandler>:
	/* Return pointer */
	return Timer;
}

/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
 80061a0:	b480      	push	{r7}
 80061a2:	af00      	add	r7, sp, #0
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_DELAY_1msHandler could be implemented in the user file
	*/
}
 80061a4:	bf00      	nop
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
	...

080061b0 <HAL_IncTick>:
/***************************************************/
/*       Custom HAL function implementations       */
/***************************************************/

/* Called from Systick handler */
void HAL_IncTick(void) {
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 80061b6:	4b3e      	ldr	r3, [pc, #248]	@ (80062b0 <HAL_IncTick+0x100>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3301      	adds	r3, #1
 80061bc:	4a3c      	ldr	r2, [pc, #240]	@ (80062b0 <HAL_IncTick+0x100>)
 80061be:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 80061c0:	4b3c      	ldr	r3, [pc, #240]	@ (80062b4 <HAL_IncTick+0x104>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d004      	beq.n	80061d2 <HAL_IncTick+0x22>
		TM_Time2--;
 80061c8:	4b3a      	ldr	r3, [pc, #232]	@ (80062b4 <HAL_IncTick+0x104>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	4a39      	ldr	r2, [pc, #228]	@ (80062b4 <HAL_IncTick+0x104>)
 80061d0:	6013      	str	r3, [r2, #0]
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 80061d2:	2300      	movs	r3, #0
 80061d4:	71fb      	strb	r3, [r7, #7]
 80061d6:	e05f      	b.n	8006298 <HAL_IncTick+0xe8>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 80061d8:	79fb      	ldrb	r3, [r7, #7]
 80061da:	4a37      	ldr	r2, [pc, #220]	@ (80062b8 <HAL_IncTick+0x108>)
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	685b      	ldr	r3, [r3, #4]
		if (
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d055      	beq.n	8006292 <HAL_IncTick+0xe2>
			CustomTimers.Timers[i]->Flags.F.CNTEN /*!< Timer is enabled */
 80061e6:	79fb      	ldrb	r3, [r7, #7]
 80061e8:	4a33      	ldr	r2, [pc, #204]	@ (80062b8 <HAL_IncTick+0x108>)
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	685b      	ldr	r3, [r3, #4]
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d04a      	beq.n	8006292 <HAL_IncTick+0xe2>
		) {
			/* Decrease counter if needed */
			if (CustomTimers.Timers[i]->CNT) {
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	4a2e      	ldr	r2, [pc, #184]	@ (80062b8 <HAL_IncTick+0x108>)
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <HAL_IncTick+0x6c>
				CustomTimers.Timers[i]->CNT--;
 800620c:	79fb      	ldrb	r3, [r7, #7]
 800620e:	4a2a      	ldr	r2, [pc, #168]	@ (80062b8 <HAL_IncTick+0x108>)
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	3a01      	subs	r2, #1
 800621a:	609a      	str	r2, [r3, #8]
			}

			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 800621c:	79fb      	ldrb	r3, [r7, #7]
 800621e:	4a26      	ldr	r2, [pc, #152]	@ (80062b8 <HAL_IncTick+0x108>)
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d132      	bne.n	8006292 <HAL_IncTick+0xe2>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 800622c:	79fb      	ldrb	r3, [r7, #7]
 800622e:	4a22      	ldr	r2, [pc, #136]	@ (80062b8 <HAL_IncTick+0x108>)
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	68da      	ldr	r2, [r3, #12]
 8006238:	79fb      	ldrb	r3, [r7, #7]
 800623a:	491f      	ldr	r1, [pc, #124]	@ (80062b8 <HAL_IncTick+0x108>)
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	440b      	add	r3, r1
 8006240:	6858      	ldr	r0, [r3, #4]
 8006242:	79fb      	ldrb	r3, [r7, #7]
 8006244:	491c      	ldr	r1, [pc, #112]	@ (80062b8 <HAL_IncTick+0x108>)
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	440b      	add	r3, r1
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	4619      	mov	r1, r3
 8006250:	4790      	blx	r2

				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8006252:	79fb      	ldrb	r3, [r7, #7]
 8006254:	4a18      	ldr	r2, [pc, #96]	@ (80062b8 <HAL_IncTick+0x108>)
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	4916      	ldr	r1, [pc, #88]	@ (80062b8 <HAL_IncTick+0x108>)
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	440b      	add	r3, r1
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	6852      	ldr	r2, [r2, #4]
 8006268:	609a      	str	r2, [r3, #8]

				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 800626a:	79fb      	ldrb	r3, [r7, #7]
 800626c:	4a12      	ldr	r2, [pc, #72]	@ (80062b8 <HAL_IncTick+0x108>)
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	d108      	bne.n	8006292 <HAL_IncTick+0xe2>
					/* Disable counter */
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 8006280:	79fb      	ldrb	r3, [r7, #7]
 8006282:	4a0d      	ldr	r2, [pc, #52]	@ (80062b8 <HAL_IncTick+0x108>)
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	7813      	ldrb	r3, [r2, #0]
 800628c:	f36f 0341 	bfc	r3, #1, #1
 8006290:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < CustomTimers.Count; i++) {
 8006292:	79fb      	ldrb	r3, [r7, #7]
 8006294:	3301      	adds	r3, #1
 8006296:	71fb      	strb	r3, [r7, #7]
 8006298:	4b07      	ldr	r3, [pc, #28]	@ (80062b8 <HAL_IncTick+0x108>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	79fa      	ldrb	r2, [r7, #7]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d39a      	bcc.n	80061d8 <HAL_IncTick+0x28>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 80062a2:	f7ff ff7d 	bl	80061a0 <TM_DELAY_1msHandler>
}
 80062a6:	bf00      	nop
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20000194 	.word	0x20000194
 80062b4:	20000190 	.word	0x20000190
 80062b8:	20000198 	.word	0x20000198

080062bc <HAL_Delay>:

void HAL_Delay(uint32_t Delay) {
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062c4:	f3ef 8305 	mrs	r3, IPSR
 80062c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80062ca:	68bb      	ldr	r3, [r7, #8]
	/* Delay for amount of milliseconds */
	/* Check if we are called from ISR */
	if (__get_IPSR() == 0) {
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d115      	bne.n	80062fc <HAL_Delay+0x40>
		/* Called from thread mode */
		uint32_t tickstart = HAL_GetTick();
 80062d0:	f000 f81e 	bl	8006310 <HAL_GetTick>
 80062d4:	60f8      	str	r0, [r7, #12]
		
		/* Count interrupts */
		while ((HAL_GetTick() - tickstart) < Delay) {
 80062d6:	bf00      	nop
 80062d8:	f000 f81a 	bl	8006310 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d8f7      	bhi.n	80062d8 <HAL_Delay+0x1c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				Delay--;
			}
		}
	}
}
 80062e8:	e00b      	b.n	8006302 <HAL_Delay+0x46>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 80062ea:	4b08      	ldr	r3, [pc, #32]	@ (800630c <HAL_Delay+0x50>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d002      	beq.n	80062fc <HAL_Delay+0x40>
				Delay--;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	607b      	str	r3, [r7, #4]
		while (Delay) {
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1f3      	bne.n	80062ea <HAL_Delay+0x2e>
}
 8006302:	bf00      	nop
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	e000e010 	.word	0xe000e010

08006310 <HAL_GetTick>:

uint32_t HAL_GetTick(void) {
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
	/* Return current time in milliseconds */
	return TM_Time;
 8006314:	4b03      	ldr	r3, [pc, #12]	@ (8006324 <HAL_GetTick+0x14>)
 8006316:	681b      	ldr	r3, [r3, #0]
}
 8006318:	4618      	mov	r0, r3
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	20000194 	.word	0x20000194

08006328 <TM_DISCO_LedInit>:
	}
};

#endif

void TM_DISCO_LedInit(void) {
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af02      	add	r7, sp, #8
		/* Set pin as output */
		TM_GPIO_Init(DISCO_Leds[i].Port, DISCO_Leds[i].Pin, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High);
	}
#else
	/* Set pins as output */
	TM_GPIO_Init(DISCO_LED_PORT, LED_ALL, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High);
 800632e:	2303      	movs	r3, #3
 8006330:	9301      	str	r3, [sp, #4]
 8006332:	2300      	movs	r3, #0
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	2300      	movs	r3, #0
 8006338:	2201      	movs	r2, #1
 800633a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800633e:	4805      	ldr	r0, [pc, #20]	@ (8006354 <TM_DISCO_LedInit+0x2c>)
 8006340:	f000 f80a 	bl	8006358 <TM_GPIO_Init>
#endif
	
	/* Turn leds off */
	TM_DISCO_LedOff(LED_ALL);
 8006344:	4b03      	ldr	r3, [pc, #12]	@ (8006354 <TM_DISCO_LedInit+0x2c>)
 8006346:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 800634a:	619a      	str	r2, [r3, #24]
}
 800634c:	bf00      	nop
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	40020c00 	.word	0x40020c00

08006358 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af02      	add	r7, sp, #8
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	4608      	mov	r0, r1
 8006362:	4611      	mov	r1, r2
 8006364:	461a      	mov	r2, r3
 8006366:	4603      	mov	r3, r0
 8006368:	807b      	strh	r3, [r7, #2]
 800636a:	460b      	mov	r3, r1
 800636c:	707b      	strb	r3, [r7, #1]
 800636e:	4613      	mov	r3, r2
 8006370:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 8006372:	887b      	ldrh	r3, [r7, #2]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00e      	beq.n	8006396 <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f875 	bl	8006468 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 800637e:	7838      	ldrb	r0, [r7, #0]
 8006380:	787a      	ldrb	r2, [r7, #1]
 8006382:	8879      	ldrh	r1, [r7, #2]
 8006384:	7d3b      	ldrb	r3, [r7, #20]
 8006386:	9301      	str	r3, [sp, #4]
 8006388:	7c3b      	ldrb	r3, [r7, #16]
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	4603      	mov	r3, r0
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f882 	bl	8006498 <TM_GPIO_INT_Init>
 8006394:	e000      	b.n	8006398 <TM_GPIO_Init+0x40>
		return;
 8006396:	bf00      	nop
}
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <TM_GPIO_InitAlternate>:

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af02      	add	r7, sp, #8
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	4608      	mov	r0, r1
 80063a8:	4611      	mov	r1, r2
 80063aa:	461a      	mov	r2, r3
 80063ac:	4603      	mov	r3, r0
 80063ae:	807b      	strh	r3, [r7, #2]
 80063b0:	460b      	mov	r3, r1
 80063b2:	707b      	strb	r3, [r7, #1]
 80063b4:	4613      	mov	r3, r2
 80063b6:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 80063b8:	887b      	ldrh	r3, [r7, #2]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d03f      	beq.n	800643e <TM_GPIO_InitAlternate+0xa0>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f852 	bl	8006468 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	e02a      	b.n	8006420 <TM_GPIO_InitAlternate+0x82>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80063ca:	887a      	ldrh	r2, [r7, #2]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	fa42 f303 	asr.w	r3, r2, r3
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d01e      	beq.n	8006418 <TM_GPIO_InitAlternate+0x7a>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	08da      	lsrs	r2, r3, #3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3208      	adds	r2, #8
 80063e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	f002 0207 	and.w	r2, r2, #7
 80063ec:	0092      	lsls	r2, r2, #2
 80063ee:	210f      	movs	r1, #15
 80063f0:	fa01 f202 	lsl.w	r2, r1, r2
 80063f4:	43d2      	mvns	r2, r2
 80063f6:	4013      	ands	r3, r2
 80063f8:	7f39      	ldrb	r1, [r7, #28]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	f002 0207 	and.w	r2, r2, #7
 8006400:	0092      	lsls	r2, r2, #2
 8006402:	fa01 f202 	lsl.w	r2, r1, r2
 8006406:	4611      	mov	r1, r2
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	08d2      	lsrs	r2, r2, #3
 800640c:	4319      	orrs	r1, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	3208      	adds	r2, #8
 8006412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006416:	e000      	b.n	800641a <TM_GPIO_InitAlternate+0x7c>
			continue;
 8006418:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3301      	adds	r3, #1
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b0f      	cmp	r3, #15
 8006424:	d9d1      	bls.n	80063ca <TM_GPIO_InitAlternate+0x2c>
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8006426:	787a      	ldrb	r2, [r7, #1]
 8006428:	8879      	ldrh	r1, [r7, #2]
 800642a:	7e3b      	ldrb	r3, [r7, #24]
 800642c:	9301      	str	r3, [sp, #4]
 800642e:	783b      	ldrb	r3, [r7, #0]
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	4613      	mov	r3, r2
 8006434:	2202      	movs	r2, #2
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f82e 	bl	8006498 <TM_GPIO_INT_Init>
 800643c:	e000      	b.n	8006440 <TM_GPIO_InitAlternate+0xa2>
		return;
 800643e:	bf00      	nop
}
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f103 433f 	add.w	r3, r3, #3204448256	@ 0xbf000000
 8006454:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 8006458:	0a9b      	lsrs	r3, r3, #10
 800645a:	b29b      	uxth	r3, r3
}
 800645c:	4618      	mov	r0, r3
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7ff ffe8 	bl	8006446 <TM_GPIO_GetPortSource>
 8006476:	4603      	mov	r3, r0
 8006478:	461a      	mov	r2, r3
 800647a:	2301      	movs	r3, #1
 800647c:	fa03 f202 	lsl.w	r2, r3, r2
 8006480:	4b04      	ldr	r3, [pc, #16]	@ (8006494 <TM_GPIO_INT_EnableClock+0x2c>)
 8006482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006484:	4611      	mov	r1, r2
 8006486:	4a03      	ldr	r2, [pc, #12]	@ (8006494 <TM_GPIO_INT_EnableClock+0x2c>)
 8006488:	430b      	orrs	r3, r1
 800648a:	6313      	str	r3, [r2, #48]	@ 0x30
#endif
}
 800648c:	bf00      	nop
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	40023800 	.word	0x40023800

08006498 <TM_GPIO_INT_Init>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	4608      	mov	r0, r1
 80064a2:	4611      	mov	r1, r2
 80064a4:	461a      	mov	r2, r3
 80064a6:	4603      	mov	r3, r0
 80064a8:	807b      	strh	r3, [r7, #2]
 80064aa:	460b      	mov	r3, r1
 80064ac:	707b      	strb	r3, [r7, #1]
 80064ae:	4613      	mov	r3, r2
 80064b0:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff ffc7 	bl	8006446 <TM_GPIO_GetPortSource>
 80064b8:	4603      	mov	r3, r0
 80064ba:	73bb      	strb	r3, [r7, #14]
		GPIO_Speed = TM_GPIO_Speed_High;
	}
#endif
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80064bc:	2300      	movs	r3, #0
 80064be:	73fb      	strb	r3, [r7, #15]
 80064c0:	e067      	b.n	8006592 <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80064c2:	887a      	ldrh	r2, [r7, #2]
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	fa42 f303 	asr.w	r3, r2, r3
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d05b      	beq.n	800658a <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 80064d2:	7bbb      	ldrb	r3, [r7, #14]
 80064d4:	4a33      	ldr	r2, [pc, #204]	@ (80065a4 <TM_GPIO_INT_Init+0x10c>)
 80064d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064da:	b21a      	sxth	r2, r3
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	2101      	movs	r1, #1
 80064e0:	fa01 f303 	lsl.w	r3, r1, r3
 80064e4:	b21b      	sxth	r3, r3
 80064e6:	4313      	orrs	r3, r2
 80064e8:	b21a      	sxth	r2, r3
 80064ea:	7bbb      	ldrb	r3, [r7, #14]
 80064ec:	b291      	uxth	r1, r2
 80064ee:	4a2d      	ldr	r2, [pc, #180]	@ (80065a4 <TM_GPIO_INT_Init+0x10c>)
 80064f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	7bfa      	ldrb	r2, [r7, #15]
 80064fa:	0052      	lsls	r2, r2, #1
 80064fc:	2103      	movs	r1, #3
 80064fe:	fa01 f202 	lsl.w	r2, r1, r2
 8006502:	43d2      	mvns	r2, r2
 8006504:	4013      	ands	r3, r2
 8006506:	7e39      	ldrb	r1, [r7, #24]
 8006508:	7bfa      	ldrb	r2, [r7, #15]
 800650a:	0052      	lsls	r2, r2, #1
 800650c:	fa01 f202 	lsl.w	r2, r1, r2
 8006510:	431a      	orrs	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	7bfb      	ldrb	r3, [r7, #15]
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	2103      	movs	r1, #3
 8006520:	fa01 f303 	lsl.w	r3, r1, r3
 8006524:	43db      	mvns	r3, r3
 8006526:	4013      	ands	r3, r2
 8006528:	7879      	ldrb	r1, [r7, #1]
 800652a:	7bfa      	ldrb	r2, [r7, #15]
 800652c:	0052      	lsls	r2, r2, #1
 800652e:	fa01 f202 	lsl.w	r2, r1, r2
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8006538:	787b      	ldrb	r3, [r7, #1]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d002      	beq.n	8006544 <TM_GPIO_INT_Init+0xac>
 800653e:	787b      	ldrb	r3, [r7, #1]
 8006540:	2b02      	cmp	r3, #2
 8006542:	d123      	bne.n	800658c <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	7bfa      	ldrb	r2, [r7, #15]
 800654a:	2101      	movs	r1, #1
 800654c:	fa01 f202 	lsl.w	r2, r1, r2
 8006550:	b292      	uxth	r2, r2
 8006552:	43d2      	mvns	r2, r2
 8006554:	4013      	ands	r3, r2
 8006556:	7839      	ldrb	r1, [r7, #0]
 8006558:	7bfa      	ldrb	r2, [r7, #15]
 800655a:	fa01 f202 	lsl.w	r2, r1, r2
 800655e:	b292      	uxth	r2, r2
 8006560:	431a      	orrs	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	7bfb      	ldrb	r3, [r7, #15]
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	2103      	movs	r1, #3
 8006570:	fa01 f303 	lsl.w	r3, r1, r3
 8006574:	43db      	mvns	r3, r3
 8006576:	4013      	ands	r3, r2
 8006578:	7f39      	ldrb	r1, [r7, #28]
 800657a:	7bfa      	ldrb	r2, [r7, #15]
 800657c:	0052      	lsls	r2, r2, #1
 800657e:	fa01 f202 	lsl.w	r2, r1, r2
 8006582:	431a      	orrs	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	609a      	str	r2, [r3, #8]
 8006588:	e000      	b.n	800658c <TM_GPIO_INT_Init+0xf4>
			continue;
 800658a:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	3301      	adds	r3, #1
 8006590:	73fb      	strb	r3, [r7, #15]
 8006592:	7bfb      	ldrb	r3, [r7, #15]
 8006594:	2b0f      	cmp	r3, #15
 8006596:	d994      	bls.n	80064c2 <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 8006598:	bf00      	nop
 800659a:	bf00      	nop
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	200001b0 	.word	0x200001b0

080065a8 <TM_SPI_Send>:
 * @brief  Sends single byte over SPI
 * @param  *SPIx: Pointer to SPIx peripheral you will use, where x is between 1 to 6
 * @param  data: 8-bit data size to send over SPI
 * @retval Received byte from slave device
 */
static __INLINE uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	460b      	mov	r3, r1
 80065b2:	70fb      	strb	r3, [r7, #3]
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED_RESP(SPIx, 0);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <TM_SPI_Send+0x1c>
 80065c0:	2300      	movs	r3, #0
 80065c2:	e01f      	b.n	8006604 <TM_SPI_Send+0x5c>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT_TX(SPIx);
 80065c4:	bf00      	nop
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0f9      	beq.n	80065c6 <TM_SPI_Send+0x1e>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f3      	bne.n	80065c6 <TM_SPI_Send+0x1e>
	
	/* Fill output buffer with data */
	SPIx->DR = data;
 80065de:	78fa      	ldrb	r2, [r7, #3]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	60da      	str	r2, [r3, #12]
	
	/* Wait for transmission to complete */
	SPI_WAIT_RX(SPIx);
 80065e4:	bf00      	nop
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0f9      	beq.n	80065e6 <TM_SPI_Send+0x3e>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1f3      	bne.n	80065e6 <TM_SPI_Send+0x3e>
	
	/* Return data from buffer */
	return SPIx->DR;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	b2db      	uxtb	r3, r3
}
 8006604:	4618      	mov	r0, r3
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <TM_LIS302DL_LIS3DSH_Detect>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
float TM_LIS3DSH_INT_Sensitivity;

/* Public */
TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Detect(void) {
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
	uint8_t id;
	/* Delay on power up */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 8006616:	f000 fae3 	bl	8006be0 <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Init SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 800661a:	f000 f86b 	bl	80066f4 <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Get ID */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI(&id, LIS302DL_LIS3DSH_REG_WHO_I_AM, 1);
 800661e:	1dfb      	adds	r3, r7, #7
 8006620:	2201      	movs	r2, #1
 8006622:	210f      	movs	r1, #15
 8006624:	4618      	mov	r0, r3
 8006626:	f000 f8bb 	bl	80067a0 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	/* Check device */
	if (id == LIS302DL_ID) {
 800662a:	79fb      	ldrb	r3, [r7, #7]
 800662c:	2b3b      	cmp	r3, #59	@ 0x3b
 800662e:	d104      	bne.n	800663a <TM_LIS302DL_LIS3DSH_Detect+0x2a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8006630:	4b08      	ldr	r3, [pc, #32]	@ (8006654 <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 8006632:	2201      	movs	r2, #1
 8006634:	701a      	strb	r2, [r3, #0]
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8006636:	2301      	movs	r3, #1
 8006638:	e008      	b.n	800664c <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	} else if (id == LIS3DSH_ID) {
 800663a:	79fb      	ldrb	r3, [r7, #7]
 800663c:	2b3f      	cmp	r3, #63	@ 0x3f
 800663e:	d104      	bne.n	800664a <TM_LIS302DL_LIS3DSH_Detect+0x3a>
		/* Set device */
		TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8006640:	4b04      	ldr	r3, [pc, #16]	@ (8006654 <TM_LIS302DL_LIS3DSH_Detect+0x44>)
 8006642:	2202      	movs	r2, #2
 8006644:	701a      	strb	r2, [r3, #0]
		/* Return device */;
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 8006646:	2302      	movs	r3, #2
 8006648:	e000      	b.n	800664c <TM_LIS302DL_LIS3DSH_Detect+0x3c>
	}
	
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	200001ca 	.word	0x200001ca

08006658 <TM_LIS302DL_LIS3DSH_Init>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_Init(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	4603      	mov	r3, r0
 8006660:	460a      	mov	r2, r1
 8006662:	71fb      	strb	r3, [r7, #7]
 8006664:	4613      	mov	r3, r2
 8006666:	71bb      	strb	r3, [r7, #6]
	/* Init pinout and SPI */
	TM_LIS302DL_LIS3DSH_INT_InitPins();
 8006668:	f000 f844 	bl	80066f4 <TM_LIS302DL_LIS3DSH_INT_InitPins>
	/* Some delay */
	TM_LIS302DL_LIS3DSH_INT_Delay();
 800666c:	f000 fab8 	bl	8006be0 <TM_LIS302DL_LIS3DSH_INT_Delay>
	/* Detect proper device and init it */
	if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8006670:	f7ff ffce 	bl	8006610 <TM_LIS302DL_LIS3DSH_Detect>
 8006674:	4603      	mov	r3, r0
 8006676:	2b01      	cmp	r3, #1
 8006678:	d107      	bne.n	800668a <TM_LIS302DL_LIS3DSH_Init+0x32>
		/* Init sequence for LIS302DL */
		TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(Sensitivity, Filter);
 800667a:	79ba      	ldrb	r2, [r7, #6]
 800667c:	79fb      	ldrb	r3, [r7, #7]
 800667e:	4611      	mov	r1, r2
 8006680:	4618      	mov	r0, r3
 8006682:	f000 f93f 	bl	8006904 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 8006686:	2301      	movs	r3, #1
 8006688:	e010      	b.n	80066ac <TM_LIS302DL_LIS3DSH_Init+0x54>
	} else if (TM_LIS302DL_LIS3DSH_Detect() == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 800668a:	f7ff ffc1 	bl	8006610 <TM_LIS302DL_LIS3DSH_Detect>
 800668e:	4603      	mov	r3, r0
 8006690:	2b02      	cmp	r3, #2
 8006692:	d107      	bne.n	80066a4 <TM_LIS302DL_LIS3DSH_Init+0x4c>
		/* Init sequence for LIS3DSH */
		TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(Sensitivity, Filter);
 8006694:	79ba      	ldrb	r2, [r7, #6]
 8006696:	79fb      	ldrb	r3, [r7, #7]
 8006698:	4611      	mov	r1, r2
 800669a:	4618      	mov	r0, r3
 800669c:	f000 f8ae 	bl	80067fc <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 80066a0:	2302      	movs	r3, #2
 80066a2:	e003      	b.n	80066ac <TM_LIS302DL_LIS3DSH_Init+0x54>
	}
	
	/* Error detection */
	TM_LIS302DL_LIS3DSH_INT_Device = TM_LIS302DL_LIS3DSH_Device_Error;
 80066a4:	4b03      	ldr	r3, [pc, #12]	@ (80066b4 <TM_LIS302DL_LIS3DSH_Init+0x5c>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	701a      	strb	r2, [r3, #0]
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	200001ca 	.word	0x200001ca

080066b8 <TM_LIS302DL_LIS3DSH_ReadAxes>:

TM_LIS302DL_LIS3DSH_Device_t TM_LIS302DL_LIS3DSH_ReadAxes(TM_LIS302DL_LIS3DSH_t* Axes_Data) {
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
	if (TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 80066c0:	4b0b      	ldr	r3, [pc, #44]	@ (80066f0 <TM_LIS302DL_LIS3DSH_ReadAxes+0x38>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d104      	bne.n	80066d2 <TM_LIS302DL_LIS3DSH_ReadAxes+0x1a>
		/* Init sequence for LIS302DL */
		TM_LIS302DL_INT_ReadAxes(Axes_Data);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fa23 	bl	8006b14 <TM_LIS302DL_INT_ReadAxes>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS302DL;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e009      	b.n	80066e6 <TM_LIS302DL_LIS3DSH_ReadAxes+0x2e>
	} else if (TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS3DSH) {
 80066d2:	4b07      	ldr	r3, [pc, #28]	@ (80066f0 <TM_LIS302DL_LIS3DSH_ReadAxes+0x38>)
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d104      	bne.n	80066e4 <TM_LIS302DL_LIS3DSH_ReadAxes+0x2c>
		/* Init sequence for LIS3DSH */
		TM_LIS3DSH_INT_ReadAxes(Axes_Data);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f990 	bl	8006a00 <TM_LIS3DSH_INT_ReadAxes>
		/* Return device */
		return TM_LIS302DL_LIS3DSH_Device_LIS3DSH;
 80066e0:	2302      	movs	r3, #2
 80066e2:	e000      	b.n	80066e6 <TM_LIS302DL_LIS3DSH_ReadAxes+0x2e>
	}
	/* Return Error */
	return TM_LIS302DL_LIS3DSH_Device_Error;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	200001ca 	.word	0x200001ca

080066f4 <TM_LIS302DL_LIS3DSH_INT_InitPins>:

/* Private */
void TM_LIS302DL_LIS3DSH_INT_InitPins(void) {
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af02      	add	r7, sp, #8
	static uint8_t initialized = 0;
	if (initialized) {
 80066fa:	4b0e      	ldr	r3, [pc, #56]	@ (8006734 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x40>)
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d114      	bne.n	800672c <TM_LIS302DL_LIS3DSH_INT_InitPins+0x38>
		return;
	}
	
	/* Initialize SPI */
	TM_SPI_Init(LIS302DL_LIS3DSH_SPI, LIS302DL_LIS3DSH_SPI_PINSPACK);
 8006702:	2100      	movs	r1, #0
 8006704:	480c      	ldr	r0, [pc, #48]	@ (8006738 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x44>)
 8006706:	f000 fa7f 	bl	8006c08 <TM_SPI_Init>
	
	/* Enable clock for CS port */
	/* Configure CS pin */
	/* GPIO Init */
	TM_GPIO_Init(LIS302DL_LIS3DSH_CS_PORT, LIS302DL_LIS3DSH_CS_PIN
 800670a:	2301      	movs	r3, #1
 800670c:	9301      	str	r3, [sp, #4]
 800670e:	2301      	movs	r3, #1
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	2300      	movs	r3, #0
 8006714:	2201      	movs	r2, #1
 8006716:	2108      	movs	r1, #8
 8006718:	4808      	ldr	r0, [pc, #32]	@ (800673c <TM_LIS302DL_LIS3DSH_INT_InitPins+0x48>)
 800671a:	f7ff fe1d 	bl	8006358 <TM_GPIO_Init>
							, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium
							);
	
	/* CS HIGH */
	LIS302DL_LIS3DSH_CS_HIGH;
 800671e:	4b07      	ldr	r3, [pc, #28]	@ (800673c <TM_LIS302DL_LIS3DSH_INT_InitPins+0x48>)
 8006720:	2208      	movs	r2, #8
 8006722:	619a      	str	r2, [r3, #24]
	
	initialized = 1;
 8006724:	4b03      	ldr	r3, [pc, #12]	@ (8006734 <TM_LIS302DL_LIS3DSH_INT_InitPins+0x40>)
 8006726:	2201      	movs	r2, #1
 8006728:	701a      	strb	r2, [r3, #0]
 800672a:	e000      	b.n	800672e <TM_LIS302DL_LIS3DSH_INT_InitPins+0x3a>
		return;
 800672c:	bf00      	nop
}
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	200001d0 	.word	0x200001d0
 8006738:	40013000 	.word	0x40013000
 800673c:	40021000 	.word	0x40021000

08006740 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>:

void TM_LIS302DL_LIS3DSH_INT_WriteSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	70fb      	strb	r3, [r7, #3]
 800674c:	4613      	mov	r3, r2
 800674e:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 8006750:	4b10      	ldr	r3, [pc, #64]	@ (8006794 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x54>)
 8006752:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8006756:	619a      	str	r2, [r3, #24]
	
	if (count > 1 && TM_LIS302DL_LIS3DSH_INT_Device == TM_LIS302DL_LIS3DSH_Device_LIS302DL) {
 8006758:	78bb      	ldrb	r3, [r7, #2]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d907      	bls.n	800676e <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2e>
 800675e:	4b0e      	ldr	r3, [pc, #56]	@ (8006798 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x58>)
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d103      	bne.n	800676e <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x2e>
		/* Add autoincrement bit */
		/* Only LIS302DL device */
		addr |= 0x40;
 8006766:	78fb      	ldrb	r3, [r7, #3]
 8006768:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800676c:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 800676e:	78fb      	ldrb	r3, [r7, #3]
 8006770:	4619      	mov	r1, r3
 8006772:	480a      	ldr	r0, [pc, #40]	@ (800679c <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x5c>)
 8006774:	f7ff ff18 	bl	80065a8 <TM_SPI_Send>
	/* Send data */
	TM_SPI_WriteMulti(LIS302DL_LIS3DSH_SPI, data, count);
 8006778:	78bb      	ldrb	r3, [r7, #2]
 800677a:	461a      	mov	r2, r3
 800677c:	6879      	ldr	r1, [r7, #4]
 800677e:	4807      	ldr	r0, [pc, #28]	@ (800679c <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x5c>)
 8006780:	f000 fa80 	bl	8006c84 <TM_SPI_WriteMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 8006784:	4b03      	ldr	r3, [pc, #12]	@ (8006794 <TM_LIS302DL_LIS3DSH_INT_WriteSPI+0x54>)
 8006786:	2208      	movs	r2, #8
 8006788:	619a      	str	r2, [r3, #24]
}
 800678a:	bf00      	nop
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	40021000 	.word	0x40021000
 8006798:	200001ca 	.word	0x200001ca
 800679c:	40013000 	.word	0x40013000

080067a0 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>:

void TM_LIS302DL_LIS3DSH_INT_ReadSPI(uint8_t* data, uint8_t addr, uint8_t count) {
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	70fb      	strb	r3, [r7, #3]
 80067ac:	4613      	mov	r3, r2
 80067ae:	70bb      	strb	r3, [r7, #2]
	/* Start SPI transmission */
	LIS302DL_LIS3DSH_CS_LOW;
 80067b0:	4b10      	ldr	r3, [pc, #64]	@ (80067f4 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 80067b2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80067b6:	619a      	str	r2, [r3, #24]
	
	/* Add read bit */
	addr |= 0x80;
 80067b8:	78fb      	ldrb	r3, [r7, #3]
 80067ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80067be:	70fb      	strb	r3, [r7, #3]
	
	if (count > 1) {
 80067c0:	78bb      	ldrb	r3, [r7, #2]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d903      	bls.n	80067ce <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x2e>
		/* Add autoincrement bit */
		addr |= 0x40;
 80067c6:	78fb      	ldrb	r3, [r7, #3]
 80067c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067cc:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Send address */
	TM_SPI_Send(LIS302DL_LIS3DSH_SPI, addr);
 80067ce:	78fb      	ldrb	r3, [r7, #3]
 80067d0:	4619      	mov	r1, r3
 80067d2:	4809      	ldr	r0, [pc, #36]	@ (80067f8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x58>)
 80067d4:	f7ff fee8 	bl	80065a8 <TM_SPI_Send>
	/* Receive data */
	TM_SPI_ReadMulti(LIS302DL_LIS3DSH_SPI, data, 0x00, count);
 80067d8:	78bb      	ldrb	r3, [r7, #2]
 80067da:	2200      	movs	r2, #0
 80067dc:	6879      	ldr	r1, [r7, #4]
 80067de:	4806      	ldr	r0, [pc, #24]	@ (80067f8 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x58>)
 80067e0:	f000 fa8b 	bl	8006cfa <TM_SPI_ReadMulti>
	
	/* Stop SPI transmission */
	LIS302DL_LIS3DSH_CS_HIGH;
 80067e4:	4b03      	ldr	r3, [pc, #12]	@ (80067f4 <TM_LIS302DL_LIS3DSH_INT_ReadSPI+0x54>)
 80067e6:	2208      	movs	r2, #8
 80067e8:	619a      	str	r2, [r3, #24]
}
 80067ea:	bf00      	nop
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	40021000 	.word	0x40021000
 80067f8:	40013000 	.word	0x40013000

080067fc <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	4603      	mov	r3, r0
 8006804:	460a      	mov	r2, r1
 8006806:	71fb      	strb	r3, [r7, #7]
 8006808:	4613      	mov	r3, r2
 800680a:	71bb      	strb	r3, [r7, #6]
	uint8_t tmpreg;
	uint16_t temp;

	/* Set data */
	temp = (uint16_t) (LIS3DSH_DATARATE_100 | LIS3DSH_XYZ_ENABLE);
 800680c:	2367      	movs	r3, #103	@ 0x67
 800680e:	81fb      	strh	r3, [r7, #14]
	temp |= (uint16_t) (LIS3DSH_SERIALINTERFACE_4WIRE | LIS3DSH_SELFTEST_NORMAL);
	
	/* Set sensitivity */
	if (Sensitivity == TM_LIS3DSH_Sensitivity_2G) {
 8006810:	79fb      	ldrb	r3, [r7, #7]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d103      	bne.n	800681e <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x22>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_2);
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8006816:	4b35      	ldr	r3, [pc, #212]	@ (80068ec <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8006818:	4a35      	ldr	r2, [pc, #212]	@ (80068f0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf4>)
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	e02a      	b.n	8006874 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_4G) {
 800681e:	79fb      	ldrb	r3, [r7, #7]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d107      	bne.n	8006834 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x38>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_4);
 8006824:	89fb      	ldrh	r3, [r7, #14]
 8006826:	f043 0308 	orr.w	r3, r3, #8
 800682a:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 800682c:	4b2f      	ldr	r3, [pc, #188]	@ (80068ec <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 800682e:	4a31      	ldr	r2, [pc, #196]	@ (80068f4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf8>)
 8006830:	601a      	str	r2, [r3, #0]
 8006832:	e01f      	b.n	8006874 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_6G) {
 8006834:	79fb      	ldrb	r3, [r7, #7]
 8006836:	2b02      	cmp	r3, #2
 8006838:	d107      	bne.n	800684a <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x4e>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_6);
 800683a:	89fb      	ldrh	r3, [r7, #14]
 800683c:	f043 0310 	orr.w	r3, r3, #16
 8006840:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8006842:	4b2a      	ldr	r3, [pc, #168]	@ (80068ec <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8006844:	4a2c      	ldr	r2, [pc, #176]	@ (80068f8 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xfc>)
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	e014      	b.n	8006874 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_8G) {
 800684a:	79fb      	ldrb	r3, [r7, #7]
 800684c:	2b03      	cmp	r3, #3
 800684e:	d107      	bne.n	8006860 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x64>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_8);
 8006850:	89fb      	ldrh	r3, [r7, #14]
 8006852:	f043 0318 	orr.w	r3, r3, #24
 8006856:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8006858:	4b24      	ldr	r3, [pc, #144]	@ (80068ec <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 800685a:	4a28      	ldr	r2, [pc, #160]	@ (80068fc <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x100>)
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	e009      	b.n	8006874 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x78>
	} else if (Sensitivity == TM_LIS3DSH_Sensitivity_16G) {
 8006860:	79fb      	ldrb	r3, [r7, #7]
 8006862:	2b04      	cmp	r3, #4
 8006864:	d13b      	bne.n	80068de <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe2>
		temp |= (uint16_t) (LIS3DSH_FULLSCALE_16);
 8006866:	89fb      	ldrh	r3, [r7, #14]
 8006868:	f043 0320 	orr.w	r3, r3, #32
 800686c:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 800686e:	4b1f      	ldr	r3, [pc, #124]	@ (80068ec <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xf0>)
 8006870:	4a23      	ldr	r2, [pc, #140]	@ (8006900 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x104>)
 8006872:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	
	/* Set filter */
	if (Filter == TM_LIS3DSH_Filter_800Hz) {
 8006874:	79bb      	ldrb	r3, [r7, #6]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d01a      	beq.n	80068b0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_800 << 8);
	} else if (Filter == TM_LIS3DSH_Filter_400Hz) {
 800687a:	79bb      	ldrb	r3, [r7, #6]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d104      	bne.n	800688a <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0x8e>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_400 << 8);
 8006880:	89fb      	ldrh	r3, [r7, #14]
 8006882:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006886:	81fb      	strh	r3, [r7, #14]
 8006888:	e012      	b.n	80068b0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_200Hz) {
 800688a:	79bb      	ldrb	r3, [r7, #6]
 800688c:	2b02      	cmp	r3, #2
 800688e:	d106      	bne.n	800689e <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xa2>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_200 << 8);
 8006890:	89fb      	ldrh	r3, [r7, #14]
 8006892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800689a:	81fb      	strh	r3, [r7, #14]
 800689c:	e008      	b.n	80068b0 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xb4>
	} else if (Filter == TM_LIS3DSH_Filter_50Hz) {
 800689e:	79bb      	ldrb	r3, [r7, #6]
 80068a0:	2b03      	cmp	r3, #3
 80068a2:	d11e      	bne.n	80068e2 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe6>
		temp |= (uint16_t) (LIS3DSH_FILTER_BW_50 << 8);
 80068a4:	89fb      	ldrh	r3, [r7, #14]
 80068a6:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80068aa:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80068ae:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	
	/* Configure MEMS: power mode(ODR) and axes enable */
	tmpreg = (uint8_t) (temp);
 80068b0:	89fb      	ldrh	r3, [r7, #14]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG4 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG4_ADDR, 1);
 80068b6:	f107 030d 	add.w	r3, r7, #13
 80068ba:	2201      	movs	r2, #1
 80068bc:	2120      	movs	r1, #32
 80068be:	4618      	mov	r0, r3
 80068c0:	f7ff ff3e 	bl	8006740 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>

	/* Configure MEMS: full scale and self test */
	tmpreg = (uint8_t) (temp >> 8);
 80068c4:	89fb      	ldrh	r3, [r7, #14]
 80068c6:	0a1b      	lsrs	r3, r3, #8
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	737b      	strb	r3, [r7, #13]

	/* Write value to MEMS CTRL_REG5 register */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI(&tmpreg, LIS3DSH_CTRL_REG5_ADDR, 1);
 80068ce:	f107 030d 	add.w	r3, r7, #13
 80068d2:	2201      	movs	r2, #1
 80068d4:	2124      	movs	r1, #36	@ 0x24
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7ff ff32 	bl	8006740 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 80068dc:	e002      	b.n	80068e4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
		return;
 80068de:	bf00      	nop
 80068e0:	e000      	b.n	80068e4 <TM_LIS302DL_LIS3DSH_INT_InitLIS3DSH+0xe8>
		return;
 80068e2:	bf00      	nop
}
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	200001cc 	.word	0x200001cc
 80068f0:	3d75c28f 	.word	0x3d75c28f
 80068f4:	3df5c28f 	.word	0x3df5c28f
 80068f8:	3e3851ec 	.word	0x3e3851ec
 80068fc:	3e75c28f 	.word	0x3e75c28f
 8006900:	3f3ae148 	.word	0x3f3ae148

08006904 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL>:

void TM_LIS302DL_LIS3DSH_INT_InitLIS302DL(TM_LIS302DL_LIS3DSH_Sensitivity_t Sensitivity, TM_LIS302DL_LIS3DSH_Filter_t Filter) {
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	4603      	mov	r3, r0
 800690c:	460a      	mov	r2, r1
 800690e:	71fb      	strb	r3, [r7, #7]
 8006910:	4613      	mov	r3, r2
 8006912:	71bb      	strb	r3, [r7, #6]
	uint16_t ctrl;
	
	/* Reboot */
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8006914:	f107 030e 	add.w	r3, r7, #14
 8006918:	2201      	movs	r2, #1
 800691a:	2121      	movs	r1, #33	@ 0x21
 800691c:	4618      	mov	r0, r3
 800691e:	f7ff ff3f 	bl	80067a0 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	ctrl |= LIS302DL_BOOT_REBOOTMEMORY;
 8006922:	89fb      	ldrh	r3, [r7, #14]
 8006924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006928:	b29b      	uxth	r3, r3
 800692a:	81fb      	strh	r3, [r7, #14]
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 800692c:	f107 030e 	add.w	r3, r7, #14
 8006930:	2201      	movs	r2, #1
 8006932:	2121      	movs	r1, #33	@ 0x21
 8006934:	4618      	mov	r0, r3
 8006936:	f7ff ff03 	bl	8006740 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Init settings */
	ctrl = (uint16_t) (LIS302DL_DATARATE_100 | LIS302DL_LOWPOWERMODE_ACTIVE | LIS302DL_SELFTEST_NORMAL | LIS302DL_XYZ_ENABLE);
 800693a:	2347      	movs	r3, #71	@ 0x47
 800693c:	81fb      	strh	r3, [r7, #14]
	if (Sensitivity == TM_LIS302DL_Sensitivity_2_3G) {
 800693e:	79fb      	ldrb	r3, [r7, #7]
 8006940:	2b05      	cmp	r3, #5
 8006942:	d105      	bne.n	8006950 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x4c>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_2_3;
 8006944:	89fb      	ldrh	r3, [r7, #14]
 8006946:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_2_3G;
 8006948:	4b2a      	ldr	r3, [pc, #168]	@ (80069f4 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 800694a:	4a2b      	ldr	r2, [pc, #172]	@ (80069f8 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf4>)
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	e00a      	b.n	8006966 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x62>
	} else if (Sensitivity == TM_LIS302DL_Sensitivity_9_2G) {
 8006950:	79fb      	ldrb	r3, [r7, #7]
 8006952:	2b06      	cmp	r3, #6
 8006954:	d147      	bne.n	80069e6 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe2>
		ctrl |= (uint16_t) LIS302DL_FULLSCALE_9_2;
 8006956:	89fb      	ldrh	r3, [r7, #14]
 8006958:	f043 0320 	orr.w	r3, r3, #32
 800695c:	b29b      	uxth	r3, r3
 800695e:	81fb      	strh	r3, [r7, #14]
		TM_LIS3DSH_INT_Sensitivity = LIS302DL_SENSITIVITY_9_2G;
 8006960:	4b24      	ldr	r3, [pc, #144]	@ (80069f4 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf0>)
 8006962:	4a26      	ldr	r2, [pc, #152]	@ (80069fc <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xf8>)
 8006964:	601a      	str	r2, [r3, #0]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 8006966:	f107 030e 	add.w	r3, r7, #14
 800696a:	2201      	movs	r2, #1
 800696c:	2120      	movs	r1, #32
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff fee6 	bl	8006740 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	
	/* Read filter */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8006974:	f107 030e 	add.w	r3, r7, #14
 8006978:	2201      	movs	r2, #1
 800697a:	2121      	movs	r1, #33	@ 0x21
 800697c:	4618      	mov	r0, r3
 800697e:	f7ff fedf 	bl	8006740 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
	ctrl &= (uint8_t) ~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | LIS302DL_HIGHPASSFILTER_LEVEL_3 | LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);
 8006982:	89fb      	ldrh	r3, [r7, #14]
 8006984:	f003 03d0 	and.w	r3, r3, #208	@ 0xd0
 8006988:	b29b      	uxth	r3, r3
 800698a:	81fb      	strh	r3, [r7, #14]
	/* Set filter */
    ctrl |= (uint8_t) (LIS302DL_HIGHPASSFILTERINTERRUPT_1_2 | LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER);
 800698c:	89fb      	ldrh	r3, [r7, #14]
 800698e:	f043 032c 	orr.w	r3, r3, #44	@ 0x2c
 8006992:	b29b      	uxth	r3, r3
 8006994:	81fb      	strh	r3, [r7, #14]
	/* Set filter value */
	if (Filter == TM_LIS302DL_Filter_2Hz) {
 8006996:	79bb      	ldrb	r3, [r7, #6]
 8006998:	2b04      	cmp	r3, #4
 800699a:	d102      	bne.n	80069a2 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0x9e>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_0;
 800699c:	89fb      	ldrh	r3, [r7, #14]
 800699e:	81fb      	strh	r3, [r7, #14]
 80069a0:	e019      	b.n	80069d6 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_1Hz) {
 80069a2:	79bb      	ldrb	r3, [r7, #6]
 80069a4:	2b05      	cmp	r3, #5
 80069a6:	d105      	bne.n	80069b4 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xb0>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_1;
 80069a8:	89fb      	ldrh	r3, [r7, #14]
 80069aa:	f043 0301 	orr.w	r3, r3, #1
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	81fb      	strh	r3, [r7, #14]
 80069b2:	e010      	b.n	80069d6 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_500mHz) {
 80069b4:	79bb      	ldrb	r3, [r7, #6]
 80069b6:	2b06      	cmp	r3, #6
 80069b8:	d105      	bne.n	80069c6 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xc2>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_2;
 80069ba:	89fb      	ldrh	r3, [r7, #14]
 80069bc:	f043 0302 	orr.w	r3, r3, #2
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	81fb      	strh	r3, [r7, #14]
 80069c4:	e007      	b.n	80069d6 <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xd2>
	} else if (Filter == TM_LIS302DL_Filter_250mHz) {
 80069c6:	79bb      	ldrb	r3, [r7, #6]
 80069c8:	2b07      	cmp	r3, #7
 80069ca:	d10e      	bne.n	80069ea <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe6>
		ctrl |= (uint8_t) LIS302DL_HIGHPASSFILTER_LEVEL_3;
 80069cc:	89fb      	ldrh	r3, [r7, #14]
 80069ce:	f043 0303 	orr.w	r3, r3, #3
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	81fb      	strh	r3, [r7, #14]
	} else {
		return;
	}
	/* Write settings */
	TM_LIS302DL_LIS3DSH_INT_WriteSPI((uint8_t *)&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80069d6:	f107 030e 	add.w	r3, r7, #14
 80069da:	2201      	movs	r2, #1
 80069dc:	2121      	movs	r1, #33	@ 0x21
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff feae 	bl	8006740 <TM_LIS302DL_LIS3DSH_INT_WriteSPI>
 80069e4:	e002      	b.n	80069ec <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
		return;
 80069e6:	bf00      	nop
 80069e8:	e000      	b.n	80069ec <TM_LIS302DL_LIS3DSH_INT_InitLIS302DL+0xe8>
		return;
 80069ea:	bf00      	nop
}
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	200001cc 	.word	0x200001cc
 80069f8:	41900000 	.word	0x41900000
 80069fc:	42900000 	.word	0x42900000

08006a00 <TM_LIS3DSH_INT_ReadAxes>:

void TM_LIS3DSH_INT_ReadAxes(TM_LIS302DL_LIS3DSH_t *Axes_Data) {
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
	int8_t buffer[6];

	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8006a08:	f107 0308 	add.w	r3, r7, #8
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	2128      	movs	r1, #40	@ 0x28
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff fec5 	bl	80067a0 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8006a16:	f107 0308 	add.w	r3, r7, #8
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	2129      	movs	r1, #41	@ 0x29
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7ff febd 	bl	80067a0 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 8006a26:	f107 0308 	add.w	r3, r7, #8
 8006a2a:	3302      	adds	r3, #2
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	212a      	movs	r1, #42	@ 0x2a
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff feb5 	bl	80067a0 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 8006a36:	f107 0308 	add.w	r3, r7, #8
 8006a3a:	3303      	adds	r3, #3
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	212b      	movs	r1, #43	@ 0x2b
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7ff fead 	bl	80067a0 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 8006a46:	f107 0308 	add.w	r3, r7, #8
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	212c      	movs	r1, #44	@ 0x2c
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff fea5 	bl	80067a0 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 8006a56:	f107 0308 	add.w	r3, r7, #8
 8006a5a:	3305      	adds	r3, #5
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	212d      	movs	r1, #45	@ 0x2d
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff fe9d 	bl	80067a0 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	
	/* Set axes */
	Axes_Data->X = (int16_t)((buffer[1] << 8) + buffer[0]) * TM_LIS3DSH_INT_Sensitivity;
 8006a66:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	021b      	lsls	r3, r3, #8
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	4413      	add	r3, r2
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	b21b      	sxth	r3, r3
 8006a7c:	ee07 3a90 	vmov	s15, r3
 8006a80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a84:	4b22      	ldr	r3, [pc, #136]	@ (8006b10 <TM_LIS3DSH_INT_ReadAxes+0x110>)
 8006a86:	edd3 7a00 	vldr	s15, [r3]
 8006a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a92:	ee17 3a90 	vmov	r3, s15
 8006a96:	b21a      	sxth	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	801a      	strh	r2, [r3, #0]
	Axes_Data->Y = (int16_t)((buffer[3] << 8) + buffer[2]) * TM_LIS3DSH_INT_Sensitivity;
 8006a9c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	021b      	lsls	r3, r3, #8
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	4413      	add	r3, r2
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	b21b      	sxth	r3, r3
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006aba:	4b15      	ldr	r3, [pc, #84]	@ (8006b10 <TM_LIS3DSH_INT_ReadAxes+0x110>)
 8006abc:	edd3 7a00 	vldr	s15, [r3]
 8006ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ac8:	ee17 3a90 	vmov	r3, s15
 8006acc:	b21a      	sxth	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	805a      	strh	r2, [r3, #2]
	Axes_Data->Z = (int16_t)((buffer[5] << 8) + buffer[4]) * TM_LIS3DSH_INT_Sensitivity;
 8006ad2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	021b      	lsls	r3, r3, #8
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	4413      	add	r3, r2
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	b21b      	sxth	r3, r3
 8006ae8:	ee07 3a90 	vmov	s15, r3
 8006aec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006af0:	4b07      	ldr	r3, [pc, #28]	@ (8006b10 <TM_LIS3DSH_INT_ReadAxes+0x110>)
 8006af2:	edd3 7a00 	vldr	s15, [r3]
 8006af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006afa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006afe:	ee17 3a90 	vmov	r3, s15
 8006b02:	b21a      	sxth	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	809a      	strh	r2, [r3, #4]
}
 8006b08:	bf00      	nop
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	200001cc 	.word	0x200001cc

08006b14 <TM_LIS302DL_INT_ReadAxes>:

void TM_LIS302DL_INT_ReadAxes(TM_LIS302DL_LIS3DSH_t* Axes_Data) {
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
	int8_t buffer[3];
	int16_t SwitchXY;

	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[0], LIS302DL_OUT_X_ADDR, 1);
 8006b1c:	f107 0308 	add.w	r3, r7, #8
 8006b20:	2201      	movs	r2, #1
 8006b22:	2129      	movs	r1, #41	@ 0x29
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7ff fe3b 	bl	80067a0 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[1], LIS302DL_OUT_Y_ADDR, 1);
 8006b2a:	f107 0308 	add.w	r3, r7, #8
 8006b2e:	3301      	adds	r3, #1
 8006b30:	2201      	movs	r2, #1
 8006b32:	212b      	movs	r1, #43	@ 0x2b
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7ff fe33 	bl	80067a0 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	TM_LIS302DL_LIS3DSH_INT_ReadSPI((uint8_t*)&buffer[2], LIS302DL_OUT_Z_ADDR, 1);
 8006b3a:	f107 0308 	add.w	r3, r7, #8
 8006b3e:	3302      	adds	r3, #2
 8006b40:	2201      	movs	r2, #1
 8006b42:	212d      	movs	r1, #45	@ 0x2d
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff fe2b 	bl	80067a0 <TM_LIS302DL_LIS3DSH_INT_ReadSPI>
	
	/* Set axes */
	Axes_Data->X = (int16_t) (buffer[0]) * TM_LIS3DSH_INT_Sensitivity;
 8006b4a:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b56:	4b21      	ldr	r3, [pc, #132]	@ (8006bdc <TM_LIS302DL_INT_ReadAxes+0xc8>)
 8006b58:	edd3 7a00 	vldr	s15, [r3]
 8006b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b64:	ee17 3a90 	vmov	r3, s15
 8006b68:	b21a      	sxth	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	801a      	strh	r2, [r3, #0]
	Axes_Data->Y = (int16_t) (buffer[1]) * TM_LIS3DSH_INT_Sensitivity;
 8006b6e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b7a:	4b18      	ldr	r3, [pc, #96]	@ (8006bdc <TM_LIS302DL_INT_ReadAxes+0xc8>)
 8006b7c:	edd3 7a00 	vldr	s15, [r3]
 8006b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b88:	ee17 3a90 	vmov	r3, s15
 8006b8c:	b21a      	sxth	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	805a      	strh	r2, [r3, #2]
	Axes_Data->Z = (int16_t) (buffer[2]) * TM_LIS3DSH_INT_Sensitivity;	
 8006b92:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8006bdc <TM_LIS302DL_INT_ReadAxes+0xc8>)
 8006ba0:	edd3 7a00 	vldr	s15, [r3]
 8006ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bac:	ee17 3a90 	vmov	r3, s15
 8006bb0:	b21a      	sxth	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	809a      	strh	r2, [r3, #4]
	/* Switch axes */
	SwitchXY  = Axes_Data->X;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	81fb      	strh	r3, [r7, #14]
	Axes_Data->X = Axes_Data->Y;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	801a      	strh	r2, [r3, #0]
	Axes_Data->X = -SwitchXY;
 8006bc6:	89fb      	ldrh	r3, [r7, #14]
 8006bc8:	425b      	negs	r3, r3
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	b21a      	sxth	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	801a      	strh	r2, [r3, #0]
}
 8006bd2:	bf00      	nop
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	200001cc 	.word	0x200001cc

08006be0 <TM_LIS302DL_LIS3DSH_INT_Delay>:

void TM_LIS302DL_LIS3DSH_INT_Delay(void) {
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
	uint32_t delay = 1000000;
 8006be6:	4b07      	ldr	r3, [pc, #28]	@ (8006c04 <TM_LIS302DL_LIS3DSH_INT_Delay+0x24>)
 8006be8:	607b      	str	r3, [r7, #4]
	while (delay--);
 8006bea:	bf00      	nop
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	1e5a      	subs	r2, r3, #1
 8006bf0:	607a      	str	r2, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1fa      	bne.n	8006bec <TM_LIS302DL_LIS3DSH_INT_Delay+0xc>
}
 8006bf6:	bf00      	nop
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	000f4240 	.word	0x000f4240

08006c08 <TM_SPI_Init>:
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack);

void TM_SPI_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack) {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af02      	add	r7, sp, #8
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	70fb      	strb	r3, [r7, #3]
	/* Init with default settings */
#ifdef SPI1
	if (SPIx == SPI1) {
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a18      	ldr	r2, [pc, #96]	@ (8006c78 <TM_SPI_Init+0x70>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d10a      	bne.n	8006c32 <TM_SPI_Init+0x2a>
		TM_SPIx_Init(SPI1, pinspack, TM_SPI1_MODE, TM_SPI1_PRESCALER, TM_SPI1_MASTERSLAVE, TM_SPI1_FIRSTBIT);
 8006c1c:	78f9      	ldrb	r1, [r7, #3]
 8006c1e:	2300      	movs	r3, #0
 8006c20:	9301      	str	r3, [sp, #4]
 8006c22:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	2320      	movs	r3, #32
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	4812      	ldr	r0, [pc, #72]	@ (8006c78 <TM_SPI_Init+0x70>)
 8006c2e:	f000 f8b1 	bl	8006d94 <TM_SPIx_Init>
	}
#endif
#ifdef SPI2
	if (SPIx == SPI2) {
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a11      	ldr	r2, [pc, #68]	@ (8006c7c <TM_SPI_Init+0x74>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d10a      	bne.n	8006c50 <TM_SPI_Init+0x48>
		TM_SPIx_Init(SPI2, pinspack, TM_SPI2_MODE, TM_SPI2_PRESCALER, TM_SPI2_MASTERSLAVE, TM_SPI2_FIRSTBIT);
 8006c3a:	78f9      	ldrb	r1, [r7, #3]
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	9301      	str	r3, [sp, #4]
 8006c40:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	2320      	movs	r3, #32
 8006c48:	2200      	movs	r2, #0
 8006c4a:	480c      	ldr	r0, [pc, #48]	@ (8006c7c <TM_SPI_Init+0x74>)
 8006c4c:	f000 f8a2 	bl	8006d94 <TM_SPIx_Init>
	}
#endif
#ifdef SPI3
	if (SPIx == SPI3) {
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a0b      	ldr	r2, [pc, #44]	@ (8006c80 <TM_SPI_Init+0x78>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d10a      	bne.n	8006c6e <TM_SPI_Init+0x66>
		TM_SPIx_Init(SPI3, pinspack, TM_SPI3_MODE, TM_SPI3_PRESCALER, TM_SPI3_MASTERSLAVE, TM_SPI3_FIRSTBIT);
 8006c58:	78f9      	ldrb	r1, [r7, #3]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	9301      	str	r3, [sp, #4]
 8006c5e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	2320      	movs	r3, #32
 8006c66:	2200      	movs	r2, #0
 8006c68:	4805      	ldr	r0, [pc, #20]	@ (8006c80 <TM_SPI_Init+0x78>)
 8006c6a:	f000 f893 	bl	8006d94 <TM_SPIx_Init>
#ifdef SPI6
	if (SPIx == SPI6) {
		TM_SPIx_Init(SPI6, pinspack, TM_SPI6_MODE, TM_SPI6_PRESCALER, TM_SPI6_MASTERSLAVE, TM_SPI6_FIRSTBIT);
	}
#endif
}
 8006c6e:	bf00      	nop
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	40013000 	.word	0x40013000
 8006c7c:	40003800 	.word	0x40003800
 8006c80:	40003c00 	.word	0x40003c00

08006c84 <TM_SPI_WriteMulti>:
		/* Read data register */
		*dataIn++ = *(__IO uint8_t *)&SPIx->DR;
	}
}

void TM_SPI_WriteMulti(SPI_TypeDef* SPIx, uint8_t* dataOut, uint32_t count) {
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d029      	beq.n	8006cf0 <TM_SPI_WriteMulti+0x6c>
	
	while (count--) {
 8006c9c:	e023      	b.n	8006ce6 <TM_SPI_WriteMulti+0x62>
		/* Wait busy */
		SPI_WAIT_TX(SPIx);
 8006c9e:	bf00      	nop
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d0f9      	beq.n	8006ca0 <TM_SPI_WriteMulti+0x1c>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1f3      	bne.n	8006ca0 <TM_SPI_WriteMulti+0x1c>
		
		/* Fill output buffer with data */
		*(__IO uint8_t *)&SPIx->DR = *dataOut++;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	1c5a      	adds	r2, r3, #1
 8006cbc:	60ba      	str	r2, [r7, #8]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	320c      	adds	r2, #12
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	7013      	strb	r3, [r2, #0]
		
		/* Wait for SPI to end everything */
		SPI_WAIT_RX(SPIx);
 8006cc6:	bf00      	nop
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0f9      	beq.n	8006cc8 <TM_SPI_WriteMulti+0x44>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1f3      	bne.n	8006cc8 <TM_SPI_WriteMulti+0x44>
		
		/* Read data register */
		(void)*(__IO uint16_t *)&SPIx->DR;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	330c      	adds	r3, #12
 8006ce4:	881b      	ldrh	r3, [r3, #0]
	while (count--) {
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	1e5a      	subs	r2, r3, #1
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1d6      	bne.n	8006c9e <TM_SPI_WriteMulti+0x1a>
	}
}
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <TM_SPI_ReadMulti>:

void TM_SPI_ReadMulti(SPI_TypeDef* SPIx, uint8_t* dataIn, uint8_t dummy, uint32_t count) {
 8006cfa:	b480      	push	{r7}
 8006cfc:	b085      	sub	sp, #20
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	60f8      	str	r0, [r7, #12]
 8006d02:	60b9      	str	r1, [r7, #8]
 8006d04:	603b      	str	r3, [r7, #0]
 8006d06:	4613      	mov	r3, r2
 8006d08:	71fb      	strb	r3, [r7, #7]
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED(SPIx);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d02c      	beq.n	8006d70 <TM_SPI_ReadMulti+0x76>
	
	while (count--) {
 8006d16:	e026      	b.n	8006d66 <TM_SPI_ReadMulti+0x6c>
		/* Wait busy */
		SPI_WAIT_TX(SPIx);
 8006d18:	bf00      	nop
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0f9      	beq.n	8006d1a <TM_SPI_ReadMulti+0x20>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1f3      	bne.n	8006d1a <TM_SPI_ReadMulti+0x20>
		
		/* Fill output buffer with data */
		*(__IO uint8_t *)&SPIx->DR = dummy;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	330c      	adds	r3, #12
 8006d36:	79fa      	ldrb	r2, [r7, #7]
 8006d38:	701a      	strb	r2, [r3, #0]
		
		/* Wait for SPI to end everything */
		SPI_WAIT_RX(SPIx);
 8006d3a:	bf00      	nop
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0f9      	beq.n	8006d3c <TM_SPI_ReadMulti+0x42>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1f3      	bne.n	8006d3c <TM_SPI_ReadMulti+0x42>
		
		/* Save data to buffer */
		*dataIn++ = *(__IO uint8_t *)&SPIx->DR;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f103 020c 	add.w	r2, r3, #12
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	1c59      	adds	r1, r3, #1
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	7812      	ldrb	r2, [r2, #0]
 8006d62:	b2d2      	uxtb	r2, r2
 8006d64:	701a      	strb	r2, [r3, #0]
	while (count--) {
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	1e5a      	subs	r2, r3, #1
 8006d6a:	603a      	str	r2, [r7, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1d3      	bne.n	8006d18 <TM_SPI_ReadMulti+0x1e>
	}
}
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <TM_SPI_InitCustomPinsCallback>:
		/* Save data to buffer */
		*dataIn++ = SPIx->DR;
	}
}

__weak void TM_SPI_InitCustomPinsCallback(SPI_TypeDef* SPIx, uint16_t AlternateFunction) { 
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	460b      	mov	r3, r1
 8006d84:	807b      	strh	r3, [r7, #2]
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_SPI_InitCustomPinsCallback could be implemented in the user file
   */
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
	...

08006d94 <TM_SPIx_Init>:

/* Private functions */
static void TM_SPIx_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack, TM_SPI_Mode_t SPI_Mode, uint16_t SPI_BaudRatePrescaler, uint16_t SPI_MasterSlave, uint16_t SPI_FirstBit) {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b09c      	sub	sp, #112	@ 0x70
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	4608      	mov	r0, r1
 8006d9e:	4611      	mov	r1, r2
 8006da0:	461a      	mov	r2, r3
 8006da2:	4603      	mov	r3, r0
 8006da4:	70fb      	strb	r3, [r7, #3]
 8006da6:	460b      	mov	r3, r1
 8006da8:	70bb      	strb	r3, [r7, #2]
 8006daa:	4613      	mov	r3, r2
 8006dac:	803b      	strh	r3, [r7, #0]
	SPI_HandleTypeDef SPIHandle;
	
	/* Save instance */
	SPIHandle.Instance = SPIx;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	61bb      	str	r3, [r7, #24]
	
#ifdef SPI1	
	if (SPIx == SPI1) {
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a46      	ldr	r2, [pc, #280]	@ (8006ed0 <TM_SPIx_Init+0x13c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d113      	bne.n	8006de2 <TM_SPIx_Init+0x4e>
		/* Enable SPI clock */
		__HAL_RCC_SPI1_CLK_ENABLE();
 8006dba:	2300      	movs	r3, #0
 8006dbc:	617b      	str	r3, [r7, #20]
 8006dbe:	4b45      	ldr	r3, [pc, #276]	@ (8006ed4 <TM_SPIx_Init+0x140>)
 8006dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dc2:	4a44      	ldr	r2, [pc, #272]	@ (8006ed4 <TM_SPIx_Init+0x140>)
 8006dc4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8006dca:	4b42      	ldr	r3, [pc, #264]	@ (8006ed4 <TM_SPIx_Init+0x140>)
 8006dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006dd2:	617b      	str	r3, [r7, #20]
 8006dd4:	697b      	ldr	r3, [r7, #20]
		
		/* Init pins */
		TM_SPI1_INT_InitPins(pinspack);
 8006dd6:	78fb      	ldrb	r3, [r7, #3]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 f881 	bl	8006ee0 <TM_SPI1_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI1_DATASIZE;
 8006dde:	2300      	movs	r3, #0
 8006de0:	627b      	str	r3, [r7, #36]	@ 0x24
	}
#endif
#ifdef SPI2
	if (SPIx == SPI2) {
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a3c      	ldr	r2, [pc, #240]	@ (8006ed8 <TM_SPIx_Init+0x144>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d113      	bne.n	8006e12 <TM_SPIx_Init+0x7e>
		/* Enable SPI clock */
		__HAL_RCC_SPI2_CLK_ENABLE();
 8006dea:	2300      	movs	r3, #0
 8006dec:	613b      	str	r3, [r7, #16]
 8006dee:	4b39      	ldr	r3, [pc, #228]	@ (8006ed4 <TM_SPIx_Init+0x140>)
 8006df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df2:	4a38      	ldr	r2, [pc, #224]	@ (8006ed4 <TM_SPIx_Init+0x140>)
 8006df4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006dfa:	4b36      	ldr	r3, [pc, #216]	@ (8006ed4 <TM_SPIx_Init+0x140>)
 8006dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e02:	613b      	str	r3, [r7, #16]
 8006e04:	693b      	ldr	r3, [r7, #16]
		
		/* Init pins */
		TM_SPI2_INT_InitPins(pinspack);
 8006e06:	78fb      	ldrb	r3, [r7, #3]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 f899 	bl	8006f40 <TM_SPI2_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI2_DATASIZE;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	627b      	str	r3, [r7, #36]	@ 0x24
	}
#endif
#ifdef SPI3
	if (SPIx == SPI3) {
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a31      	ldr	r2, [pc, #196]	@ (8006edc <TM_SPIx_Init+0x148>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d113      	bne.n	8006e42 <TM_SPIx_Init+0xae>
		/* Enable SPI clock */
		__HAL_RCC_SPI3_CLK_ENABLE();
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60fb      	str	r3, [r7, #12]
 8006e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8006ed4 <TM_SPIx_Init+0x140>)
 8006e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e22:	4a2c      	ldr	r2, [pc, #176]	@ (8006ed4 <TM_SPIx_Init+0x140>)
 8006e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8006ed4 <TM_SPIx_Init+0x140>)
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e32:	60fb      	str	r3, [r7, #12]
 8006e34:	68fb      	ldr	r3, [r7, #12]
		
		/* Init pins */
		TM_SPI3_INT_InitPins(pinspack);
 8006e36:	78fb      	ldrb	r3, [r7, #3]
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f000 f8e5 	bl	8007008 <TM_SPI3_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI3_DATASIZE;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	627b      	str	r3, [r7, #36]	@ 0x24
		SPIHandle.Init.DataSize = TM_SPI6_DATASIZE;
	}
#endif

	/* Fill SPI settings */
	SPIHandle.Init.BaudRatePrescaler = SPI_BaudRatePrescaler;
 8006e42:	883b      	ldrh	r3, [r7, #0]
 8006e44:	637b      	str	r3, [r7, #52]	@ 0x34
	SPIHandle.Init.FirstBit = SPI_FirstBit;
 8006e46:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8006e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPIHandle.Init.Mode = SPI_MasterSlave;
 8006e4c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8006e50:	61fb      	str	r3, [r7, #28]
	
	SPIHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e52:	2300      	movs	r3, #0
 8006e54:	643b      	str	r3, [r7, #64]	@ 0x40
	SPIHandle.Init.CRCPolynomial = 7;
 8006e56:	2307      	movs	r3, #7
 8006e58:	647b      	str	r3, [r7, #68]	@ 0x44
	SPIHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	SPIHandle.Init.NSS = SPI_NSS_SOFT;
 8006e5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e62:	633b      	str	r3, [r7, #48]	@ 0x30
	SPIHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8006e64:	2300      	movs	r3, #0
 8006e66:	623b      	str	r3, [r7, #32]
    SPIHandle.Init.DataSize = SPI_DATASIZE_8BIT;
    SPIHandle.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
#endif
	
	/* SPI mode */
	if (SPI_Mode == TM_SPI_Mode_0) {
 8006e68:	78bb      	ldrb	r3, [r7, #2]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d104      	bne.n	8006e78 <TM_SPIx_Init+0xe4>
		SPIHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	62bb      	str	r3, [r7, #40]	@ 0x28
		SPIHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006e72:	2300      	movs	r3, #0
 8006e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e76:	e016      	b.n	8006ea6 <TM_SPIx_Init+0x112>
	} else if (SPI_Mode == TM_SPI_Mode_1) {
 8006e78:	78bb      	ldrb	r3, [r7, #2]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d104      	bne.n	8006e88 <TM_SPIx_Init+0xf4>
		SPIHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	62bb      	str	r3, [r7, #40]	@ 0x28
		SPIHandle.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006e82:	2301      	movs	r3, #1
 8006e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e86:	e00e      	b.n	8006ea6 <TM_SPIx_Init+0x112>
	} else if (SPI_Mode == TM_SPI_Mode_2) {
 8006e88:	78bb      	ldrb	r3, [r7, #2]
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d104      	bne.n	8006e98 <TM_SPIx_Init+0x104>
		SPIHandle.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006e8e:	2302      	movs	r3, #2
 8006e90:	62bb      	str	r3, [r7, #40]	@ 0x28
		SPIHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006e92:	2300      	movs	r3, #0
 8006e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e96:	e006      	b.n	8006ea6 <TM_SPIx_Init+0x112>
	} else if (SPI_Mode == TM_SPI_Mode_3) {
 8006e98:	78bb      	ldrb	r3, [r7, #2]
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d103      	bne.n	8006ea6 <TM_SPIx_Init+0x112>
		SPIHandle.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
		SPIHandle.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}
	
	/* Disable first */
	__HAL_SPI_DISABLE(&SPIHandle);
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006eb0:	601a      	str	r2, [r3, #0]
	
	/* Init SPI */
	HAL_SPI_Init(&SPIHandle);
 8006eb2:	f107 0318 	add.w	r3, r7, #24
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fd ff4a 	bl	8004d50 <HAL_SPI_Init>
	
	/* Enable SPI */
	__HAL_SPI_ENABLE(&SPIHandle);
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ec6:	601a      	str	r2, [r3, #0]
}
 8006ec8:	bf00      	nop
 8006eca:	3770      	adds	r7, #112	@ 0x70
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	40013000 	.word	0x40013000
 8006ed4:	40023800 	.word	0x40023800
 8006ed8:	40003800 	.word	0x40003800
 8006edc:	40003c00 	.word	0x40003c00

08006ee0 <TM_SPI1_INT_InitPins>:

/* Private functions */
#ifdef SPI1
void TM_SPI1_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af02      	add	r7, sp, #8
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOA)
	if (pinspack == TM_SPI_PinsPack_1) {
 8006eea:	79fb      	ldrb	r3, [r7, #7]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d109      	bne.n	8006f04 <TM_SPI1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI1);
 8006ef0:	2305      	movs	r3, #5
 8006ef2:	9301      	str	r3, [sp, #4]
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	2300      	movs	r3, #0
 8006efa:	2200      	movs	r2, #0
 8006efc:	21e0      	movs	r1, #224	@ 0xe0
 8006efe:	480d      	ldr	r0, [pc, #52]	@ (8006f34 <TM_SPI1_INT_InitPins+0x54>)
 8006f00:	f7ff fa4d 	bl	800639e <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8006f04:	79fb      	ldrb	r3, [r7, #7]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d109      	bne.n	8006f1e <TM_SPI1_INT_InitPins+0x3e>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI1);
 8006f0a:	2305      	movs	r3, #5
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	2303      	movs	r3, #3
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	2300      	movs	r3, #0
 8006f14:	2200      	movs	r2, #0
 8006f16:	2138      	movs	r1, #56	@ 0x38
 8006f18:	4807      	ldr	r0, [pc, #28]	@ (8006f38 <TM_SPI1_INT_InitPins+0x58>)
 8006f1a:	f7ff fa40 	bl	800639e <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	2b04      	cmp	r3, #4
 8006f22:	d103      	bne.n	8006f2c <TM_SPI1_INT_InitPins+0x4c>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI1, GPIO_AFx_SPI1);
 8006f24:	2105      	movs	r1, #5
 8006f26:	4805      	ldr	r0, [pc, #20]	@ (8006f3c <TM_SPI1_INT_InitPins+0x5c>)
 8006f28:	f7ff ff27 	bl	8006d7a <TM_SPI_InitCustomPinsCallback>
	}
}
 8006f2c:	bf00      	nop
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	40020000 	.word	0x40020000
 8006f38:	40020400 	.word	0x40020400
 8006f3c:	40013000 	.word	0x40013000

08006f40 <TM_SPI2_INT_InitPins>:
#endif

#ifdef SPI2
void TM_SPI2_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af02      	add	r7, sp, #8
 8006f46:	4603      	mov	r3, r0
 8006f48:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOB) && defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_1) {
 8006f4a:	79fb      	ldrb	r3, [r7, #7]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d114      	bne.n	8006f7a <TM_SPI2_INT_InitPins+0x3a>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 8006f50:	2305      	movs	r3, #5
 8006f52:	9301      	str	r3, [sp, #4]
 8006f54:	2303      	movs	r3, #3
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	2300      	movs	r3, #0
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006f60:	4825      	ldr	r0, [pc, #148]	@ (8006ff8 <TM_SPI2_INT_InitPins+0xb8>)
 8006f62:	f7ff fa1c 	bl	800639e <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 8006f66:	2305      	movs	r3, #5
 8006f68:	9301      	str	r3, [sp, #4]
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	2300      	movs	r3, #0
 8006f70:	2200      	movs	r2, #0
 8006f72:	210c      	movs	r1, #12
 8006f74:	4821      	ldr	r0, [pc, #132]	@ (8006ffc <TM_SPI2_INT_InitPins+0xbc>)
 8006f76:	f7ff fa12 	bl	800639e <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8006f7a:	79fb      	ldrb	r3, [r7, #7]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d10a      	bne.n	8006f96 <TM_SPI2_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 8006f80:	2305      	movs	r3, #5
 8006f82:	9301      	str	r3, [sp, #4]
 8006f84:	2303      	movs	r3, #3
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8006f90:	4819      	ldr	r0, [pc, #100]	@ (8006ff8 <TM_SPI2_INT_InitPins+0xb8>)
 8006f92:	f7ff fa04 	bl	800639e <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_3) {
 8006f96:	79fb      	ldrb	r3, [r7, #7]
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d109      	bne.n	8006fb0 <TM_SPI2_INT_InitPins+0x70>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 8006f9c:	2305      	movs	r3, #5
 8006f9e:	9301      	str	r3, [sp, #4]
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	210d      	movs	r1, #13
 8006faa:	4815      	ldr	r0, [pc, #84]	@ (8007000 <TM_SPI2_INT_InitPins+0xc0>)
 8006fac:	f7ff f9f7 	bl	800639e <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB) && defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_4) {
 8006fb0:	79fb      	ldrb	r3, [r7, #7]
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d114      	bne.n	8006fe0 <TM_SPI2_INT_InitPins+0xa0>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 8006fb6:	2305      	movs	r3, #5
 8006fb8:	9301      	str	r3, [sp, #4]
 8006fba:	2303      	movs	r3, #3
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8006fc6:	480c      	ldr	r0, [pc, #48]	@ (8006ff8 <TM_SPI2_INT_InitPins+0xb8>)
 8006fc8:	f7ff f9e9 	bl	800639e <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_1, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 8006fcc:	2305      	movs	r3, #5
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2102      	movs	r1, #2
 8006fda:	4809      	ldr	r0, [pc, #36]	@ (8007000 <TM_SPI2_INT_InitPins+0xc0>)
 8006fdc:	f7ff f9df 	bl	800639e <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
 8006fe2:	2b04      	cmp	r3, #4
 8006fe4:	d103      	bne.n	8006fee <TM_SPI2_INT_InitPins+0xae>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI2, GPIO_AFx_SPI2);
 8006fe6:	2105      	movs	r1, #5
 8006fe8:	4806      	ldr	r0, [pc, #24]	@ (8007004 <TM_SPI2_INT_InitPins+0xc4>)
 8006fea:	f7ff fec6 	bl	8006d7a <TM_SPI_InitCustomPinsCallback>
	}
}
 8006fee:	bf00      	nop
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	40020400 	.word	0x40020400
 8006ffc:	40020800 	.word	0x40020800
 8007000:	40022000 	.word	0x40022000
 8007004:	40003800 	.word	0x40003800

08007008 <TM_SPI3_INT_InitPins>:
#endif

#ifdef SPI3
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af02      	add	r7, sp, #8
 800700e:	4603      	mov	r3, r0
 8007010:	71fb      	strb	r3, [r7, #7]
	/* Enable SPI pins */
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_1) {
 8007012:	79fb      	ldrb	r3, [r7, #7]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d109      	bne.n	800702c <TM_SPI3_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI3);
 8007018:	2306      	movs	r3, #6
 800701a:	9301      	str	r3, [sp, #4]
 800701c:	2303      	movs	r3, #3
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	2300      	movs	r3, #0
 8007022:	2200      	movs	r2, #0
 8007024:	2138      	movs	r1, #56	@ 0x38
 8007026:	480e      	ldr	r0, [pc, #56]	@ (8007060 <TM_SPI3_INT_InitPins+0x58>)
 8007028:	f7ff f9b9 	bl	800639e <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_2) {
 800702c:	79fb      	ldrb	r3, [r7, #7]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d10a      	bne.n	8007048 <TM_SPI3_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI3);
 8007032:	2306      	movs	r3, #6
 8007034:	9301      	str	r3, [sp, #4]
 8007036:	2303      	movs	r3, #3
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	2300      	movs	r3, #0
 800703c:	2200      	movs	r2, #0
 800703e:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8007042:	4808      	ldr	r0, [pc, #32]	@ (8007064 <TM_SPI3_INT_InitPins+0x5c>)
 8007044:	f7ff f9ab 	bl	800639e <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8007048:	79fb      	ldrb	r3, [r7, #7]
 800704a:	2b04      	cmp	r3, #4
 800704c:	d103      	bne.n	8007056 <TM_SPI3_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI3, GPIO_AFx_SPI3);
 800704e:	2106      	movs	r1, #6
 8007050:	4805      	ldr	r0, [pc, #20]	@ (8007068 <TM_SPI3_INT_InitPins+0x60>)
 8007052:	f7ff fe92 	bl	8006d7a <TM_SPI_InitCustomPinsCallback>
	}
}
 8007056:	bf00      	nop
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	40020400 	.word	0x40020400
 8007064:	40020800 	.word	0x40020800
 8007068:	40003c00 	.word	0x40003c00

0800706c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800706c:	b590      	push	{r4, r7, lr}
 800706e:	b089      	sub	sp, #36	@ 0x24
 8007070:	af04      	add	r7, sp, #16
 8007072:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007074:	2301      	movs	r3, #1
 8007076:	2202      	movs	r2, #2
 8007078:	2102      	movs	r1, #2
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fc85 	bl	800798a <USBH_FindInterface>
 8007080:	4603      	mov	r3, r0
 8007082:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007084:	7bfb      	ldrb	r3, [r7, #15]
 8007086:	2bff      	cmp	r3, #255	@ 0xff
 8007088:	d002      	beq.n	8007090 <USBH_CDC_InterfaceInit+0x24>
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d901      	bls.n	8007094 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007090:	2302      	movs	r3, #2
 8007092:	e13d      	b.n	8007310 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007094:	7bfb      	ldrb	r3, [r7, #15]
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fc5a 	bl	8007952 <USBH_SelectInterface>
 800709e:	4603      	mov	r3, r0
 80070a0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80070a2:	7bbb      	ldrb	r3, [r7, #14]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80070a8:	2302      	movs	r3, #2
 80070aa:	e131      	b.n	8007310 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80070b2:	2050      	movs	r0, #80	@ 0x50
 80070b4:	f002 fb64 	bl	8009780 <malloc>
 80070b8:	4603      	mov	r3, r0
 80070ba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80070c2:	69db      	ldr	r3, [r3, #28]
 80070c4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80070cc:	2302      	movs	r3, #2
 80070ce:	e11f      	b.n	8007310 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80070d0:	2250      	movs	r2, #80	@ 0x50
 80070d2:	2100      	movs	r1, #0
 80070d4:	68b8      	ldr	r0, [r7, #8]
 80070d6:	f002 fc11 	bl	80098fc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80070da:	7bfb      	ldrb	r3, [r7, #15]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	211a      	movs	r1, #26
 80070e0:	fb01 f303 	mul.w	r3, r1, r3
 80070e4:	4413      	add	r3, r2
 80070e6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	b25b      	sxtb	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	da15      	bge.n	800711e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	211a      	movs	r1, #26
 80070f8:	fb01 f303 	mul.w	r3, r1, r3
 80070fc:	4413      	add	r3, r2
 80070fe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007102:	781a      	ldrb	r2, [r3, #0]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007108:	7bfb      	ldrb	r3, [r7, #15]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	211a      	movs	r1, #26
 800710e:	fb01 f303 	mul.w	r3, r1, r3
 8007112:	4413      	add	r3, r2
 8007114:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007118:	881a      	ldrh	r2, [r3, #0]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	785b      	ldrb	r3, [r3, #1]
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f001 ffbe 	bl	80090a6 <USBH_AllocPipe>
 800712a:	4603      	mov	r3, r0
 800712c:	461a      	mov	r2, r3
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	7819      	ldrb	r1, [r3, #0]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	7858      	ldrb	r0, [r3, #1]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	8952      	ldrh	r2, [r2, #10]
 800714a:	9202      	str	r2, [sp, #8]
 800714c:	2203      	movs	r2, #3
 800714e:	9201      	str	r2, [sp, #4]
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	4623      	mov	r3, r4
 8007154:	4602      	mov	r2, r0
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f001 ff76 	bl	8009048 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	2200      	movs	r2, #0
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f002 fa85 	bl	8009674 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800716a:	2300      	movs	r3, #0
 800716c:	2200      	movs	r2, #0
 800716e:	210a      	movs	r1, #10
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fc0a 	bl	800798a <USBH_FindInterface>
 8007176:	4603      	mov	r3, r0
 8007178:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	2bff      	cmp	r3, #255	@ 0xff
 800717e:	d002      	beq.n	8007186 <USBH_CDC_InterfaceInit+0x11a>
 8007180:	7bfb      	ldrb	r3, [r7, #15]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d901      	bls.n	800718a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007186:	2302      	movs	r3, #2
 8007188:	e0c2      	b.n	8007310 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800718a:	7bfb      	ldrb	r3, [r7, #15]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	211a      	movs	r1, #26
 8007190:	fb01 f303 	mul.w	r3, r1, r3
 8007194:	4413      	add	r3, r2
 8007196:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	b25b      	sxtb	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	da16      	bge.n	80071d0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	211a      	movs	r1, #26
 80071a8:	fb01 f303 	mul.w	r3, r1, r3
 80071ac:	4413      	add	r3, r2
 80071ae:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80071b2:	781a      	ldrb	r2, [r3, #0]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	211a      	movs	r1, #26
 80071be:	fb01 f303 	mul.w	r3, r1, r3
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80071c8:	881a      	ldrh	r2, [r3, #0]
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	835a      	strh	r2, [r3, #26]
 80071ce:	e015      	b.n	80071fc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	211a      	movs	r1, #26
 80071d6:	fb01 f303 	mul.w	r3, r1, r3
 80071da:	4413      	add	r3, r2
 80071dc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80071e0:	781a      	ldrb	r2, [r3, #0]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	211a      	movs	r1, #26
 80071ec:	fb01 f303 	mul.w	r3, r1, r3
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80071f6:	881a      	ldrh	r2, [r3, #0]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	211a      	movs	r1, #26
 8007202:	fb01 f303 	mul.w	r3, r1, r3
 8007206:	4413      	add	r3, r2
 8007208:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	b25b      	sxtb	r3, r3
 8007210:	2b00      	cmp	r3, #0
 8007212:	da16      	bge.n	8007242 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	211a      	movs	r1, #26
 800721a:	fb01 f303 	mul.w	r3, r1, r3
 800721e:	4413      	add	r3, r2
 8007220:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007224:	781a      	ldrb	r2, [r3, #0]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	211a      	movs	r1, #26
 8007230:	fb01 f303 	mul.w	r3, r1, r3
 8007234:	4413      	add	r3, r2
 8007236:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800723a:	881a      	ldrh	r2, [r3, #0]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	835a      	strh	r2, [r3, #26]
 8007240:	e015      	b.n	800726e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	211a      	movs	r1, #26
 8007248:	fb01 f303 	mul.w	r3, r1, r3
 800724c:	4413      	add	r3, r2
 800724e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007252:	781a      	ldrb	r2, [r3, #0]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007258:	7bfb      	ldrb	r3, [r7, #15]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	211a      	movs	r1, #26
 800725e:	fb01 f303 	mul.w	r3, r1, r3
 8007262:	4413      	add	r3, r2
 8007264:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007268:	881a      	ldrh	r2, [r3, #0]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	7b9b      	ldrb	r3, [r3, #14]
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 ff16 	bl	80090a6 <USBH_AllocPipe>
 800727a:	4603      	mov	r3, r0
 800727c:	461a      	mov	r2, r3
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	7bdb      	ldrb	r3, [r3, #15]
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 ff0c 	bl	80090a6 <USBH_AllocPipe>
 800728e:	4603      	mov	r3, r0
 8007290:	461a      	mov	r2, r3
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	7b59      	ldrb	r1, [r3, #13]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	7b98      	ldrb	r0, [r3, #14]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	8b12      	ldrh	r2, [r2, #24]
 80072ae:	9202      	str	r2, [sp, #8]
 80072b0:	2202      	movs	r2, #2
 80072b2:	9201      	str	r2, [sp, #4]
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	4623      	mov	r3, r4
 80072b8:	4602      	mov	r2, r0
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f001 fec4 	bl	8009048 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	7b19      	ldrb	r1, [r3, #12]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	7bd8      	ldrb	r0, [r3, #15]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	8b52      	ldrh	r2, [r2, #26]
 80072d8:	9202      	str	r2, [sp, #8]
 80072da:	2202      	movs	r2, #2
 80072dc:	9201      	str	r2, [sp, #4]
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	4623      	mov	r3, r4
 80072e2:	4602      	mov	r2, r0
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f001 feaf 	bl	8009048 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	7b5b      	ldrb	r3, [r3, #13]
 80072f6:	2200      	movs	r2, #0
 80072f8:	4619      	mov	r1, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f002 f9ba 	bl	8009674 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	7b1b      	ldrb	r3, [r3, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f002 f9b3 	bl	8009674 <USBH_LL_SetToggle>

  return USBH_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	bd90      	pop	{r4, r7, pc}

08007318 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00e      	beq.n	8007350 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 fea4 	bl	8009086 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f001 fecf 	bl	80090e8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	7b1b      	ldrb	r3, [r3, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00e      	beq.n	8007376 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	7b1b      	ldrb	r3, [r3, #12]
 800735c:	4619      	mov	r1, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f001 fe91 	bl	8009086 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	7b1b      	ldrb	r3, [r3, #12]
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f001 febc 	bl	80090e8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	7b5b      	ldrb	r3, [r3, #13]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00e      	beq.n	800739c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	7b5b      	ldrb	r3, [r3, #13]
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f001 fe7e 	bl	8009086 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	7b5b      	ldrb	r3, [r3, #13]
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f001 fea9 	bl	80090e8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00b      	beq.n	80073c0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f002 f9ed 	bl	8009790 <free>
    phost->pActiveClass->pData = 0U;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073bc:	2200      	movs	r2, #0
 80073be:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	3340      	adds	r3, #64	@ 0x40
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f8b1 	bl	800754a <GetLineCoding>
 80073e8:	4603      	mov	r3, r0
 80073ea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80073ec:	7afb      	ldrb	r3, [r7, #11]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d105      	bne.n	80073fe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80073f8:	2102      	movs	r1, #2
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80073fe:	7afb      	ldrb	r3, [r7, #11]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007410:	2301      	movs	r3, #1
 8007412:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007428:	2b04      	cmp	r3, #4
 800742a:	d877      	bhi.n	800751c <USBH_CDC_Process+0x114>
 800742c:	a201      	add	r2, pc, #4	@ (adr r2, 8007434 <USBH_CDC_Process+0x2c>)
 800742e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007432:	bf00      	nop
 8007434:	08007449 	.word	0x08007449
 8007438:	0800744f 	.word	0x0800744f
 800743c:	0800747f 	.word	0x0800747f
 8007440:	080074f3 	.word	0x080074f3
 8007444:	08007501 	.word	0x08007501
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	73fb      	strb	r3, [r7, #15]
      break;
 800744c:	e06d      	b.n	800752a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f897 	bl	8007588 <SetLineCoding>
 800745a:	4603      	mov	r3, r0
 800745c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800745e:	7bbb      	ldrb	r3, [r7, #14]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d104      	bne.n	800746e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	2202      	movs	r2, #2
 8007468:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800746c:	e058      	b.n	8007520 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800746e:	7bbb      	ldrb	r3, [r7, #14]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d055      	beq.n	8007520 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2204      	movs	r2, #4
 8007478:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800747c:	e050      	b.n	8007520 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	3340      	adds	r3, #64	@ 0x40
 8007482:	4619      	mov	r1, r3
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f860 	bl	800754a <GetLineCoding>
 800748a:	4603      	mov	r3, r0
 800748c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800748e:	7bbb      	ldrb	r3, [r7, #14]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d126      	bne.n	80074e2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074a6:	791b      	ldrb	r3, [r3, #4]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d13b      	bne.n	8007524 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074b6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d133      	bne.n	8007524 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074c6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d12b      	bne.n	8007524 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074d4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d124      	bne.n	8007524 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f958 	bl	8007790 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80074e0:	e020      	b.n	8007524 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d01d      	beq.n	8007524 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	2204      	movs	r2, #4
 80074ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80074f0:	e018      	b.n	8007524 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f867 	bl	80075c6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f8da 	bl	80076b2 <CDC_ProcessReception>
      break;
 80074fe:	e014      	b.n	800752a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007500:	2100      	movs	r1, #0
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f001 f81a 	bl	800853c <USBH_ClrFeature>
 8007508:	4603      	mov	r3, r0
 800750a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800750c:	7bbb      	ldrb	r3, [r7, #14]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10a      	bne.n	8007528 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800751a:	e005      	b.n	8007528 <USBH_CDC_Process+0x120>

    default:
      break;
 800751c:	bf00      	nop
 800751e:	e004      	b.n	800752a <USBH_CDC_Process+0x122>
      break;
 8007520:	bf00      	nop
 8007522:	e002      	b.n	800752a <USBH_CDC_Process+0x122>
      break;
 8007524:	bf00      	nop
 8007526:	e000      	b.n	800752a <USBH_CDC_Process+0x122>
      break;
 8007528:	bf00      	nop

  }

  return status;
 800752a:	7bfb      	ldrb	r3, [r7, #15]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b082      	sub	sp, #8
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	22a1      	movs	r2, #161	@ 0xa1
 8007558:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2221      	movs	r2, #33	@ 0x21
 800755e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2207      	movs	r2, #7
 8007570:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2207      	movs	r2, #7
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f001 fb14 	bl	8008ba6 <USBH_CtlReq>
 800757e:	4603      	mov	r3, r0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2221      	movs	r2, #33	@ 0x21
 8007596:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2220      	movs	r2, #32
 800759c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2207      	movs	r2, #7
 80075ae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2207      	movs	r2, #7
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f001 faf5 	bl	8008ba6 <USBH_CtlReq>
 80075bc:	4603      	mov	r3, r0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b086      	sub	sp, #24
 80075ca:	af02      	add	r7, sp, #8
 80075cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80075d8:	2300      	movs	r3, #0
 80075da:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d002      	beq.n	80075ec <CDC_ProcessTransmission+0x26>
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d023      	beq.n	8007632 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80075ea:	e05e      	b.n	80076aa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	8b12      	ldrh	r2, [r2, #24]
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d90b      	bls.n	8007610 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	69d9      	ldr	r1, [r3, #28]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8b1a      	ldrh	r2, [r3, #24]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	7b5b      	ldrb	r3, [r3, #13]
 8007604:	2001      	movs	r0, #1
 8007606:	9000      	str	r0, [sp, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 fcda 	bl	8008fc2 <USBH_BulkSendData>
 800760e:	e00b      	b.n	8007628 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007618:	b29a      	uxth	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	7b5b      	ldrb	r3, [r3, #13]
 800761e:	2001      	movs	r0, #1
 8007620:	9000      	str	r0, [sp, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f001 fccd 	bl	8008fc2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2202      	movs	r2, #2
 800762c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007630:	e03b      	b.n	80076aa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	7b5b      	ldrb	r3, [r3, #13]
 8007636:	4619      	mov	r1, r3
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f001 fff1 	bl	8009620 <USBH_LL_GetURBState>
 800763e:	4603      	mov	r3, r0
 8007640:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007642:	7afb      	ldrb	r3, [r7, #11]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d128      	bne.n	800769a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	8b12      	ldrh	r2, [r2, #24]
 8007650:	4293      	cmp	r3, r2
 8007652:	d90e      	bls.n	8007672 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	8b12      	ldrh	r2, [r2, #24]
 800765c:	1a9a      	subs	r2, r3, r2
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	8b12      	ldrh	r2, [r2, #24]
 800766a:	441a      	add	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	61da      	str	r2, [r3, #28]
 8007670:	e002      	b.n	8007678 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800767c:	2b00      	cmp	r3, #0
 800767e:	d004      	beq.n	800768a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007688:	e00e      	b.n	80076a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f868 	bl	8007768 <USBH_CDC_TransmitCallback>
      break;
 8007698:	e006      	b.n	80076a8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800769a:	7afb      	ldrb	r3, [r7, #11]
 800769c:	2b02      	cmp	r3, #2
 800769e:	d103      	bne.n	80076a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80076a8:	bf00      	nop
  }
}
 80076aa:	bf00      	nop
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b086      	sub	sp, #24
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80076c4:	2300      	movs	r3, #0
 80076c6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d002      	beq.n	80076d8 <CDC_ProcessReception+0x26>
 80076d2:	2b04      	cmp	r3, #4
 80076d4:	d00e      	beq.n	80076f4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80076d6:	e043      	b.n	8007760 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	6a19      	ldr	r1, [r3, #32]
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	8b5a      	ldrh	r2, [r3, #26]
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	7b1b      	ldrb	r3, [r3, #12]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 fc91 	bl	800900c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2204      	movs	r2, #4
 80076ee:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80076f2:	e035      	b.n	8007760 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	7b1b      	ldrb	r3, [r3, #12]
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 ff90 	bl	8009620 <USBH_LL_GetURBState>
 8007700:	4603      	mov	r3, r0
 8007702:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007704:	7cfb      	ldrb	r3, [r7, #19]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d129      	bne.n	800775e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	7b1b      	ldrb	r3, [r3, #12]
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f001 fef3 	bl	80094fc <USBH_LL_GetLastXferSize>
 8007716:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	429a      	cmp	r2, r3
 8007720:	d016      	beq.n	8007750 <CDC_ProcessReception+0x9e>
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	8b5b      	ldrh	r3, [r3, #26]
 8007726:	461a      	mov	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4293      	cmp	r3, r2
 800772c:	d910      	bls.n	8007750 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	1ad2      	subs	r2, r2, r3
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	6a1a      	ldr	r2, [r3, #32]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	441a      	add	r2, r3
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2203      	movs	r2, #3
 800774a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800774e:	e006      	b.n	800775e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f80f 	bl	800777c <USBH_CDC_ReceiveCallback>
      break;
 800775e:	bf00      	nop
  }
}
 8007760:	bf00      	nop
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	4613      	mov	r3, r2
 80077b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80077b8:	2302      	movs	r3, #2
 80077ba:	e029      	b.n	8007810 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	79fa      	ldrb	r2, [r7, #7]
 80077c0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f000 f81f 	bl	8007818 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d003      	beq.n	8007808 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f001 fdc3 	bl	8009394 <USBH_LL_Init>

  return USBH_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007820:	2300      	movs	r3, #0
 8007822:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	e009      	b.n	800783e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	33e0      	adds	r3, #224	@ 0xe0
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4413      	add	r3, r2
 8007834:	2200      	movs	r2, #0
 8007836:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3301      	adds	r3, #1
 800783c:	60fb      	str	r3, [r7, #12]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b0f      	cmp	r3, #15
 8007842:	d9f2      	bls.n	800782a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	e009      	b.n	800785e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4413      	add	r3, r2
 8007850:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007854:	2200      	movs	r2, #0
 8007856:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	3301      	adds	r3, #1
 800785c:	60fb      	str	r3, [r7, #12]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007864:	d3f1      	bcc.n	800784a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2240      	movs	r2, #64	@ 0x40
 800788a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	331c      	adds	r3, #28
 80078b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80078ba:	2100      	movs	r1, #0
 80078bc:	4618      	mov	r0, r3
 80078be:	f002 f81d 	bl	80098fc <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80078c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078cc:	2100      	movs	r1, #0
 80078ce:	4618      	mov	r0, r3
 80078d0:	f002 f814 	bl	80098fc <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80078da:	2212      	movs	r2, #18
 80078dc:	2100      	movs	r1, #0
 80078de:	4618      	mov	r0, r3
 80078e0:	f002 f80c 	bl	80098fc <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80078ea:	223e      	movs	r2, #62	@ 0x3e
 80078ec:	2100      	movs	r1, #0
 80078ee:	4618      	mov	r0, r3
 80078f0:	f002 f804 	bl	80098fc <memset>

  return USBH_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80078fe:	b480      	push	{r7}
 8007900:	b085      	sub	sp, #20
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d016      	beq.n	8007940 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10e      	bne.n	800793a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007922:	1c59      	adds	r1, r3, #1
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	33de      	adds	r3, #222	@ 0xde
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	73fb      	strb	r3, [r7, #15]
 8007938:	e004      	b.n	8007944 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800793a:	2302      	movs	r3, #2
 800793c:	73fb      	strb	r3, [r7, #15]
 800793e:	e001      	b.n	8007944 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007940:	2302      	movs	r3, #2
 8007942:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007944:	7bfb      	ldrb	r3, [r7, #15]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007952:	b480      	push	{r7}
 8007954:	b085      	sub	sp, #20
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	460b      	mov	r3, r1
 800795c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007968:	78fa      	ldrb	r2, [r7, #3]
 800796a:	429a      	cmp	r2, r3
 800796c:	d204      	bcs.n	8007978 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	78fa      	ldrb	r2, [r7, #3]
 8007972:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007976:	e001      	b.n	800797c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007978:	2302      	movs	r3, #2
 800797a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800797c:	7bfb      	ldrb	r3, [r7, #15]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800798a:	b480      	push	{r7}
 800798c:	b087      	sub	sp, #28
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	4608      	mov	r0, r1
 8007994:	4611      	mov	r1, r2
 8007996:	461a      	mov	r2, r3
 8007998:	4603      	mov	r3, r0
 800799a:	70fb      	strb	r3, [r7, #3]
 800799c:	460b      	mov	r3, r1
 800799e:	70bb      	strb	r3, [r7, #2]
 80079a0:	4613      	mov	r3, r2
 80079a2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80079a4:	2300      	movs	r3, #0
 80079a6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80079a8:	2300      	movs	r3, #0
 80079aa:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80079b2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80079b4:	e025      	b.n	8007a02 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
 80079b8:	221a      	movs	r2, #26
 80079ba:	fb02 f303 	mul.w	r3, r2, r3
 80079be:	3308      	adds	r3, #8
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	4413      	add	r3, r2
 80079c4:	3302      	adds	r3, #2
 80079c6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	795b      	ldrb	r3, [r3, #5]
 80079cc:	78fa      	ldrb	r2, [r7, #3]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d002      	beq.n	80079d8 <USBH_FindInterface+0x4e>
 80079d2:	78fb      	ldrb	r3, [r7, #3]
 80079d4:	2bff      	cmp	r3, #255	@ 0xff
 80079d6:	d111      	bne.n	80079fc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80079dc:	78ba      	ldrb	r2, [r7, #2]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d002      	beq.n	80079e8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80079e2:	78bb      	ldrb	r3, [r7, #2]
 80079e4:	2bff      	cmp	r3, #255	@ 0xff
 80079e6:	d109      	bne.n	80079fc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80079ec:	787a      	ldrb	r2, [r7, #1]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d002      	beq.n	80079f8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80079f2:	787b      	ldrb	r3, [r7, #1]
 80079f4:	2bff      	cmp	r3, #255	@ 0xff
 80079f6:	d101      	bne.n	80079fc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80079f8:	7dfb      	ldrb	r3, [r7, #23]
 80079fa:	e006      	b.n	8007a0a <USBH_FindInterface+0x80>
    }
    if_ix++;
 80079fc:	7dfb      	ldrb	r3, [r7, #23]
 80079fe:	3301      	adds	r3, #1
 8007a00:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007a02:	7dfb      	ldrb	r3, [r7, #23]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d9d6      	bls.n	80079b6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007a08:	23ff      	movs	r3, #255	@ 0xff
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	371c      	adds	r7, #28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b082      	sub	sp, #8
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f001 fcf4 	bl	800940c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007a24:	2101      	movs	r1, #1
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f001 fe0d 	bl	8009646 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
	...

08007a38 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b088      	sub	sp, #32
 8007a3c:	af04      	add	r7, sp, #16
 8007a3e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007a40:	2302      	movs	r3, #2
 8007a42:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007a44:	2300      	movs	r3, #0
 8007a46:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d102      	bne.n	8007a5a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2203      	movs	r2, #3
 8007a58:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b0b      	cmp	r3, #11
 8007a62:	f200 81bb 	bhi.w	8007ddc <USBH_Process+0x3a4>
 8007a66:	a201      	add	r2, pc, #4	@ (adr r2, 8007a6c <USBH_Process+0x34>)
 8007a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6c:	08007a9d 	.word	0x08007a9d
 8007a70:	08007acf 	.word	0x08007acf
 8007a74:	08007b37 	.word	0x08007b37
 8007a78:	08007d77 	.word	0x08007d77
 8007a7c:	08007ddd 	.word	0x08007ddd
 8007a80:	08007bd7 	.word	0x08007bd7
 8007a84:	08007d1d 	.word	0x08007d1d
 8007a88:	08007c0d 	.word	0x08007c0d
 8007a8c:	08007c2d 	.word	0x08007c2d
 8007a90:	08007c4b 	.word	0x08007c4b
 8007a94:	08007c8f 	.word	0x08007c8f
 8007a98:	08007d5f 	.word	0x08007d5f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f000 819b 	beq.w	8007de0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007ab0:	20c8      	movs	r0, #200	@ 0xc8
 8007ab2:	f001 fe12 	bl	80096da <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 fd05 	bl	80094c6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007acc:	e188      	b.n	8007de0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d107      	bne.n	8007ae8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ae6:	e18a      	b.n	8007dfe <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007aee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007af2:	d914      	bls.n	8007b1e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007afa:	3301      	adds	r3, #1
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d903      	bls.n	8007b16 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	220d      	movs	r2, #13
 8007b12:	701a      	strb	r2, [r3, #0]
      break;
 8007b14:	e173      	b.n	8007dfe <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	701a      	strb	r2, [r3, #0]
      break;
 8007b1c:	e16f      	b.n	8007dfe <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007b24:	f103 020a 	add.w	r2, r3, #10
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007b2e:	200a      	movs	r0, #10
 8007b30:	f001 fdd3 	bl	80096da <USBH_Delay>
      break;
 8007b34:	e163      	b.n	8007dfe <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d005      	beq.n	8007b4c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b46:	2104      	movs	r1, #4
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007b4c:	2064      	movs	r0, #100	@ 0x64
 8007b4e:	f001 fdc4 	bl	80096da <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f001 fc90 	bl	8009478 <USBH_LL_GetSpeed>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2205      	movs	r2, #5
 8007b66:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007b68:	2100      	movs	r1, #0
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f001 fa9b 	bl	80090a6 <USBH_AllocPipe>
 8007b70:	4603      	mov	r3, r0
 8007b72:	461a      	mov	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007b78:	2180      	movs	r1, #128	@ 0x80
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f001 fa93 	bl	80090a6 <USBH_AllocPipe>
 8007b80:	4603      	mov	r3, r0
 8007b82:	461a      	mov	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	7919      	ldrb	r1, [r3, #4]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b9c:	9202      	str	r2, [sp, #8]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	9201      	str	r2, [sp, #4]
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2280      	movs	r2, #128	@ 0x80
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 fa4d 	bl	8009048 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	7959      	ldrb	r1, [r3, #5]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007bc2:	9202      	str	r2, [sp, #8]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	9201      	str	r2, [sp, #4]
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2200      	movs	r2, #0
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f001 fa3a 	bl	8009048 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007bd4:	e113      	b.n	8007dfe <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f916 	bl	8007e08 <USBH_HandleEnum>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f040 80fd 	bne.w	8007de4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d103      	bne.n	8007c04 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2208      	movs	r2, #8
 8007c00:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c02:	e0ef      	b.n	8007de4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2207      	movs	r2, #7
 8007c08:	701a      	strb	r2, [r3, #0]
      break;
 8007c0a:	e0eb      	b.n	8007de4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 80e8 	beq.w	8007de8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007c1e:	2101      	movs	r1, #1
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2208      	movs	r2, #8
 8007c28:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007c2a:	e0dd      	b.n	8007de8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fc3a 	bl	80084ae <USBH_SetCfg>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f040 80d5 	bne.w	8007dec <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2209      	movs	r2, #9
 8007c46:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c48:	e0d0      	b.n	8007dec <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007c50:	f003 0320 	and.w	r3, r3, #32
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d016      	beq.n	8007c86 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007c58:	2101      	movs	r1, #1
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fc4a 	bl	80084f4 <USBH_SetFeature>
 8007c60:	4603      	mov	r3, r0
 8007c62:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d103      	bne.n	8007c74 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	220a      	movs	r2, #10
 8007c70:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c72:	e0bd      	b.n	8007df0 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007c74:	7bbb      	ldrb	r3, [r7, #14]
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b03      	cmp	r3, #3
 8007c7a:	f040 80b9 	bne.w	8007df0 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	220a      	movs	r2, #10
 8007c82:	701a      	strb	r2, [r3, #0]
      break;
 8007c84:	e0b4      	b.n	8007df0 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	220a      	movs	r2, #10
 8007c8a:	701a      	strb	r2, [r3, #0]
      break;
 8007c8c:	e0b0      	b.n	8007df0 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 80ad 	beq.w	8007df4 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	73fb      	strb	r3, [r7, #15]
 8007ca6:	e016      	b.n	8007cd6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007ca8:	7bfa      	ldrb	r2, [r7, #15]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	32de      	adds	r2, #222	@ 0xde
 8007cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb2:	791a      	ldrb	r2, [r3, #4]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d108      	bne.n	8007cd0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007cbe:	7bfa      	ldrb	r2, [r7, #15]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	32de      	adds	r2, #222	@ 0xde
 8007cc4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007cce:	e005      	b.n	8007cdc <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	73fb      	strb	r3, [r7, #15]
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d0e5      	beq.n	8007ca8 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d016      	beq.n	8007d14 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	4798      	blx	r3
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d109      	bne.n	8007d0c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2206      	movs	r2, #6
 8007cfc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d04:	2103      	movs	r1, #3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d0a:	e073      	b.n	8007df4 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	220d      	movs	r2, #13
 8007d10:	701a      	strb	r2, [r3, #0]
      break;
 8007d12:	e06f      	b.n	8007df4 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	220d      	movs	r2, #13
 8007d18:	701a      	strb	r2, [r3, #0]
      break;
 8007d1a:	e06b      	b.n	8007df4 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d017      	beq.n	8007d56 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	4798      	blx	r3
 8007d32:	4603      	mov	r3, r0
 8007d34:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007d36:	7bbb      	ldrb	r3, [r7, #14]
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d103      	bne.n	8007d46 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	220b      	movs	r2, #11
 8007d42:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d44:	e058      	b.n	8007df8 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007d46:	7bbb      	ldrb	r3, [r7, #14]
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d154      	bne.n	8007df8 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	220d      	movs	r2, #13
 8007d52:	701a      	strb	r2, [r3, #0]
      break;
 8007d54:	e050      	b.n	8007df8 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	220d      	movs	r2, #13
 8007d5a:	701a      	strb	r2, [r3, #0]
      break;
 8007d5c:	e04c      	b.n	8007df8 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d049      	beq.n	8007dfc <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d6e:	695b      	ldr	r3, [r3, #20]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	4798      	blx	r3
      }
      break;
 8007d74:	e042      	b.n	8007dfc <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7ff fd4a 	bl	8007818 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d009      	beq.n	8007da2 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d005      	beq.n	8007db8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007db2:	2105      	movs	r1, #5
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d107      	bne.n	8007dd4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7ff fe22 	bl	8007a16 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007dd2:	e014      	b.n	8007dfe <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f001 fb19 	bl	800940c <USBH_LL_Start>
      break;
 8007dda:	e010      	b.n	8007dfe <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007ddc:	bf00      	nop
 8007dde:	e00e      	b.n	8007dfe <USBH_Process+0x3c6>
      break;
 8007de0:	bf00      	nop
 8007de2:	e00c      	b.n	8007dfe <USBH_Process+0x3c6>
      break;
 8007de4:	bf00      	nop
 8007de6:	e00a      	b.n	8007dfe <USBH_Process+0x3c6>
    break;
 8007de8:	bf00      	nop
 8007dea:	e008      	b.n	8007dfe <USBH_Process+0x3c6>
      break;
 8007dec:	bf00      	nop
 8007dee:	e006      	b.n	8007dfe <USBH_Process+0x3c6>
      break;
 8007df0:	bf00      	nop
 8007df2:	e004      	b.n	8007dfe <USBH_Process+0x3c6>
      break;
 8007df4:	bf00      	nop
 8007df6:	e002      	b.n	8007dfe <USBH_Process+0x3c6>
      break;
 8007df8:	bf00      	nop
 8007dfa:	e000      	b.n	8007dfe <USBH_Process+0x3c6>
      break;
 8007dfc:	bf00      	nop
  }
  return USBH_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b088      	sub	sp, #32
 8007e0c:	af04      	add	r7, sp, #16
 8007e0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007e10:	2301      	movs	r3, #1
 8007e12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007e14:	2301      	movs	r3, #1
 8007e16:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	785b      	ldrb	r3, [r3, #1]
 8007e1c:	2b07      	cmp	r3, #7
 8007e1e:	f200 81bd 	bhi.w	800819c <USBH_HandleEnum+0x394>
 8007e22:	a201      	add	r2, pc, #4	@ (adr r2, 8007e28 <USBH_HandleEnum+0x20>)
 8007e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e28:	08007e49 	.word	0x08007e49
 8007e2c:	08007f03 	.word	0x08007f03
 8007e30:	08007f6d 	.word	0x08007f6d
 8007e34:	08007ff7 	.word	0x08007ff7
 8007e38:	08008061 	.word	0x08008061
 8007e3c:	080080d1 	.word	0x080080d1
 8007e40:	08008117 	.word	0x08008117
 8007e44:	0800815d 	.word	0x0800815d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007e48:	2108      	movs	r1, #8
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fa4c 	bl	80082e8 <USBH_Get_DevDesc>
 8007e50:	4603      	mov	r3, r0
 8007e52:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e54:	7bbb      	ldrb	r3, [r7, #14]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d12e      	bne.n	8007eb8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	7919      	ldrb	r1, [r3, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007e7e:	9202      	str	r2, [sp, #8]
 8007e80:	2200      	movs	r2, #0
 8007e82:	9201      	str	r2, [sp, #4]
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	4603      	mov	r3, r0
 8007e88:	2280      	movs	r2, #128	@ 0x80
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 f8dc 	bl	8009048 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	7959      	ldrb	r1, [r3, #5]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ea4:	9202      	str	r2, [sp, #8]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	9201      	str	r2, [sp, #4]
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	4603      	mov	r3, r0
 8007eae:	2200      	movs	r2, #0
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f001 f8c9 	bl	8009048 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007eb6:	e173      	b.n	80081a0 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007eb8:	7bbb      	ldrb	r3, [r7, #14]
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	f040 8170 	bne.w	80081a0 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d903      	bls.n	8007ee2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	220d      	movs	r2, #13
 8007ede:	701a      	strb	r2, [r3, #0]
      break;
 8007ee0:	e15e      	b.n	80081a0 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	795b      	ldrb	r3, [r3, #5]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f001 f8fd 	bl	80090e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	791b      	ldrb	r3, [r3, #4]
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f001 f8f7 	bl	80090e8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	701a      	strb	r2, [r3, #0]
      break;
 8007f00:	e14e      	b.n	80081a0 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007f02:	2112      	movs	r1, #18
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f9ef 	bl	80082e8 <USBH_Get_DevDesc>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d103      	bne.n	8007f1c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f1a:	e143      	b.n	80081a4 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f1c:	7bbb      	ldrb	r3, [r7, #14]
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	f040 8140 	bne.w	80081a4 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	d903      	bls.n	8007f46 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	220d      	movs	r2, #13
 8007f42:	701a      	strb	r2, [r3, #0]
      break;
 8007f44:	e12e      	b.n	80081a4 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	795b      	ldrb	r3, [r3, #5]
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f001 f8cb 	bl	80090e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	791b      	ldrb	r3, [r3, #4]
 8007f56:	4619      	mov	r1, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f001 f8c5 	bl	80090e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	701a      	strb	r2, [r3, #0]
      break;
 8007f6a:	e11b      	b.n	80081a4 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fa79 	bl	8008466 <USBH_SetAddress>
 8007f74:	4603      	mov	r3, r0
 8007f76:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d130      	bne.n	8007fe0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007f7e:	2002      	movs	r0, #2
 8007f80:	f001 fbab 	bl	80096da <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2203      	movs	r2, #3
 8007f90:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	7919      	ldrb	r1, [r3, #4]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007fa6:	9202      	str	r2, [sp, #8]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	9201      	str	r2, [sp, #4]
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2280      	movs	r2, #128	@ 0x80
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f001 f848 	bl	8009048 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	7959      	ldrb	r1, [r3, #5]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007fcc:	9202      	str	r2, [sp, #8]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	9201      	str	r2, [sp, #4]
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f001 f835 	bl	8009048 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007fde:	e0e3      	b.n	80081a8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	f040 80e0 	bne.w	80081a8 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	220d      	movs	r2, #13
 8007fec:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	705a      	strb	r2, [r3, #1]
      break;
 8007ff4:	e0d8      	b.n	80081a8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007ff6:	2109      	movs	r1, #9
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f9a1 	bl	8008340 <USBH_Get_CfgDesc>
 8007ffe:	4603      	mov	r3, r0
 8008000:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008002:	7bbb      	ldrb	r3, [r7, #14]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d103      	bne.n	8008010 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2204      	movs	r2, #4
 800800c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800800e:	e0cd      	b.n	80081ac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008010:	7bbb      	ldrb	r3, [r7, #14]
 8008012:	2b03      	cmp	r3, #3
 8008014:	f040 80ca 	bne.w	80081ac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800801e:	3301      	adds	r3, #1
 8008020:	b2da      	uxtb	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800802e:	2b03      	cmp	r3, #3
 8008030:	d903      	bls.n	800803a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	220d      	movs	r2, #13
 8008036:	701a      	strb	r2, [r3, #0]
      break;
 8008038:	e0b8      	b.n	80081ac <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	795b      	ldrb	r3, [r3, #5]
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f001 f851 	bl	80090e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	791b      	ldrb	r3, [r3, #4]
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f001 f84b 	bl	80090e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	701a      	strb	r2, [r3, #0]
      break;
 800805e:	e0a5      	b.n	80081ac <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f969 	bl	8008340 <USBH_Get_CfgDesc>
 800806e:	4603      	mov	r3, r0
 8008070:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008072:	7bbb      	ldrb	r3, [r7, #14]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d103      	bne.n	8008080 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2205      	movs	r2, #5
 800807c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800807e:	e097      	b.n	80081b0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008080:	7bbb      	ldrb	r3, [r7, #14]
 8008082:	2b03      	cmp	r3, #3
 8008084:	f040 8094 	bne.w	80081b0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800808e:	3301      	adds	r3, #1
 8008090:	b2da      	uxtb	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d903      	bls.n	80080aa <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	220d      	movs	r2, #13
 80080a6:	701a      	strb	r2, [r3, #0]
      break;
 80080a8:	e082      	b.n	80081b0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	795b      	ldrb	r3, [r3, #5]
 80080ae:	4619      	mov	r1, r3
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f001 f819 	bl	80090e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	791b      	ldrb	r3, [r3, #4]
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f001 f813 	bl	80090e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	701a      	strb	r2, [r3, #0]
      break;
 80080ce:	e06f      	b.n	80081b0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d019      	beq.n	800810e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80080e6:	23ff      	movs	r3, #255	@ 0xff
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f953 	bl	8008394 <USBH_Get_StringDesc>
 80080ee:	4603      	mov	r3, r0
 80080f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80080f2:	7bbb      	ldrb	r3, [r7, #14]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d103      	bne.n	8008100 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2206      	movs	r2, #6
 80080fc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80080fe:	e059      	b.n	80081b4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008100:	7bbb      	ldrb	r3, [r7, #14]
 8008102:	2b03      	cmp	r3, #3
 8008104:	d156      	bne.n	80081b4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2206      	movs	r2, #6
 800810a:	705a      	strb	r2, [r3, #1]
      break;
 800810c:	e052      	b.n	80081b4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2206      	movs	r2, #6
 8008112:	705a      	strb	r2, [r3, #1]
      break;
 8008114:	e04e      	b.n	80081b4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800811c:	2b00      	cmp	r3, #0
 800811e:	d019      	beq.n	8008154 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800812c:	23ff      	movs	r3, #255	@ 0xff
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f930 	bl	8008394 <USBH_Get_StringDesc>
 8008134:	4603      	mov	r3, r0
 8008136:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d103      	bne.n	8008146 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2207      	movs	r2, #7
 8008142:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008144:	e038      	b.n	80081b8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	2b03      	cmp	r3, #3
 800814a:	d135      	bne.n	80081b8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2207      	movs	r2, #7
 8008150:	705a      	strb	r2, [r3, #1]
      break;
 8008152:	e031      	b.n	80081b8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2207      	movs	r2, #7
 8008158:	705a      	strb	r2, [r3, #1]
      break;
 800815a:	e02d      	b.n	80081b8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008162:	2b00      	cmp	r3, #0
 8008164:	d017      	beq.n	8008196 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008172:	23ff      	movs	r3, #255	@ 0xff
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f90d 	bl	8008394 <USBH_Get_StringDesc>
 800817a:	4603      	mov	r3, r0
 800817c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d102      	bne.n	800818a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008188:	e018      	b.n	80081bc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	2b03      	cmp	r3, #3
 800818e:	d115      	bne.n	80081bc <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	73fb      	strb	r3, [r7, #15]
      break;
 8008194:	e012      	b.n	80081bc <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	73fb      	strb	r3, [r7, #15]
      break;
 800819a:	e00f      	b.n	80081bc <USBH_HandleEnum+0x3b4>

    default:
      break;
 800819c:	bf00      	nop
 800819e:	e00e      	b.n	80081be <USBH_HandleEnum+0x3b6>
      break;
 80081a0:	bf00      	nop
 80081a2:	e00c      	b.n	80081be <USBH_HandleEnum+0x3b6>
      break;
 80081a4:	bf00      	nop
 80081a6:	e00a      	b.n	80081be <USBH_HandleEnum+0x3b6>
      break;
 80081a8:	bf00      	nop
 80081aa:	e008      	b.n	80081be <USBH_HandleEnum+0x3b6>
      break;
 80081ac:	bf00      	nop
 80081ae:	e006      	b.n	80081be <USBH_HandleEnum+0x3b6>
      break;
 80081b0:	bf00      	nop
 80081b2:	e004      	b.n	80081be <USBH_HandleEnum+0x3b6>
      break;
 80081b4:	bf00      	nop
 80081b6:	e002      	b.n	80081be <USBH_HandleEnum+0x3b6>
      break;
 80081b8:	bf00      	nop
 80081ba:	e000      	b.n	80081be <USBH_HandleEnum+0x3b6>
      break;
 80081bc:	bf00      	nop
  }
  return Status;
 80081be:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80081da:	bf00      	nop
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b082      	sub	sp, #8
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f804 	bl	800820a <USBH_HandleSof>
}
 8008202:	bf00      	nop
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b0b      	cmp	r3, #11
 800821a:	d10a      	bne.n	8008232 <USBH_HandleSof+0x28>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008222:	2b00      	cmp	r3, #0
 8008224:	d005      	beq.n	8008232 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
  }
}
 8008232:	bf00      	nop
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800824a:	bf00      	nop
}
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008256:	b480      	push	{r7}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008266:	bf00      	nop
}
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008272:	b480      	push	{r7}
 8008274:	b083      	sub	sp, #12
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f001 f8be 	bl	8009442 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	791b      	ldrb	r3, [r3, #4]
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 ff0b 	bl	80090e8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	795b      	ldrb	r3, [r3, #5]
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 ff05 	bl	80090e8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af02      	add	r7, sp, #8
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80082f4:	887b      	ldrh	r3, [r7, #2]
 80082f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082fa:	d901      	bls.n	8008300 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e01b      	b.n	8008338 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008306:	887b      	ldrh	r3, [r7, #2]
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	4613      	mov	r3, r2
 800830c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008310:	2100      	movs	r1, #0
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f872 	bl	80083fc <USBH_GetDescriptor>
 8008318:	4603      	mov	r3, r0
 800831a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800831c:	7bfb      	ldrb	r3, [r7, #15]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d109      	bne.n	8008336 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008328:	887a      	ldrh	r2, [r7, #2]
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f929 	bl	8008584 <USBH_ParseDevDesc>
 8008332:	4603      	mov	r3, r0
 8008334:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008336:	7bfb      	ldrb	r3, [r7, #15]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af02      	add	r7, sp, #8
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	460b      	mov	r3, r1
 800834a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	331c      	adds	r3, #28
 8008350:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008352:	887b      	ldrh	r3, [r7, #2]
 8008354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008358:	d901      	bls.n	800835e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800835a:	2303      	movs	r3, #3
 800835c:	e016      	b.n	800838c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800835e:	887b      	ldrh	r3, [r7, #2]
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008368:	2100      	movs	r1, #0
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f846 	bl	80083fc <USBH_GetDescriptor>
 8008370:	4603      	mov	r3, r0
 8008372:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d107      	bne.n	800838a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800837a:	887b      	ldrh	r3, [r7, #2]
 800837c:	461a      	mov	r2, r3
 800837e:	68b9      	ldr	r1, [r7, #8]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f9af 	bl	80086e4 <USBH_ParseCfgDesc>
 8008386:	4603      	mov	r3, r0
 8008388:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800838a:	7bfb      	ldrb	r3, [r7, #15]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b088      	sub	sp, #32
 8008398:	af02      	add	r7, sp, #8
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	607a      	str	r2, [r7, #4]
 800839e:	461a      	mov	r2, r3
 80083a0:	460b      	mov	r3, r1
 80083a2:	72fb      	strb	r3, [r7, #11]
 80083a4:	4613      	mov	r3, r2
 80083a6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80083a8:	893b      	ldrh	r3, [r7, #8]
 80083aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083ae:	d802      	bhi.n	80083b6 <USBH_Get_StringDesc+0x22>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e01c      	b.n	80083f4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80083ba:	7afb      	ldrb	r3, [r7, #11]
 80083bc:	b29b      	uxth	r3, r3
 80083be:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80083c2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80083ca:	893b      	ldrh	r3, [r7, #8]
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	460b      	mov	r3, r1
 80083d0:	2100      	movs	r1, #0
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f000 f812 	bl	80083fc <USBH_GetDescriptor>
 80083d8:	4603      	mov	r3, r0
 80083da:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d107      	bne.n	80083f2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80083e8:	893a      	ldrh	r2, [r7, #8]
 80083ea:	6879      	ldr	r1, [r7, #4]
 80083ec:	4618      	mov	r0, r3
 80083ee:	f000 fb8d 	bl	8008b0c <USBH_ParseStringDesc>
  }

  return status;
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3718      	adds	r7, #24
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	607b      	str	r3, [r7, #4]
 8008406:	460b      	mov	r3, r1
 8008408:	72fb      	strb	r3, [r7, #11]
 800840a:	4613      	mov	r3, r2
 800840c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	789b      	ldrb	r3, [r3, #2]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d11c      	bne.n	8008450 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008416:	7afb      	ldrb	r3, [r7, #11]
 8008418:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800841c:	b2da      	uxtb	r2, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2206      	movs	r2, #6
 8008426:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	893a      	ldrh	r2, [r7, #8]
 800842c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800842e:	893b      	ldrh	r3, [r7, #8]
 8008430:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008434:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008438:	d104      	bne.n	8008444 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f240 4209 	movw	r2, #1033	@ 0x409
 8008440:	829a      	strh	r2, [r3, #20]
 8008442:	e002      	b.n	800844a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	8b3a      	ldrh	r2, [r7, #24]
 800844e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008450:	8b3b      	ldrh	r3, [r7, #24]
 8008452:	461a      	mov	r2, r3
 8008454:	6879      	ldr	r1, [r7, #4]
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f000 fba5 	bl	8008ba6 <USBH_CtlReq>
 800845c:	4603      	mov	r3, r0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b082      	sub	sp, #8
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	460b      	mov	r3, r1
 8008470:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	789b      	ldrb	r3, [r3, #2]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d10f      	bne.n	800849a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2205      	movs	r2, #5
 8008484:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008486:	78fb      	ldrb	r3, [r7, #3]
 8008488:	b29a      	uxth	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800849a:	2200      	movs	r2, #0
 800849c:	2100      	movs	r1, #0
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fb81 	bl	8008ba6 <USBH_CtlReq>
 80084a4:	4603      	mov	r3, r0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b082      	sub	sp, #8
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	460b      	mov	r3, r1
 80084b8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	789b      	ldrb	r3, [r3, #2]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d10e      	bne.n	80084e0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2209      	movs	r2, #9
 80084cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	887a      	ldrh	r2, [r7, #2]
 80084d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80084e0:	2200      	movs	r2, #0
 80084e2:	2100      	movs	r1, #0
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fb5e 	bl	8008ba6 <USBH_CtlReq>
 80084ea:	4603      	mov	r3, r0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	789b      	ldrb	r3, [r3, #2]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d10f      	bne.n	8008528 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2203      	movs	r2, #3
 8008512:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008514:	78fb      	ldrb	r3, [r7, #3]
 8008516:	b29a      	uxth	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008528:	2200      	movs	r2, #0
 800852a:	2100      	movs	r1, #0
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fb3a 	bl	8008ba6 <USBH_CtlReq>
 8008532:	4603      	mov	r3, r0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	789b      	ldrb	r3, [r3, #2]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d10f      	bne.n	8008570 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2202      	movs	r2, #2
 8008554:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008562:	78fb      	ldrb	r3, [r7, #3]
 8008564:	b29a      	uxth	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008570:	2200      	movs	r2, #0
 8008572:	2100      	movs	r1, #0
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fb16 	bl	8008ba6 <USBH_CtlReq>
 800857a:	4603      	mov	r3, r0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008584:	b480      	push	{r7}
 8008586:	b087      	sub	sp, #28
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	4613      	mov	r3, r2
 8008590:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008598:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80085a4:	2302      	movs	r3, #2
 80085a6:	e094      	b.n	80086d2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	781a      	ldrb	r2, [r3, #0]
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	785a      	ldrb	r2, [r3, #1]
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	3302      	adds	r3, #2
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	461a      	mov	r2, r3
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	3303      	adds	r3, #3
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	021b      	lsls	r3, r3, #8
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	4313      	orrs	r3, r2
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	791a      	ldrb	r2, [r3, #4]
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	795a      	ldrb	r2, [r3, #5]
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	799a      	ldrb	r2, [r3, #6]
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	79da      	ldrb	r2, [r3, #7]
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d004      	beq.n	8008606 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008602:	2b01      	cmp	r3, #1
 8008604:	d11b      	bne.n	800863e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	79db      	ldrb	r3, [r3, #7]
 800860a:	2b20      	cmp	r3, #32
 800860c:	dc0f      	bgt.n	800862e <USBH_ParseDevDesc+0xaa>
 800860e:	2b08      	cmp	r3, #8
 8008610:	db0f      	blt.n	8008632 <USBH_ParseDevDesc+0xae>
 8008612:	3b08      	subs	r3, #8
 8008614:	4a32      	ldr	r2, [pc, #200]	@ (80086e0 <USBH_ParseDevDesc+0x15c>)
 8008616:	fa22 f303 	lsr.w	r3, r2, r3
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	bf14      	ite	ne
 8008622:	2301      	movne	r3, #1
 8008624:	2300      	moveq	r3, #0
 8008626:	b2db      	uxtb	r3, r3
 8008628:	2b00      	cmp	r3, #0
 800862a:	d106      	bne.n	800863a <USBH_ParseDevDesc+0xb6>
 800862c:	e001      	b.n	8008632 <USBH_ParseDevDesc+0xae>
 800862e:	2b40      	cmp	r3, #64	@ 0x40
 8008630:	d003      	beq.n	800863a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	2208      	movs	r2, #8
 8008636:	71da      	strb	r2, [r3, #7]
        break;
 8008638:	e000      	b.n	800863c <USBH_ParseDevDesc+0xb8>
        break;
 800863a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800863c:	e00e      	b.n	800865c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008644:	2b02      	cmp	r3, #2
 8008646:	d107      	bne.n	8008658 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	79db      	ldrb	r3, [r3, #7]
 800864c:	2b08      	cmp	r3, #8
 800864e:	d005      	beq.n	800865c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	2208      	movs	r2, #8
 8008654:	71da      	strb	r2, [r3, #7]
 8008656:	e001      	b.n	800865c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008658:	2303      	movs	r3, #3
 800865a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800865c:	88fb      	ldrh	r3, [r7, #6]
 800865e:	2b08      	cmp	r3, #8
 8008660:	d936      	bls.n	80086d0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	3308      	adds	r3, #8
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	461a      	mov	r2, r3
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	3309      	adds	r3, #9
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	021b      	lsls	r3, r3, #8
 8008672:	b29b      	uxth	r3, r3
 8008674:	4313      	orrs	r3, r2
 8008676:	b29a      	uxth	r2, r3
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	330a      	adds	r3, #10
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	461a      	mov	r2, r3
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	330b      	adds	r3, #11
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	021b      	lsls	r3, r3, #8
 800868c:	b29b      	uxth	r3, r3
 800868e:	4313      	orrs	r3, r2
 8008690:	b29a      	uxth	r2, r3
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	330c      	adds	r3, #12
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	461a      	mov	r2, r3
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	330d      	adds	r3, #13
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	021b      	lsls	r3, r3, #8
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	4313      	orrs	r3, r2
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	7b9a      	ldrb	r2, [r3, #14]
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	7bda      	ldrb	r2, [r3, #15]
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	7c1a      	ldrb	r2, [r3, #16]
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	7c5a      	ldrb	r2, [r3, #17]
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80086d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	371c      	adds	r7, #28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	01000101 	.word	0x01000101

080086e4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b08c      	sub	sp, #48	@ 0x30
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	4613      	mov	r3, r2
 80086f0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80086f8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008700:	2300      	movs	r3, #0
 8008702:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008706:	2300      	movs	r3, #0
 8008708:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008712:	2302      	movs	r3, #2
 8008714:	e0da      	b.n	80088cc <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	781a      	ldrb	r2, [r3, #0]
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	785a      	ldrb	r2, [r3, #1]
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	3302      	adds	r3, #2
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	461a      	mov	r2, r3
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	3303      	adds	r3, #3
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	021b      	lsls	r3, r3, #8
 800873a:	b29b      	uxth	r3, r3
 800873c:	4313      	orrs	r3, r2
 800873e:	b29b      	uxth	r3, r3
 8008740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008744:	bf28      	it	cs
 8008746:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800874a:	b29a      	uxth	r2, r3
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	791a      	ldrb	r2, [r3, #4]
 8008754:	6a3b      	ldr	r3, [r7, #32]
 8008756:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	795a      	ldrb	r2, [r3, #5]
 800875c:	6a3b      	ldr	r3, [r7, #32]
 800875e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	799a      	ldrb	r2, [r3, #6]
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	79da      	ldrb	r2, [r3, #7]
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	7a1a      	ldrb	r2, [r3, #8]
 8008774:	6a3b      	ldr	r3, [r7, #32]
 8008776:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	2b09      	cmp	r3, #9
 800877e:	d002      	beq.n	8008786 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008780:	6a3b      	ldr	r3, [r7, #32]
 8008782:	2209      	movs	r2, #9
 8008784:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008786:	88fb      	ldrh	r3, [r7, #6]
 8008788:	2b09      	cmp	r3, #9
 800878a:	f240 809d 	bls.w	80088c8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800878e:	2309      	movs	r3, #9
 8008790:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008792:	2300      	movs	r3, #0
 8008794:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008796:	e081      	b.n	800889c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008798:	f107 0316 	add.w	r3, r7, #22
 800879c:	4619      	mov	r1, r3
 800879e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087a0:	f000 f9e7 	bl	8008b72 <USBH_GetNextDesc>
 80087a4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80087a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a8:	785b      	ldrb	r3, [r3, #1]
 80087aa:	2b04      	cmp	r3, #4
 80087ac:	d176      	bne.n	800889c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80087ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	2b09      	cmp	r3, #9
 80087b4:	d002      	beq.n	80087bc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80087b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b8:	2209      	movs	r2, #9
 80087ba:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80087bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087c0:	221a      	movs	r2, #26
 80087c2:	fb02 f303 	mul.w	r3, r2, r3
 80087c6:	3308      	adds	r3, #8
 80087c8:	6a3a      	ldr	r2, [r7, #32]
 80087ca:	4413      	add	r3, r2
 80087cc:	3302      	adds	r3, #2
 80087ce:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80087d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087d2:	69f8      	ldr	r0, [r7, #28]
 80087d4:	f000 f87e 	bl	80088d4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80087d8:	2300      	movs	r3, #0
 80087da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80087de:	2300      	movs	r3, #0
 80087e0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80087e2:	e043      	b.n	800886c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80087e4:	f107 0316 	add.w	r3, r7, #22
 80087e8:	4619      	mov	r1, r3
 80087ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087ec:	f000 f9c1 	bl	8008b72 <USBH_GetNextDesc>
 80087f0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80087f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f4:	785b      	ldrb	r3, [r3, #1]
 80087f6:	2b05      	cmp	r3, #5
 80087f8:	d138      	bne.n	800886c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	795b      	ldrb	r3, [r3, #5]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d113      	bne.n	800882a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008806:	2b02      	cmp	r3, #2
 8008808:	d003      	beq.n	8008812 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	799b      	ldrb	r3, [r3, #6]
 800880e:	2b03      	cmp	r3, #3
 8008810:	d10b      	bne.n	800882a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	79db      	ldrb	r3, [r3, #7]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10b      	bne.n	8008832 <USBH_ParseCfgDesc+0x14e>
 800881a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	2b09      	cmp	r3, #9
 8008820:	d007      	beq.n	8008832 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008824:	2209      	movs	r2, #9
 8008826:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008828:	e003      	b.n	8008832 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800882a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800882c:	2207      	movs	r2, #7
 800882e:	701a      	strb	r2, [r3, #0]
 8008830:	e000      	b.n	8008834 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008832:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008838:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800883c:	3201      	adds	r2, #1
 800883e:	00d2      	lsls	r2, r2, #3
 8008840:	211a      	movs	r1, #26
 8008842:	fb01 f303 	mul.w	r3, r1, r3
 8008846:	4413      	add	r3, r2
 8008848:	3308      	adds	r3, #8
 800884a:	6a3a      	ldr	r2, [r7, #32]
 800884c:	4413      	add	r3, r2
 800884e:	3304      	adds	r3, #4
 8008850:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008852:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008854:	69b9      	ldr	r1, [r7, #24]
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f000 f870 	bl	800893c <USBH_ParseEPDesc>
 800885c:	4603      	mov	r3, r0
 800885e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008862:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008866:	3301      	adds	r3, #1
 8008868:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	791b      	ldrb	r3, [r3, #4]
 8008870:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008874:	429a      	cmp	r2, r3
 8008876:	d204      	bcs.n	8008882 <USBH_ParseCfgDesc+0x19e>
 8008878:	6a3b      	ldr	r3, [r7, #32]
 800887a:	885a      	ldrh	r2, [r3, #2]
 800887c:	8afb      	ldrh	r3, [r7, #22]
 800887e:	429a      	cmp	r2, r3
 8008880:	d8b0      	bhi.n	80087e4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	791b      	ldrb	r3, [r3, #4]
 8008886:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800888a:	429a      	cmp	r2, r3
 800888c:	d201      	bcs.n	8008892 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800888e:	2303      	movs	r3, #3
 8008890:	e01c      	b.n	80088cc <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008892:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008896:	3301      	adds	r3, #1
 8008898:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800889c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d805      	bhi.n	80088b0 <USBH_ParseCfgDesc+0x1cc>
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	885a      	ldrh	r2, [r3, #2]
 80088a8:	8afb      	ldrh	r3, [r7, #22]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	f63f af74 	bhi.w	8008798 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	791b      	ldrb	r3, [r3, #4]
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	bf28      	it	cs
 80088b8:	2302      	movcs	r3, #2
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d201      	bcs.n	80088c8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e001      	b.n	80088cc <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80088c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3730      	adds	r7, #48	@ 0x30
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	781a      	ldrb	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	785a      	ldrb	r2, [r3, #1]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	789a      	ldrb	r2, [r3, #2]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	78da      	ldrb	r2, [r3, #3]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	3304      	adds	r3, #4
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	2b02      	cmp	r3, #2
 8008906:	bf28      	it	cs
 8008908:	2302      	movcs	r3, #2
 800890a:	b2da      	uxtb	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	795a      	ldrb	r2, [r3, #5]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	799a      	ldrb	r2, [r3, #6]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	79da      	ldrb	r2, [r3, #7]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	7a1a      	ldrb	r2, [r3, #8]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	721a      	strb	r2, [r3, #8]
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800893c:	b480      	push	{r7}
 800893e:	b087      	sub	sp, #28
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	781a      	ldrb	r2, [r3, #0]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	785a      	ldrb	r2, [r3, #1]
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	789a      	ldrb	r2, [r3, #2]
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	78da      	ldrb	r2, [r3, #3]
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	3304      	adds	r3, #4
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	461a      	mov	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	3305      	adds	r3, #5
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	021b      	lsls	r3, r3, #8
 800897c:	b29b      	uxth	r3, r3
 800897e:	4313      	orrs	r3, r2
 8008980:	b29a      	uxth	r2, r3
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	799a      	ldrb	r2, [r3, #6]
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	889b      	ldrh	r3, [r3, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d009      	beq.n	80089aa <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800899a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800899e:	d804      	bhi.n	80089aa <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80089a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089a8:	d901      	bls.n	80089ae <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80089aa:	2303      	movs	r3, #3
 80089ac:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d136      	bne.n	8008a26 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	78db      	ldrb	r3, [r3, #3]
 80089bc:	f003 0303 	and.w	r3, r3, #3
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d108      	bne.n	80089d6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	889b      	ldrh	r3, [r3, #4]
 80089c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089cc:	f240 8097 	bls.w	8008afe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80089d0:	2303      	movs	r3, #3
 80089d2:	75fb      	strb	r3, [r7, #23]
 80089d4:	e093      	b.n	8008afe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	78db      	ldrb	r3, [r3, #3]
 80089da:	f003 0303 	and.w	r3, r3, #3
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d107      	bne.n	80089f2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	889b      	ldrh	r3, [r3, #4]
 80089e6:	2b40      	cmp	r3, #64	@ 0x40
 80089e8:	f240 8089 	bls.w	8008afe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80089ec:	2303      	movs	r3, #3
 80089ee:	75fb      	strb	r3, [r7, #23]
 80089f0:	e085      	b.n	8008afe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	78db      	ldrb	r3, [r3, #3]
 80089f6:	f003 0303 	and.w	r3, r3, #3
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d005      	beq.n	8008a0a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	78db      	ldrb	r3, [r3, #3]
 8008a02:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008a06:	2b03      	cmp	r3, #3
 8008a08:	d10a      	bne.n	8008a20 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	799b      	ldrb	r3, [r3, #6]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <USBH_ParseEPDesc+0xde>
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	799b      	ldrb	r3, [r3, #6]
 8008a16:	2b10      	cmp	r3, #16
 8008a18:	d970      	bls.n	8008afc <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008a1e:	e06d      	b.n	8008afc <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008a20:	2303      	movs	r3, #3
 8008a22:	75fb      	strb	r3, [r7, #23]
 8008a24:	e06b      	b.n	8008afe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d13c      	bne.n	8008aaa <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	78db      	ldrb	r3, [r3, #3]
 8008a34:	f003 0303 	and.w	r3, r3, #3
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d005      	beq.n	8008a48 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	78db      	ldrb	r3, [r3, #3]
 8008a40:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d106      	bne.n	8008a56 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	889b      	ldrh	r3, [r3, #4]
 8008a4c:	2b40      	cmp	r3, #64	@ 0x40
 8008a4e:	d956      	bls.n	8008afe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008a50:	2303      	movs	r3, #3
 8008a52:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008a54:	e053      	b.n	8008afe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	78db      	ldrb	r3, [r3, #3]
 8008a5a:	f003 0303 	and.w	r3, r3, #3
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d10e      	bne.n	8008a80 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	799b      	ldrb	r3, [r3, #6]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d007      	beq.n	8008a7a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008a6e:	2b10      	cmp	r3, #16
 8008a70:	d803      	bhi.n	8008a7a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008a76:	2b40      	cmp	r3, #64	@ 0x40
 8008a78:	d941      	bls.n	8008afe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	75fb      	strb	r3, [r7, #23]
 8008a7e:	e03e      	b.n	8008afe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	78db      	ldrb	r3, [r3, #3]
 8008a84:	f003 0303 	and.w	r3, r3, #3
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d10b      	bne.n	8008aa4 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	799b      	ldrb	r3, [r3, #6]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d004      	beq.n	8008a9e <USBH_ParseEPDesc+0x162>
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	889b      	ldrh	r3, [r3, #4]
 8008a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a9c:	d32f      	bcc.n	8008afe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	75fb      	strb	r3, [r7, #23]
 8008aa2:	e02c      	b.n	8008afe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	75fb      	strb	r3, [r7, #23]
 8008aa8:	e029      	b.n	8008afe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d120      	bne.n	8008af6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	78db      	ldrb	r3, [r3, #3]
 8008ab8:	f003 0303 	and.w	r3, r3, #3
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d106      	bne.n	8008ace <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	889b      	ldrh	r3, [r3, #4]
 8008ac4:	2b08      	cmp	r3, #8
 8008ac6:	d01a      	beq.n	8008afe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	75fb      	strb	r3, [r7, #23]
 8008acc:	e017      	b.n	8008afe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	78db      	ldrb	r3, [r3, #3]
 8008ad2:	f003 0303 	and.w	r3, r3, #3
 8008ad6:	2b03      	cmp	r3, #3
 8008ad8:	d10a      	bne.n	8008af0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	799b      	ldrb	r3, [r3, #6]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d003      	beq.n	8008aea <USBH_ParseEPDesc+0x1ae>
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	889b      	ldrh	r3, [r3, #4]
 8008ae6:	2b08      	cmp	r3, #8
 8008ae8:	d909      	bls.n	8008afe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008aea:	2303      	movs	r3, #3
 8008aec:	75fb      	strb	r3, [r7, #23]
 8008aee:	e006      	b.n	8008afe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008af0:	2303      	movs	r3, #3
 8008af2:	75fb      	strb	r3, [r7, #23]
 8008af4:	e003      	b.n	8008afe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008af6:	2303      	movs	r3, #3
 8008af8:	75fb      	strb	r3, [r7, #23]
 8008afa:	e000      	b.n	8008afe <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008afc:	bf00      	nop
  }

  return status;
 8008afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	371c      	adds	r7, #28
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b087      	sub	sp, #28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	4613      	mov	r3, r2
 8008b18:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2b03      	cmp	r3, #3
 8008b22:	d120      	bne.n	8008b66 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	1e9a      	subs	r2, r3, #2
 8008b2a:	88fb      	ldrh	r3, [r7, #6]
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	bf28      	it	cs
 8008b30:	4613      	movcs	r3, r2
 8008b32:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	3302      	adds	r3, #2
 8008b38:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	82fb      	strh	r3, [r7, #22]
 8008b3e:	e00b      	b.n	8008b58 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008b40:	8afb      	ldrh	r3, [r7, #22]
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	4413      	add	r3, r2
 8008b46:	781a      	ldrb	r2, [r3, #0]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008b52:	8afb      	ldrh	r3, [r7, #22]
 8008b54:	3302      	adds	r3, #2
 8008b56:	82fb      	strh	r3, [r7, #22]
 8008b58:	8afa      	ldrh	r2, [r7, #22]
 8008b5a:	8abb      	ldrh	r3, [r7, #20]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d3ef      	bcc.n	8008b40 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2200      	movs	r2, #0
 8008b64:	701a      	strb	r2, [r3, #0]
  }
}
 8008b66:	bf00      	nop
 8008b68:	371c      	adds	r7, #28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b085      	sub	sp, #20
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	881b      	ldrh	r3, [r3, #0]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	7812      	ldrb	r2, [r2, #0]
 8008b84:	4413      	add	r3, r2
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4413      	add	r3, r2
 8008b96:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008b98:	68fb      	ldr	r3, [r7, #12]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3714      	adds	r7, #20
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b086      	sub	sp, #24
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	60f8      	str	r0, [r7, #12]
 8008bae:	60b9      	str	r1, [r7, #8]
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	789b      	ldrb	r3, [r3, #2]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d002      	beq.n	8008bc6 <USBH_CtlReq+0x20>
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d00f      	beq.n	8008be4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008bc4:	e027      	b.n	8008c16 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	88fa      	ldrh	r2, [r7, #6]
 8008bd0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008bde:	2301      	movs	r3, #1
 8008be0:	75fb      	strb	r3, [r7, #23]
      break;
 8008be2:	e018      	b.n	8008c16 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f000 f81b 	bl	8008c20 <USBH_HandleControl>
 8008bea:	4603      	mov	r3, r0
 8008bec:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008bee:	7dfb      	ldrb	r3, [r7, #23]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <USBH_CtlReq+0x54>
 8008bf4:	7dfb      	ldrb	r3, [r7, #23]
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	d106      	bne.n	8008c08 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	761a      	strb	r2, [r3, #24]
      break;
 8008c06:	e005      	b.n	8008c14 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d102      	bne.n	8008c14 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2201      	movs	r2, #1
 8008c12:	709a      	strb	r2, [r3, #2]
      break;
 8008c14:	bf00      	nop
  }
  return status;
 8008c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af02      	add	r7, sp, #8
 8008c26:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	7e1b      	ldrb	r3, [r3, #24]
 8008c34:	3b01      	subs	r3, #1
 8008c36:	2b0a      	cmp	r3, #10
 8008c38:	f200 8156 	bhi.w	8008ee8 <USBH_HandleControl+0x2c8>
 8008c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c44 <USBH_HandleControl+0x24>)
 8008c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c42:	bf00      	nop
 8008c44:	08008c71 	.word	0x08008c71
 8008c48:	08008c8b 	.word	0x08008c8b
 8008c4c:	08008cf5 	.word	0x08008cf5
 8008c50:	08008d1b 	.word	0x08008d1b
 8008c54:	08008d53 	.word	0x08008d53
 8008c58:	08008d7d 	.word	0x08008d7d
 8008c5c:	08008dcf 	.word	0x08008dcf
 8008c60:	08008df1 	.word	0x08008df1
 8008c64:	08008e2d 	.word	0x08008e2d
 8008c68:	08008e53 	.word	0x08008e53
 8008c6c:	08008e91 	.word	0x08008e91
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f103 0110 	add.w	r1, r3, #16
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	795b      	ldrb	r3, [r3, #5]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f943 	bl	8008f08 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2202      	movs	r2, #2
 8008c86:	761a      	strb	r2, [r3, #24]
      break;
 8008c88:	e139      	b.n	8008efe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	795b      	ldrb	r3, [r3, #5]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fcc5 	bl	8009620 <USBH_LL_GetURBState>
 8008c96:	4603      	mov	r3, r0
 8008c98:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d11e      	bne.n	8008cde <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	7c1b      	ldrb	r3, [r3, #16]
 8008ca4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008ca8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	8adb      	ldrh	r3, [r3, #22]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00a      	beq.n	8008cc8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008cb2:	7b7b      	ldrb	r3, [r7, #13]
 8008cb4:	2b80      	cmp	r3, #128	@ 0x80
 8008cb6:	d103      	bne.n	8008cc0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2203      	movs	r2, #3
 8008cbc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008cbe:	e115      	b.n	8008eec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2205      	movs	r2, #5
 8008cc4:	761a      	strb	r2, [r3, #24]
      break;
 8008cc6:	e111      	b.n	8008eec <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008cc8:	7b7b      	ldrb	r3, [r7, #13]
 8008cca:	2b80      	cmp	r3, #128	@ 0x80
 8008ccc:	d103      	bne.n	8008cd6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2209      	movs	r2, #9
 8008cd2:	761a      	strb	r2, [r3, #24]
      break;
 8008cd4:	e10a      	b.n	8008eec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2207      	movs	r2, #7
 8008cda:	761a      	strb	r2, [r3, #24]
      break;
 8008cdc:	e106      	b.n	8008eec <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008cde:	7bbb      	ldrb	r3, [r7, #14]
 8008ce0:	2b04      	cmp	r3, #4
 8008ce2:	d003      	beq.n	8008cec <USBH_HandleControl+0xcc>
 8008ce4:	7bbb      	ldrb	r3, [r7, #14]
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	f040 8100 	bne.w	8008eec <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	220b      	movs	r2, #11
 8008cf0:	761a      	strb	r2, [r3, #24]
      break;
 8008cf2:	e0fb      	b.n	8008eec <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6899      	ldr	r1, [r3, #8]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	899a      	ldrh	r2, [r3, #12]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	791b      	ldrb	r3, [r3, #4]
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f93a 	bl	8008f86 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2204      	movs	r2, #4
 8008d16:	761a      	strb	r2, [r3, #24]
      break;
 8008d18:	e0f1      	b.n	8008efe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	791b      	ldrb	r3, [r3, #4]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 fc7d 	bl	8009620 <USBH_LL_GetURBState>
 8008d26:	4603      	mov	r3, r0
 8008d28:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d102      	bne.n	8008d36 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2209      	movs	r2, #9
 8008d34:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008d36:	7bbb      	ldrb	r3, [r7, #14]
 8008d38:	2b05      	cmp	r3, #5
 8008d3a:	d102      	bne.n	8008d42 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d40:	e0d6      	b.n	8008ef0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008d42:	7bbb      	ldrb	r3, [r7, #14]
 8008d44:	2b04      	cmp	r3, #4
 8008d46:	f040 80d3 	bne.w	8008ef0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	220b      	movs	r2, #11
 8008d4e:	761a      	strb	r2, [r3, #24]
      break;
 8008d50:	e0ce      	b.n	8008ef0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6899      	ldr	r1, [r3, #8]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	899a      	ldrh	r2, [r3, #12]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	795b      	ldrb	r3, [r3, #5]
 8008d5e:	2001      	movs	r0, #1
 8008d60:	9000      	str	r0, [sp, #0]
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f8ea 	bl	8008f3c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008d6e:	b29a      	uxth	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2206      	movs	r2, #6
 8008d78:	761a      	strb	r2, [r3, #24]
      break;
 8008d7a:	e0c0      	b.n	8008efe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	795b      	ldrb	r3, [r3, #5]
 8008d80:	4619      	mov	r1, r3
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fc4c 	bl	8009620 <USBH_LL_GetURBState>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008d8c:	7bbb      	ldrb	r3, [r7, #14]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d103      	bne.n	8008d9a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2207      	movs	r2, #7
 8008d96:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d98:	e0ac      	b.n	8008ef4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
 8008d9c:	2b05      	cmp	r3, #5
 8008d9e:	d105      	bne.n	8008dac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	220c      	movs	r2, #12
 8008da4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008da6:	2303      	movs	r3, #3
 8008da8:	73fb      	strb	r3, [r7, #15]
      break;
 8008daa:	e0a3      	b.n	8008ef4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008dac:	7bbb      	ldrb	r3, [r7, #14]
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d103      	bne.n	8008dba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2205      	movs	r2, #5
 8008db6:	761a      	strb	r2, [r3, #24]
      break;
 8008db8:	e09c      	b.n	8008ef4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	2b04      	cmp	r3, #4
 8008dbe:	f040 8099 	bne.w	8008ef4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	220b      	movs	r2, #11
 8008dc6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008dc8:	2302      	movs	r3, #2
 8008dca:	73fb      	strb	r3, [r7, #15]
      break;
 8008dcc:	e092      	b.n	8008ef4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	791b      	ldrb	r3, [r3, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f8d5 	bl	8008f86 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2208      	movs	r2, #8
 8008dec:	761a      	strb	r2, [r3, #24]

      break;
 8008dee:	e086      	b.n	8008efe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	791b      	ldrb	r3, [r3, #4]
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fc12 	bl	8009620 <USBH_LL_GetURBState>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008e00:	7bbb      	ldrb	r3, [r7, #14]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d105      	bne.n	8008e12 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	220d      	movs	r2, #13
 8008e0a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e10:	e072      	b.n	8008ef8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008e12:	7bbb      	ldrb	r3, [r7, #14]
 8008e14:	2b04      	cmp	r3, #4
 8008e16:	d103      	bne.n	8008e20 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	220b      	movs	r2, #11
 8008e1c:	761a      	strb	r2, [r3, #24]
      break;
 8008e1e:	e06b      	b.n	8008ef8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008e20:	7bbb      	ldrb	r3, [r7, #14]
 8008e22:	2b05      	cmp	r3, #5
 8008e24:	d168      	bne.n	8008ef8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008e26:	2303      	movs	r3, #3
 8008e28:	73fb      	strb	r3, [r7, #15]
      break;
 8008e2a:	e065      	b.n	8008ef8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	795b      	ldrb	r3, [r3, #5]
 8008e30:	2201      	movs	r2, #1
 8008e32:	9200      	str	r2, [sp, #0]
 8008e34:	2200      	movs	r2, #0
 8008e36:	2100      	movs	r1, #0
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f87f 	bl	8008f3c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	220a      	movs	r2, #10
 8008e4e:	761a      	strb	r2, [r3, #24]
      break;
 8008e50:	e055      	b.n	8008efe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	795b      	ldrb	r3, [r3, #5]
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fbe1 	bl	8009620 <USBH_LL_GetURBState>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008e62:	7bbb      	ldrb	r3, [r7, #14]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d105      	bne.n	8008e74 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	220d      	movs	r2, #13
 8008e70:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e72:	e043      	b.n	8008efc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008e74:	7bbb      	ldrb	r3, [r7, #14]
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d103      	bne.n	8008e82 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2209      	movs	r2, #9
 8008e7e:	761a      	strb	r2, [r3, #24]
      break;
 8008e80:	e03c      	b.n	8008efc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
 8008e84:	2b04      	cmp	r3, #4
 8008e86:	d139      	bne.n	8008efc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	220b      	movs	r2, #11
 8008e8c:	761a      	strb	r2, [r3, #24]
      break;
 8008e8e:	e035      	b.n	8008efc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	7e5b      	ldrb	r3, [r3, #25]
 8008e94:	3301      	adds	r3, #1
 8008e96:	b2da      	uxtb	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	765a      	strb	r2, [r3, #25]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	7e5b      	ldrb	r3, [r3, #25]
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d806      	bhi.n	8008eb2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008eb0:	e025      	b.n	8008efe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008eb8:	2106      	movs	r1, #6
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	795b      	ldrb	r3, [r3, #5]
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f90c 	bl	80090e8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	791b      	ldrb	r3, [r3, #4]
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f906 	bl	80090e8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008ee2:	2302      	movs	r3, #2
 8008ee4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ee6:	e00a      	b.n	8008efe <USBH_HandleControl+0x2de>

    default:
      break;
 8008ee8:	bf00      	nop
 8008eea:	e008      	b.n	8008efe <USBH_HandleControl+0x2de>
      break;
 8008eec:	bf00      	nop
 8008eee:	e006      	b.n	8008efe <USBH_HandleControl+0x2de>
      break;
 8008ef0:	bf00      	nop
 8008ef2:	e004      	b.n	8008efe <USBH_HandleControl+0x2de>
      break;
 8008ef4:	bf00      	nop
 8008ef6:	e002      	b.n	8008efe <USBH_HandleControl+0x2de>
      break;
 8008ef8:	bf00      	nop
 8008efa:	e000      	b.n	8008efe <USBH_HandleControl+0x2de>
      break;
 8008efc:	bf00      	nop
  }

  return status;
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b088      	sub	sp, #32
 8008f0c:	af04      	add	r7, sp, #16
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	4613      	mov	r3, r2
 8008f14:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f16:	79f9      	ldrb	r1, [r7, #7]
 8008f18:	2300      	movs	r3, #0
 8008f1a:	9303      	str	r3, [sp, #12]
 8008f1c:	2308      	movs	r3, #8
 8008f1e:	9302      	str	r3, [sp, #8]
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	9301      	str	r3, [sp, #4]
 8008f24:	2300      	movs	r3, #0
 8008f26:	9300      	str	r3, [sp, #0]
 8008f28:	2300      	movs	r3, #0
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f000 fb46 	bl	80095be <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b088      	sub	sp, #32
 8008f40:	af04      	add	r7, sp, #16
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	4611      	mov	r1, r2
 8008f48:	461a      	mov	r2, r3
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	80fb      	strh	r3, [r7, #6]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d001      	beq.n	8008f60 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f60:	7979      	ldrb	r1, [r7, #5]
 8008f62:	7e3b      	ldrb	r3, [r7, #24]
 8008f64:	9303      	str	r3, [sp, #12]
 8008f66:	88fb      	ldrh	r3, [r7, #6]
 8008f68:	9302      	str	r3, [sp, #8]
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	9301      	str	r3, [sp, #4]
 8008f6e:	2301      	movs	r3, #1
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	2300      	movs	r3, #0
 8008f74:	2200      	movs	r2, #0
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f000 fb21 	bl	80095be <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b088      	sub	sp, #32
 8008f8a:	af04      	add	r7, sp, #16
 8008f8c:	60f8      	str	r0, [r7, #12]
 8008f8e:	60b9      	str	r1, [r7, #8]
 8008f90:	4611      	mov	r1, r2
 8008f92:	461a      	mov	r2, r3
 8008f94:	460b      	mov	r3, r1
 8008f96:	80fb      	strh	r3, [r7, #6]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f9c:	7979      	ldrb	r1, [r7, #5]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	9303      	str	r3, [sp, #12]
 8008fa2:	88fb      	ldrh	r3, [r7, #6]
 8008fa4:	9302      	str	r3, [sp, #8]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	2301      	movs	r3, #1
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	2300      	movs	r3, #0
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f000 fb03 	bl	80095be <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008fb8:	2300      	movs	r3, #0

}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b088      	sub	sp, #32
 8008fc6:	af04      	add	r7, sp, #16
 8008fc8:	60f8      	str	r0, [r7, #12]
 8008fca:	60b9      	str	r1, [r7, #8]
 8008fcc:	4611      	mov	r1, r2
 8008fce:	461a      	mov	r2, r3
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	80fb      	strh	r3, [r7, #6]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d001      	beq.n	8008fe6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008fe6:	7979      	ldrb	r1, [r7, #5]
 8008fe8:	7e3b      	ldrb	r3, [r7, #24]
 8008fea:	9303      	str	r3, [sp, #12]
 8008fec:	88fb      	ldrh	r3, [r7, #6]
 8008fee:	9302      	str	r3, [sp, #8]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	9301      	str	r3, [sp, #4]
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f000 fade 	bl	80095be <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b088      	sub	sp, #32
 8009010:	af04      	add	r7, sp, #16
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	4611      	mov	r1, r2
 8009018:	461a      	mov	r2, r3
 800901a:	460b      	mov	r3, r1
 800901c:	80fb      	strh	r3, [r7, #6]
 800901e:	4613      	mov	r3, r2
 8009020:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009022:	7979      	ldrb	r1, [r7, #5]
 8009024:	2300      	movs	r3, #0
 8009026:	9303      	str	r3, [sp, #12]
 8009028:	88fb      	ldrh	r3, [r7, #6]
 800902a:	9302      	str	r3, [sp, #8]
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	9301      	str	r3, [sp, #4]
 8009030:	2301      	movs	r3, #1
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	2302      	movs	r3, #2
 8009036:	2201      	movs	r2, #1
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f000 fac0 	bl	80095be <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af04      	add	r7, sp, #16
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	4608      	mov	r0, r1
 8009052:	4611      	mov	r1, r2
 8009054:	461a      	mov	r2, r3
 8009056:	4603      	mov	r3, r0
 8009058:	70fb      	strb	r3, [r7, #3]
 800905a:	460b      	mov	r3, r1
 800905c:	70bb      	strb	r3, [r7, #2]
 800905e:	4613      	mov	r3, r2
 8009060:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009062:	7878      	ldrb	r0, [r7, #1]
 8009064:	78ba      	ldrb	r2, [r7, #2]
 8009066:	78f9      	ldrb	r1, [r7, #3]
 8009068:	8b3b      	ldrh	r3, [r7, #24]
 800906a:	9302      	str	r3, [sp, #8]
 800906c:	7d3b      	ldrb	r3, [r7, #20]
 800906e:	9301      	str	r3, [sp, #4]
 8009070:	7c3b      	ldrb	r3, [r7, #16]
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	4603      	mov	r3, r0
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fa53 	bl	8009522 <USBH_LL_OpenPipe>

  return USBH_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b082      	sub	sp, #8
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	460b      	mov	r3, r1
 8009090:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009092:	78fb      	ldrb	r3, [r7, #3]
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fa72 	bl	8009580 <USBH_LL_ClosePipe>

  return USBH_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b084      	sub	sp, #16
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	460b      	mov	r3, r1
 80090b0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f836 	bl	8009124 <USBH_GetFreePipe>
 80090b8:	4603      	mov	r3, r0
 80090ba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80090bc:	89fb      	ldrh	r3, [r7, #14]
 80090be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d00a      	beq.n	80090dc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80090c6:	78fa      	ldrb	r2, [r7, #3]
 80090c8:	89fb      	ldrh	r3, [r7, #14]
 80090ca:	f003 030f 	and.w	r3, r3, #15
 80090ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80090d2:	6879      	ldr	r1, [r7, #4]
 80090d4:	33e0      	adds	r3, #224	@ 0xe0
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	440b      	add	r3, r1
 80090da:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80090dc:	89fb      	ldrh	r3, [r7, #14]
 80090de:	b2db      	uxtb	r3, r3
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80090f4:	78fb      	ldrb	r3, [r7, #3]
 80090f6:	2b0f      	cmp	r3, #15
 80090f8:	d80d      	bhi.n	8009116 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80090fa:	78fb      	ldrb	r3, [r7, #3]
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	33e0      	adds	r3, #224	@ 0xe0
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	4413      	add	r3, r2
 8009104:	685a      	ldr	r2, [r3, #4]
 8009106:	78fb      	ldrb	r3, [r7, #3]
 8009108:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800910c:	6879      	ldr	r1, [r7, #4]
 800910e:	33e0      	adds	r3, #224	@ 0xe0
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	440b      	add	r3, r1
 8009114:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800912c:	2300      	movs	r3, #0
 800912e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009130:	2300      	movs	r3, #0
 8009132:	73fb      	strb	r3, [r7, #15]
 8009134:	e00f      	b.n	8009156 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009136:	7bfb      	ldrb	r3, [r7, #15]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	33e0      	adds	r3, #224	@ 0xe0
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d102      	bne.n	8009150 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800914a:	7bfb      	ldrb	r3, [r7, #15]
 800914c:	b29b      	uxth	r3, r3
 800914e:	e007      	b.n	8009160 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009150:	7bfb      	ldrb	r3, [r7, #15]
 8009152:	3301      	adds	r3, #1
 8009154:	73fb      	strb	r3, [r7, #15]
 8009156:	7bfb      	ldrb	r3, [r7, #15]
 8009158:	2b0f      	cmp	r3, #15
 800915a:	d9ec      	bls.n	8009136 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800915c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009160:	4618      	mov	r0, r3
 8009162:	3714      	adds	r7, #20
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009170:	2201      	movs	r2, #1
 8009172:	490e      	ldr	r1, [pc, #56]	@ (80091ac <MX_USB_HOST_Init+0x40>)
 8009174:	480e      	ldr	r0, [pc, #56]	@ (80091b0 <MX_USB_HOST_Init+0x44>)
 8009176:	f7fe fb15 	bl	80077a4 <USBH_Init>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009180:	f7f7 fc1e 	bl	80009c0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009184:	490b      	ldr	r1, [pc, #44]	@ (80091b4 <MX_USB_HOST_Init+0x48>)
 8009186:	480a      	ldr	r0, [pc, #40]	@ (80091b0 <MX_USB_HOST_Init+0x44>)
 8009188:	f7fe fbb9 	bl	80078fe <USBH_RegisterClass>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009192:	f7f7 fc15 	bl	80009c0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009196:	4806      	ldr	r0, [pc, #24]	@ (80091b0 <MX_USB_HOST_Init+0x44>)
 8009198:	f7fe fc3d 	bl	8007a16 <USBH_Start>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d001      	beq.n	80091a6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80091a2:	f7f7 fc0d 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80091a6:	bf00      	nop
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	080091cd 	.word	0x080091cd
 80091b0:	200001d4 	.word	0x200001d4
 80091b4:	2000000c 	.word	0x2000000c

080091b8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80091bc:	4802      	ldr	r0, [pc, #8]	@ (80091c8 <MX_USB_HOST_Process+0x10>)
 80091be:	f7fe fc3b 	bl	8007a38 <USBH_Process>
}
 80091c2:	bf00      	nop
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	200001d4 	.word	0x200001d4

080091cc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	460b      	mov	r3, r1
 80091d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80091d8:	78fb      	ldrb	r3, [r7, #3]
 80091da:	3b01      	subs	r3, #1
 80091dc:	2b04      	cmp	r3, #4
 80091de:	d819      	bhi.n	8009214 <USBH_UserProcess+0x48>
 80091e0:	a201      	add	r2, pc, #4	@ (adr r2, 80091e8 <USBH_UserProcess+0x1c>)
 80091e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e6:	bf00      	nop
 80091e8:	08009215 	.word	0x08009215
 80091ec:	08009205 	.word	0x08009205
 80091f0:	08009215 	.word	0x08009215
 80091f4:	0800920d 	.word	0x0800920d
 80091f8:	080091fd 	.word	0x080091fd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80091fc:	4b09      	ldr	r3, [pc, #36]	@ (8009224 <USBH_UserProcess+0x58>)
 80091fe:	2203      	movs	r2, #3
 8009200:	701a      	strb	r2, [r3, #0]
  break;
 8009202:	e008      	b.n	8009216 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009204:	4b07      	ldr	r3, [pc, #28]	@ (8009224 <USBH_UserProcess+0x58>)
 8009206:	2202      	movs	r2, #2
 8009208:	701a      	strb	r2, [r3, #0]
  break;
 800920a:	e004      	b.n	8009216 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800920c:	4b05      	ldr	r3, [pc, #20]	@ (8009224 <USBH_UserProcess+0x58>)
 800920e:	2201      	movs	r2, #1
 8009210:	701a      	strb	r2, [r3, #0]
  break;
 8009212:	e000      	b.n	8009216 <USBH_UserProcess+0x4a>

  default:
  break;
 8009214:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009216:	bf00      	nop
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	200005ac 	.word	0x200005ac

08009228 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b08a      	sub	sp, #40	@ 0x28
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009230:	f107 0314 	add.w	r3, r7, #20
 8009234:	2200      	movs	r2, #0
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	605a      	str	r2, [r3, #4]
 800923a:	609a      	str	r2, [r3, #8]
 800923c:	60da      	str	r2, [r3, #12]
 800923e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009248:	d147      	bne.n	80092da <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800924a:	2300      	movs	r3, #0
 800924c:	613b      	str	r3, [r7, #16]
 800924e:	4b25      	ldr	r3, [pc, #148]	@ (80092e4 <HAL_HCD_MspInit+0xbc>)
 8009250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009252:	4a24      	ldr	r2, [pc, #144]	@ (80092e4 <HAL_HCD_MspInit+0xbc>)
 8009254:	f043 0301 	orr.w	r3, r3, #1
 8009258:	6313      	str	r3, [r2, #48]	@ 0x30
 800925a:	4b22      	ldr	r3, [pc, #136]	@ (80092e4 <HAL_HCD_MspInit+0xbc>)
 800925c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	613b      	str	r3, [r7, #16]
 8009264:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009266:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800926a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800926c:	2300      	movs	r3, #0
 800926e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009270:	2300      	movs	r3, #0
 8009272:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009274:	f107 0314 	add.w	r3, r7, #20
 8009278:	4619      	mov	r1, r3
 800927a:	481b      	ldr	r0, [pc, #108]	@ (80092e8 <HAL_HCD_MspInit+0xc0>)
 800927c:	f7f7 feee 	bl	800105c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009280:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009286:	2302      	movs	r3, #2
 8009288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800928a:	2300      	movs	r3, #0
 800928c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800928e:	2300      	movs	r3, #0
 8009290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009292:	230a      	movs	r3, #10
 8009294:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009296:	f107 0314 	add.w	r3, r7, #20
 800929a:	4619      	mov	r1, r3
 800929c:	4812      	ldr	r0, [pc, #72]	@ (80092e8 <HAL_HCD_MspInit+0xc0>)
 800929e:	f7f7 fedd 	bl	800105c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80092a2:	4b10      	ldr	r3, [pc, #64]	@ (80092e4 <HAL_HCD_MspInit+0xbc>)
 80092a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092a6:	4a0f      	ldr	r2, [pc, #60]	@ (80092e4 <HAL_HCD_MspInit+0xbc>)
 80092a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092ac:	6353      	str	r3, [r2, #52]	@ 0x34
 80092ae:	2300      	movs	r3, #0
 80092b0:	60fb      	str	r3, [r7, #12]
 80092b2:	4b0c      	ldr	r3, [pc, #48]	@ (80092e4 <HAL_HCD_MspInit+0xbc>)
 80092b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092b6:	4a0b      	ldr	r2, [pc, #44]	@ (80092e4 <HAL_HCD_MspInit+0xbc>)
 80092b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80092bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80092be:	4b09      	ldr	r3, [pc, #36]	@ (80092e4 <HAL_HCD_MspInit+0xbc>)
 80092c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80092ca:	2200      	movs	r2, #0
 80092cc:	2100      	movs	r1, #0
 80092ce:	2043      	movs	r0, #67	@ 0x43
 80092d0:	f7f7 fe8d 	bl	8000fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80092d4:	2043      	movs	r0, #67	@ 0x43
 80092d6:	f7f7 fea6 	bl	8001026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80092da:	bf00      	nop
 80092dc:	3728      	adds	r7, #40	@ 0x28
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	40023800 	.word	0x40023800
 80092e8:	40020000 	.word	0x40020000

080092ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fe ff73 	bl	80081e6 <USBH_LL_IncTimer>
}
 8009300:	bf00      	nop
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009316:	4618      	mov	r0, r3
 8009318:	f7fe ffab 	bl	8008272 <USBH_LL_Connect>
}
 800931c:	bf00      	nop
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009332:	4618      	mov	r0, r3
 8009334:	f7fe ffb4 	bl	80082a0 <USBH_LL_Disconnect>
}
 8009338:	bf00      	nop
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	70fb      	strb	r3, [r7, #3]
 800934c:	4613      	mov	r3, r2
 800934e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800936a:	4618      	mov	r0, r3
 800936c:	f7fe ff65 	bl	800823a <USBH_LL_PortEnabled>
}
 8009370:	bf00      	nop
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009386:	4618      	mov	r0, r3
 8009388:	f7fe ff65 	bl	8008256 <USBH_LL_PortDisabled>
}
 800938c:	bf00      	nop
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d12a      	bne.n	80093fc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80093a6:	4a18      	ldr	r2, [pc, #96]	@ (8009408 <USBH_LL_Init+0x74>)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a15      	ldr	r2, [pc, #84]	@ (8009408 <USBH_LL_Init+0x74>)
 80093b2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093b6:	4b14      	ldr	r3, [pc, #80]	@ (8009408 <USBH_LL_Init+0x74>)
 80093b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80093bc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80093be:	4b12      	ldr	r3, [pc, #72]	@ (8009408 <USBH_LL_Init+0x74>)
 80093c0:	2208      	movs	r2, #8
 80093c2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80093c4:	4b10      	ldr	r3, [pc, #64]	@ (8009408 <USBH_LL_Init+0x74>)
 80093c6:	2201      	movs	r2, #1
 80093c8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80093ca:	4b0f      	ldr	r3, [pc, #60]	@ (8009408 <USBH_LL_Init+0x74>)
 80093cc:	2200      	movs	r2, #0
 80093ce:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80093d0:	4b0d      	ldr	r3, [pc, #52]	@ (8009408 <USBH_LL_Init+0x74>)
 80093d2:	2202      	movs	r2, #2
 80093d4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80093d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009408 <USBH_LL_Init+0x74>)
 80093d8:	2200      	movs	r2, #0
 80093da:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80093dc:	480a      	ldr	r0, [pc, #40]	@ (8009408 <USBH_LL_Init+0x74>)
 80093de:	f7f7 fff2 	bl	80013c6 <HAL_HCD_Init>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80093e8:	f7f7 faea 	bl	80009c0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80093ec:	4806      	ldr	r0, [pc, #24]	@ (8009408 <USBH_LL_Init+0x74>)
 80093ee:	f7f8 fc53 	bl	8001c98 <HAL_HCD_GetCurrentFrame>
 80093f2:	4603      	mov	r3, r0
 80093f4:	4619      	mov	r1, r3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7fe fee6 	bl	80081c8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	200005b0 	.word	0x200005b0

0800940c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009422:	4618      	mov	r0, r3
 8009424:	f7f8 fbc0 	bl	8001ba8 <HAL_HCD_Start>
 8009428:	4603      	mov	r3, r0
 800942a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800942c:	7bfb      	ldrb	r3, [r7, #15]
 800942e:	4618      	mov	r0, r3
 8009430:	f000 f95e 	bl	80096f0 <USBH_Get_USB_Status>
 8009434:	4603      	mov	r3, r0
 8009436:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009438:	7bbb      	ldrb	r3, [r7, #14]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b084      	sub	sp, #16
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009458:	4618      	mov	r0, r3
 800945a:	f7f8 fbc8 	bl	8001bee <HAL_HCD_Stop>
 800945e:	4603      	mov	r3, r0
 8009460:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009462:	7bfb      	ldrb	r3, [r7, #15]
 8009464:	4618      	mov	r0, r3
 8009466:	f000 f943 	bl	80096f0 <USBH_Get_USB_Status>
 800946a:	4603      	mov	r3, r0
 800946c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800946e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009480:	2301      	movs	r3, #1
 8009482:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800948a:	4618      	mov	r0, r3
 800948c:	f7f8 fc12 	bl	8001cb4 <HAL_HCD_GetCurrentSpeed>
 8009490:	4603      	mov	r3, r0
 8009492:	2b02      	cmp	r3, #2
 8009494:	d00c      	beq.n	80094b0 <USBH_LL_GetSpeed+0x38>
 8009496:	2b02      	cmp	r3, #2
 8009498:	d80d      	bhi.n	80094b6 <USBH_LL_GetSpeed+0x3e>
 800949a:	2b00      	cmp	r3, #0
 800949c:	d002      	beq.n	80094a4 <USBH_LL_GetSpeed+0x2c>
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d003      	beq.n	80094aa <USBH_LL_GetSpeed+0x32>
 80094a2:	e008      	b.n	80094b6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80094a4:	2300      	movs	r3, #0
 80094a6:	73fb      	strb	r3, [r7, #15]
    break;
 80094a8:	e008      	b.n	80094bc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80094aa:	2301      	movs	r3, #1
 80094ac:	73fb      	strb	r3, [r7, #15]
    break;
 80094ae:	e005      	b.n	80094bc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80094b0:	2302      	movs	r3, #2
 80094b2:	73fb      	strb	r3, [r7, #15]
    break;
 80094b4:	e002      	b.n	80094bc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80094b6:	2301      	movs	r3, #1
 80094b8:	73fb      	strb	r3, [r7, #15]
    break;
 80094ba:	bf00      	nop
  }
  return  speed;
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094d2:	2300      	movs	r3, #0
 80094d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80094dc:	4618      	mov	r0, r3
 80094de:	f7f8 fba3 	bl	8001c28 <HAL_HCD_ResetPort>
 80094e2:	4603      	mov	r3, r0
 80094e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f000 f901 	bl	80096f0 <USBH_Get_USB_Status>
 80094ee:	4603      	mov	r3, r0
 80094f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	460b      	mov	r3, r1
 8009506:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800950e:	78fa      	ldrb	r2, [r7, #3]
 8009510:	4611      	mov	r1, r2
 8009512:	4618      	mov	r0, r3
 8009514:	f7f8 fbab 	bl	8001c6e <HAL_HCD_HC_GetXferCount>
 8009518:	4603      	mov	r3, r0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009522:	b590      	push	{r4, r7, lr}
 8009524:	b089      	sub	sp, #36	@ 0x24
 8009526:	af04      	add	r7, sp, #16
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	4608      	mov	r0, r1
 800952c:	4611      	mov	r1, r2
 800952e:	461a      	mov	r2, r3
 8009530:	4603      	mov	r3, r0
 8009532:	70fb      	strb	r3, [r7, #3]
 8009534:	460b      	mov	r3, r1
 8009536:	70bb      	strb	r3, [r7, #2]
 8009538:	4613      	mov	r3, r2
 800953a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800954a:	787c      	ldrb	r4, [r7, #1]
 800954c:	78ba      	ldrb	r2, [r7, #2]
 800954e:	78f9      	ldrb	r1, [r7, #3]
 8009550:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009552:	9302      	str	r3, [sp, #8]
 8009554:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009558:	9301      	str	r3, [sp, #4]
 800955a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800955e:	9300      	str	r3, [sp, #0]
 8009560:	4623      	mov	r3, r4
 8009562:	f7f7 ff97 	bl	8001494 <HAL_HCD_HC_Init>
 8009566:	4603      	mov	r3, r0
 8009568:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800956a:	7bfb      	ldrb	r3, [r7, #15]
 800956c:	4618      	mov	r0, r3
 800956e:	f000 f8bf 	bl	80096f0 <USBH_Get_USB_Status>
 8009572:	4603      	mov	r3, r0
 8009574:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009576:	7bbb      	ldrb	r3, [r7, #14]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3714      	adds	r7, #20
 800957c:	46bd      	mov	sp, r7
 800957e:	bd90      	pop	{r4, r7, pc}

08009580 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	460b      	mov	r3, r1
 800958a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800958c:	2300      	movs	r3, #0
 800958e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009590:	2300      	movs	r3, #0
 8009592:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800959a:	78fa      	ldrb	r2, [r7, #3]
 800959c:	4611      	mov	r1, r2
 800959e:	4618      	mov	r0, r3
 80095a0:	f7f8 f830 	bl	8001604 <HAL_HCD_HC_Halt>
 80095a4:	4603      	mov	r3, r0
 80095a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80095a8:	7bfb      	ldrb	r3, [r7, #15]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f000 f8a0 	bl	80096f0 <USBH_Get_USB_Status>
 80095b0:	4603      	mov	r3, r0
 80095b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80095be:	b590      	push	{r4, r7, lr}
 80095c0:	b089      	sub	sp, #36	@ 0x24
 80095c2:	af04      	add	r7, sp, #16
 80095c4:	6078      	str	r0, [r7, #4]
 80095c6:	4608      	mov	r0, r1
 80095c8:	4611      	mov	r1, r2
 80095ca:	461a      	mov	r2, r3
 80095cc:	4603      	mov	r3, r0
 80095ce:	70fb      	strb	r3, [r7, #3]
 80095d0:	460b      	mov	r3, r1
 80095d2:	70bb      	strb	r3, [r7, #2]
 80095d4:	4613      	mov	r3, r2
 80095d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80095e6:	787c      	ldrb	r4, [r7, #1]
 80095e8:	78ba      	ldrb	r2, [r7, #2]
 80095ea:	78f9      	ldrb	r1, [r7, #3]
 80095ec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80095f0:	9303      	str	r3, [sp, #12]
 80095f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80095f4:	9302      	str	r3, [sp, #8]
 80095f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f8:	9301      	str	r3, [sp, #4]
 80095fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	4623      	mov	r3, r4
 8009602:	f7f8 f823 	bl	800164c <HAL_HCD_HC_SubmitRequest>
 8009606:	4603      	mov	r3, r0
 8009608:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800960a:	7bfb      	ldrb	r3, [r7, #15]
 800960c:	4618      	mov	r0, r3
 800960e:	f000 f86f 	bl	80096f0 <USBH_Get_USB_Status>
 8009612:	4603      	mov	r3, r0
 8009614:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009616:	7bbb      	ldrb	r3, [r7, #14]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	bd90      	pop	{r4, r7, pc}

08009620 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009632:	78fa      	ldrb	r2, [r7, #3]
 8009634:	4611      	mov	r1, r2
 8009636:	4618      	mov	r0, r3
 8009638:	f7f8 fb04 	bl	8001c44 <HAL_HCD_HC_GetURBState>
 800963c:	4603      	mov	r3, r0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b082      	sub	sp, #8
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	460b      	mov	r3, r1
 8009650:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009658:	2b01      	cmp	r3, #1
 800965a:	d103      	bne.n	8009664 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800965c:	78fb      	ldrb	r3, [r7, #3]
 800965e:	4618      	mov	r0, r3
 8009660:	f000 f872 	bl	8009748 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009664:	20c8      	movs	r0, #200	@ 0xc8
 8009666:	f7fc fe29 	bl	80062bc <HAL_Delay>
  return USBH_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3708      	adds	r7, #8
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009674:	b480      	push	{r7}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	460b      	mov	r3, r1
 800967e:	70fb      	strb	r3, [r7, #3]
 8009680:	4613      	mov	r3, r2
 8009682:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800968a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800968c:	78fa      	ldrb	r2, [r7, #3]
 800968e:	68f9      	ldr	r1, [r7, #12]
 8009690:	4613      	mov	r3, r2
 8009692:	011b      	lsls	r3, r3, #4
 8009694:	1a9b      	subs	r3, r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	440b      	add	r3, r1
 800969a:	3317      	adds	r3, #23
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00a      	beq.n	80096b8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80096a2:	78fa      	ldrb	r2, [r7, #3]
 80096a4:	68f9      	ldr	r1, [r7, #12]
 80096a6:	4613      	mov	r3, r2
 80096a8:	011b      	lsls	r3, r3, #4
 80096aa:	1a9b      	subs	r3, r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	440b      	add	r3, r1
 80096b0:	333c      	adds	r3, #60	@ 0x3c
 80096b2:	78ba      	ldrb	r2, [r7, #2]
 80096b4:	701a      	strb	r2, [r3, #0]
 80096b6:	e009      	b.n	80096cc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80096b8:	78fa      	ldrb	r2, [r7, #3]
 80096ba:	68f9      	ldr	r1, [r7, #12]
 80096bc:	4613      	mov	r3, r2
 80096be:	011b      	lsls	r3, r3, #4
 80096c0:	1a9b      	subs	r3, r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	440b      	add	r3, r1
 80096c6:	333d      	adds	r3, #61	@ 0x3d
 80096c8:	78ba      	ldrb	r2, [r7, #2]
 80096ca:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3714      	adds	r7, #20
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr

080096da <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b082      	sub	sp, #8
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7fc fdea 	bl	80062bc <HAL_Delay>
}
 80096e8:	bf00      	nop
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	4603      	mov	r3, r0
 80096f8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096fe:	79fb      	ldrb	r3, [r7, #7]
 8009700:	2b03      	cmp	r3, #3
 8009702:	d817      	bhi.n	8009734 <USBH_Get_USB_Status+0x44>
 8009704:	a201      	add	r2, pc, #4	@ (adr r2, 800970c <USBH_Get_USB_Status+0x1c>)
 8009706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970a:	bf00      	nop
 800970c:	0800971d 	.word	0x0800971d
 8009710:	08009723 	.word	0x08009723
 8009714:	08009729 	.word	0x08009729
 8009718:	0800972f 	.word	0x0800972f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800971c:	2300      	movs	r3, #0
 800971e:	73fb      	strb	r3, [r7, #15]
    break;
 8009720:	e00b      	b.n	800973a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009722:	2302      	movs	r3, #2
 8009724:	73fb      	strb	r3, [r7, #15]
    break;
 8009726:	e008      	b.n	800973a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009728:	2301      	movs	r3, #1
 800972a:	73fb      	strb	r3, [r7, #15]
    break;
 800972c:	e005      	b.n	800973a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800972e:	2302      	movs	r3, #2
 8009730:	73fb      	strb	r3, [r7, #15]
    break;
 8009732:	e002      	b.n	800973a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009734:	2302      	movs	r3, #2
 8009736:	73fb      	strb	r3, [r7, #15]
    break;
 8009738:	bf00      	nop
  }
  return usb_status;
 800973a:	7bfb      	ldrb	r3, [r7, #15]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3714      	adds	r7, #20
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	4603      	mov	r3, r0
 8009750:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009752:	79fb      	ldrb	r3, [r7, #7]
 8009754:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009756:	79fb      	ldrb	r3, [r7, #7]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d102      	bne.n	8009762 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800975c:	2300      	movs	r3, #0
 800975e:	73fb      	strb	r3, [r7, #15]
 8009760:	e001      	b.n	8009766 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009762:	2301      	movs	r3, #1
 8009764:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009766:	7bfb      	ldrb	r3, [r7, #15]
 8009768:	461a      	mov	r2, r3
 800976a:	2101      	movs	r1, #1
 800976c:	4803      	ldr	r0, [pc, #12]	@ (800977c <MX_DriverVbusFS+0x34>)
 800976e:	f7f7 fe11 	bl	8001394 <HAL_GPIO_WritePin>
}
 8009772:	bf00      	nop
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	40020800 	.word	0x40020800

08009780 <malloc>:
 8009780:	4b02      	ldr	r3, [pc, #8]	@ (800978c <malloc+0xc>)
 8009782:	4601      	mov	r1, r0
 8009784:	6818      	ldr	r0, [r3, #0]
 8009786:	f000 b82d 	b.w	80097e4 <_malloc_r>
 800978a:	bf00      	nop
 800978c:	2000002c 	.word	0x2000002c

08009790 <free>:
 8009790:	4b02      	ldr	r3, [pc, #8]	@ (800979c <free+0xc>)
 8009792:	4601      	mov	r1, r0
 8009794:	6818      	ldr	r0, [r3, #0]
 8009796:	f000 b8f5 	b.w	8009984 <_free_r>
 800979a:	bf00      	nop
 800979c:	2000002c 	.word	0x2000002c

080097a0 <sbrk_aligned>:
 80097a0:	b570      	push	{r4, r5, r6, lr}
 80097a2:	4e0f      	ldr	r6, [pc, #60]	@ (80097e0 <sbrk_aligned+0x40>)
 80097a4:	460c      	mov	r4, r1
 80097a6:	6831      	ldr	r1, [r6, #0]
 80097a8:	4605      	mov	r5, r0
 80097aa:	b911      	cbnz	r1, 80097b2 <sbrk_aligned+0x12>
 80097ac:	f000 f8ae 	bl	800990c <_sbrk_r>
 80097b0:	6030      	str	r0, [r6, #0]
 80097b2:	4621      	mov	r1, r4
 80097b4:	4628      	mov	r0, r5
 80097b6:	f000 f8a9 	bl	800990c <_sbrk_r>
 80097ba:	1c43      	adds	r3, r0, #1
 80097bc:	d103      	bne.n	80097c6 <sbrk_aligned+0x26>
 80097be:	f04f 34ff 	mov.w	r4, #4294967295
 80097c2:	4620      	mov	r0, r4
 80097c4:	bd70      	pop	{r4, r5, r6, pc}
 80097c6:	1cc4      	adds	r4, r0, #3
 80097c8:	f024 0403 	bic.w	r4, r4, #3
 80097cc:	42a0      	cmp	r0, r4
 80097ce:	d0f8      	beq.n	80097c2 <sbrk_aligned+0x22>
 80097d0:	1a21      	subs	r1, r4, r0
 80097d2:	4628      	mov	r0, r5
 80097d4:	f000 f89a 	bl	800990c <_sbrk_r>
 80097d8:	3001      	adds	r0, #1
 80097da:	d1f2      	bne.n	80097c2 <sbrk_aligned+0x22>
 80097dc:	e7ef      	b.n	80097be <sbrk_aligned+0x1e>
 80097de:	bf00      	nop
 80097e0:	20000990 	.word	0x20000990

080097e4 <_malloc_r>:
 80097e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097e8:	1ccd      	adds	r5, r1, #3
 80097ea:	f025 0503 	bic.w	r5, r5, #3
 80097ee:	3508      	adds	r5, #8
 80097f0:	2d0c      	cmp	r5, #12
 80097f2:	bf38      	it	cc
 80097f4:	250c      	movcc	r5, #12
 80097f6:	2d00      	cmp	r5, #0
 80097f8:	4606      	mov	r6, r0
 80097fa:	db01      	blt.n	8009800 <_malloc_r+0x1c>
 80097fc:	42a9      	cmp	r1, r5
 80097fe:	d904      	bls.n	800980a <_malloc_r+0x26>
 8009800:	230c      	movs	r3, #12
 8009802:	6033      	str	r3, [r6, #0]
 8009804:	2000      	movs	r0, #0
 8009806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800980a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80098e0 <_malloc_r+0xfc>
 800980e:	f000 f869 	bl	80098e4 <__malloc_lock>
 8009812:	f8d8 3000 	ldr.w	r3, [r8]
 8009816:	461c      	mov	r4, r3
 8009818:	bb44      	cbnz	r4, 800986c <_malloc_r+0x88>
 800981a:	4629      	mov	r1, r5
 800981c:	4630      	mov	r0, r6
 800981e:	f7ff ffbf 	bl	80097a0 <sbrk_aligned>
 8009822:	1c43      	adds	r3, r0, #1
 8009824:	4604      	mov	r4, r0
 8009826:	d158      	bne.n	80098da <_malloc_r+0xf6>
 8009828:	f8d8 4000 	ldr.w	r4, [r8]
 800982c:	4627      	mov	r7, r4
 800982e:	2f00      	cmp	r7, #0
 8009830:	d143      	bne.n	80098ba <_malloc_r+0xd6>
 8009832:	2c00      	cmp	r4, #0
 8009834:	d04b      	beq.n	80098ce <_malloc_r+0xea>
 8009836:	6823      	ldr	r3, [r4, #0]
 8009838:	4639      	mov	r1, r7
 800983a:	4630      	mov	r0, r6
 800983c:	eb04 0903 	add.w	r9, r4, r3
 8009840:	f000 f864 	bl	800990c <_sbrk_r>
 8009844:	4581      	cmp	r9, r0
 8009846:	d142      	bne.n	80098ce <_malloc_r+0xea>
 8009848:	6821      	ldr	r1, [r4, #0]
 800984a:	1a6d      	subs	r5, r5, r1
 800984c:	4629      	mov	r1, r5
 800984e:	4630      	mov	r0, r6
 8009850:	f7ff ffa6 	bl	80097a0 <sbrk_aligned>
 8009854:	3001      	adds	r0, #1
 8009856:	d03a      	beq.n	80098ce <_malloc_r+0xea>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	442b      	add	r3, r5
 800985c:	6023      	str	r3, [r4, #0]
 800985e:	f8d8 3000 	ldr.w	r3, [r8]
 8009862:	685a      	ldr	r2, [r3, #4]
 8009864:	bb62      	cbnz	r2, 80098c0 <_malloc_r+0xdc>
 8009866:	f8c8 7000 	str.w	r7, [r8]
 800986a:	e00f      	b.n	800988c <_malloc_r+0xa8>
 800986c:	6822      	ldr	r2, [r4, #0]
 800986e:	1b52      	subs	r2, r2, r5
 8009870:	d420      	bmi.n	80098b4 <_malloc_r+0xd0>
 8009872:	2a0b      	cmp	r2, #11
 8009874:	d917      	bls.n	80098a6 <_malloc_r+0xc2>
 8009876:	1961      	adds	r1, r4, r5
 8009878:	42a3      	cmp	r3, r4
 800987a:	6025      	str	r5, [r4, #0]
 800987c:	bf18      	it	ne
 800987e:	6059      	strne	r1, [r3, #4]
 8009880:	6863      	ldr	r3, [r4, #4]
 8009882:	bf08      	it	eq
 8009884:	f8c8 1000 	streq.w	r1, [r8]
 8009888:	5162      	str	r2, [r4, r5]
 800988a:	604b      	str	r3, [r1, #4]
 800988c:	4630      	mov	r0, r6
 800988e:	f000 f82f 	bl	80098f0 <__malloc_unlock>
 8009892:	f104 000b 	add.w	r0, r4, #11
 8009896:	1d23      	adds	r3, r4, #4
 8009898:	f020 0007 	bic.w	r0, r0, #7
 800989c:	1ac2      	subs	r2, r0, r3
 800989e:	bf1c      	itt	ne
 80098a0:	1a1b      	subne	r3, r3, r0
 80098a2:	50a3      	strne	r3, [r4, r2]
 80098a4:	e7af      	b.n	8009806 <_malloc_r+0x22>
 80098a6:	6862      	ldr	r2, [r4, #4]
 80098a8:	42a3      	cmp	r3, r4
 80098aa:	bf0c      	ite	eq
 80098ac:	f8c8 2000 	streq.w	r2, [r8]
 80098b0:	605a      	strne	r2, [r3, #4]
 80098b2:	e7eb      	b.n	800988c <_malloc_r+0xa8>
 80098b4:	4623      	mov	r3, r4
 80098b6:	6864      	ldr	r4, [r4, #4]
 80098b8:	e7ae      	b.n	8009818 <_malloc_r+0x34>
 80098ba:	463c      	mov	r4, r7
 80098bc:	687f      	ldr	r7, [r7, #4]
 80098be:	e7b6      	b.n	800982e <_malloc_r+0x4a>
 80098c0:	461a      	mov	r2, r3
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	42a3      	cmp	r3, r4
 80098c6:	d1fb      	bne.n	80098c0 <_malloc_r+0xdc>
 80098c8:	2300      	movs	r3, #0
 80098ca:	6053      	str	r3, [r2, #4]
 80098cc:	e7de      	b.n	800988c <_malloc_r+0xa8>
 80098ce:	230c      	movs	r3, #12
 80098d0:	6033      	str	r3, [r6, #0]
 80098d2:	4630      	mov	r0, r6
 80098d4:	f000 f80c 	bl	80098f0 <__malloc_unlock>
 80098d8:	e794      	b.n	8009804 <_malloc_r+0x20>
 80098da:	6005      	str	r5, [r0, #0]
 80098dc:	e7d6      	b.n	800988c <_malloc_r+0xa8>
 80098de:	bf00      	nop
 80098e0:	20000994 	.word	0x20000994

080098e4 <__malloc_lock>:
 80098e4:	4801      	ldr	r0, [pc, #4]	@ (80098ec <__malloc_lock+0x8>)
 80098e6:	f000 b84b 	b.w	8009980 <__retarget_lock_acquire_recursive>
 80098ea:	bf00      	nop
 80098ec:	20000ad4 	.word	0x20000ad4

080098f0 <__malloc_unlock>:
 80098f0:	4801      	ldr	r0, [pc, #4]	@ (80098f8 <__malloc_unlock+0x8>)
 80098f2:	f000 b846 	b.w	8009982 <__retarget_lock_release_recursive>
 80098f6:	bf00      	nop
 80098f8:	20000ad4 	.word	0x20000ad4

080098fc <memset>:
 80098fc:	4402      	add	r2, r0
 80098fe:	4603      	mov	r3, r0
 8009900:	4293      	cmp	r3, r2
 8009902:	d100      	bne.n	8009906 <memset+0xa>
 8009904:	4770      	bx	lr
 8009906:	f803 1b01 	strb.w	r1, [r3], #1
 800990a:	e7f9      	b.n	8009900 <memset+0x4>

0800990c <_sbrk_r>:
 800990c:	b538      	push	{r3, r4, r5, lr}
 800990e:	4d06      	ldr	r5, [pc, #24]	@ (8009928 <_sbrk_r+0x1c>)
 8009910:	2300      	movs	r3, #0
 8009912:	4604      	mov	r4, r0
 8009914:	4608      	mov	r0, r1
 8009916:	602b      	str	r3, [r5, #0]
 8009918:	f7f7 f9ca 	bl	8000cb0 <_sbrk>
 800991c:	1c43      	adds	r3, r0, #1
 800991e:	d102      	bne.n	8009926 <_sbrk_r+0x1a>
 8009920:	682b      	ldr	r3, [r5, #0]
 8009922:	b103      	cbz	r3, 8009926 <_sbrk_r+0x1a>
 8009924:	6023      	str	r3, [r4, #0]
 8009926:	bd38      	pop	{r3, r4, r5, pc}
 8009928:	20000ad0 	.word	0x20000ad0

0800992c <__errno>:
 800992c:	4b01      	ldr	r3, [pc, #4]	@ (8009934 <__errno+0x8>)
 800992e:	6818      	ldr	r0, [r3, #0]
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	2000002c 	.word	0x2000002c

08009938 <__libc_init_array>:
 8009938:	b570      	push	{r4, r5, r6, lr}
 800993a:	4d0d      	ldr	r5, [pc, #52]	@ (8009970 <__libc_init_array+0x38>)
 800993c:	4c0d      	ldr	r4, [pc, #52]	@ (8009974 <__libc_init_array+0x3c>)
 800993e:	1b64      	subs	r4, r4, r5
 8009940:	10a4      	asrs	r4, r4, #2
 8009942:	2600      	movs	r6, #0
 8009944:	42a6      	cmp	r6, r4
 8009946:	d109      	bne.n	800995c <__libc_init_array+0x24>
 8009948:	4d0b      	ldr	r5, [pc, #44]	@ (8009978 <__libc_init_array+0x40>)
 800994a:	4c0c      	ldr	r4, [pc, #48]	@ (800997c <__libc_init_array+0x44>)
 800994c:	f000 f864 	bl	8009a18 <_init>
 8009950:	1b64      	subs	r4, r4, r5
 8009952:	10a4      	asrs	r4, r4, #2
 8009954:	2600      	movs	r6, #0
 8009956:	42a6      	cmp	r6, r4
 8009958:	d105      	bne.n	8009966 <__libc_init_array+0x2e>
 800995a:	bd70      	pop	{r4, r5, r6, pc}
 800995c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009960:	4798      	blx	r3
 8009962:	3601      	adds	r6, #1
 8009964:	e7ee      	b.n	8009944 <__libc_init_array+0xc>
 8009966:	f855 3b04 	ldr.w	r3, [r5], #4
 800996a:	4798      	blx	r3
 800996c:	3601      	adds	r6, #1
 800996e:	e7f2      	b.n	8009956 <__libc_init_array+0x1e>
 8009970:	08009a54 	.word	0x08009a54
 8009974:	08009a54 	.word	0x08009a54
 8009978:	08009a54 	.word	0x08009a54
 800997c:	08009a58 	.word	0x08009a58

08009980 <__retarget_lock_acquire_recursive>:
 8009980:	4770      	bx	lr

08009982 <__retarget_lock_release_recursive>:
 8009982:	4770      	bx	lr

08009984 <_free_r>:
 8009984:	b538      	push	{r3, r4, r5, lr}
 8009986:	4605      	mov	r5, r0
 8009988:	2900      	cmp	r1, #0
 800998a:	d041      	beq.n	8009a10 <_free_r+0x8c>
 800998c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009990:	1f0c      	subs	r4, r1, #4
 8009992:	2b00      	cmp	r3, #0
 8009994:	bfb8      	it	lt
 8009996:	18e4      	addlt	r4, r4, r3
 8009998:	f7ff ffa4 	bl	80098e4 <__malloc_lock>
 800999c:	4a1d      	ldr	r2, [pc, #116]	@ (8009a14 <_free_r+0x90>)
 800999e:	6813      	ldr	r3, [r2, #0]
 80099a0:	b933      	cbnz	r3, 80099b0 <_free_r+0x2c>
 80099a2:	6063      	str	r3, [r4, #4]
 80099a4:	6014      	str	r4, [r2, #0]
 80099a6:	4628      	mov	r0, r5
 80099a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099ac:	f7ff bfa0 	b.w	80098f0 <__malloc_unlock>
 80099b0:	42a3      	cmp	r3, r4
 80099b2:	d908      	bls.n	80099c6 <_free_r+0x42>
 80099b4:	6820      	ldr	r0, [r4, #0]
 80099b6:	1821      	adds	r1, r4, r0
 80099b8:	428b      	cmp	r3, r1
 80099ba:	bf01      	itttt	eq
 80099bc:	6819      	ldreq	r1, [r3, #0]
 80099be:	685b      	ldreq	r3, [r3, #4]
 80099c0:	1809      	addeq	r1, r1, r0
 80099c2:	6021      	streq	r1, [r4, #0]
 80099c4:	e7ed      	b.n	80099a2 <_free_r+0x1e>
 80099c6:	461a      	mov	r2, r3
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	b10b      	cbz	r3, 80099d0 <_free_r+0x4c>
 80099cc:	42a3      	cmp	r3, r4
 80099ce:	d9fa      	bls.n	80099c6 <_free_r+0x42>
 80099d0:	6811      	ldr	r1, [r2, #0]
 80099d2:	1850      	adds	r0, r2, r1
 80099d4:	42a0      	cmp	r0, r4
 80099d6:	d10b      	bne.n	80099f0 <_free_r+0x6c>
 80099d8:	6820      	ldr	r0, [r4, #0]
 80099da:	4401      	add	r1, r0
 80099dc:	1850      	adds	r0, r2, r1
 80099de:	4283      	cmp	r3, r0
 80099e0:	6011      	str	r1, [r2, #0]
 80099e2:	d1e0      	bne.n	80099a6 <_free_r+0x22>
 80099e4:	6818      	ldr	r0, [r3, #0]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	6053      	str	r3, [r2, #4]
 80099ea:	4408      	add	r0, r1
 80099ec:	6010      	str	r0, [r2, #0]
 80099ee:	e7da      	b.n	80099a6 <_free_r+0x22>
 80099f0:	d902      	bls.n	80099f8 <_free_r+0x74>
 80099f2:	230c      	movs	r3, #12
 80099f4:	602b      	str	r3, [r5, #0]
 80099f6:	e7d6      	b.n	80099a6 <_free_r+0x22>
 80099f8:	6820      	ldr	r0, [r4, #0]
 80099fa:	1821      	adds	r1, r4, r0
 80099fc:	428b      	cmp	r3, r1
 80099fe:	bf04      	itt	eq
 8009a00:	6819      	ldreq	r1, [r3, #0]
 8009a02:	685b      	ldreq	r3, [r3, #4]
 8009a04:	6063      	str	r3, [r4, #4]
 8009a06:	bf04      	itt	eq
 8009a08:	1809      	addeq	r1, r1, r0
 8009a0a:	6021      	streq	r1, [r4, #0]
 8009a0c:	6054      	str	r4, [r2, #4]
 8009a0e:	e7ca      	b.n	80099a6 <_free_r+0x22>
 8009a10:	bd38      	pop	{r3, r4, r5, pc}
 8009a12:	bf00      	nop
 8009a14:	20000994 	.word	0x20000994

08009a18 <_init>:
 8009a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1a:	bf00      	nop
 8009a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1e:	bc08      	pop	{r3}
 8009a20:	469e      	mov	lr, r3
 8009a22:	4770      	bx	lr

08009a24 <_fini>:
 8009a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a26:	bf00      	nop
 8009a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2a:	bc08      	pop	{r3}
 8009a2c:	469e      	mov	lr, r3
 8009a2e:	4770      	bx	lr
