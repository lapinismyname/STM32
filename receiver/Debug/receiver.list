
receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000433c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080044ec  080044ec  000054ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004574  08004574  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004574  08004574  00005574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800457c  0800457c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800457c  0800457c  0000557c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004580  08004580  00005580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004584  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          00001b90  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001bf8  20001bf8  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e7f6  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eb2  00000000  00000000  0001488e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  00016740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000924  00000000  00000000  00017328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e7c  00000000  00000000  00017c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db15  00000000  00000000  0003cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc4ef  00000000  00000000  0004a5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00126acc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039b4  00000000  00000000  00126b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0012a4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080044d4 	.word	0x080044d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	080044d4 	.word	0x080044d4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fcd5 	bl	8000f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f84d 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f95b 	bl	8000848 <MX_GPIO_Init>
  MX_ETH_Init();
 8000592:	f000 f8b3 	bl	80006fc <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000596:	f000 f929 	bl	80007ec <MX_USB_OTG_FS_PCD_Init>
  MX_UART7_Init();
 800059a:	f000 f8fd 	bl	8000798 <MX_UART7_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if (HAL_UART_Receive(&huart7, RxBuffer, RX_BUFFER_SIZE, 5000) == HAL_OK) {
 800059e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80005a2:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80005a6:	491a      	ldr	r1, [pc, #104]	@ (8000610 <main+0x90>)
 80005a8:	481a      	ldr	r0, [pc, #104]	@ (8000614 <main+0x94>)
 80005aa:	f002 f93d 	bl	8002828 <HAL_UART_Receive>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d128      	bne.n	8000606 <main+0x86>
		 HAL_GPIO_TogglePin(GPIOA,14);
 80005b4:	210e      	movs	r1, #14
 80005b6:	4818      	ldr	r0, [pc, #96]	@ (8000618 <main+0x98>)
 80005b8:	f001 fb25 	bl	8001c06 <HAL_GPIO_TogglePin>
		 for (uint16_t i = 0; i < RX_BUFFER_SIZE; i += 2) {
 80005bc:	2300      	movs	r3, #0
 80005be:	80fb      	strh	r3, [r7, #6]
 80005c0:	e019      	b.n	80005f6 <main+0x76>
				AccData[RxIndex++] = (uint16_t)(RxBuffer[i] | (RxBuffer[i + 1] << 8));
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	4a12      	ldr	r2, [pc, #72]	@ (8000610 <main+0x90>)
 80005c6:	5cd3      	ldrb	r3, [r2, r3]
 80005c8:	b219      	sxth	r1, r3
 80005ca:	88fb      	ldrh	r3, [r7, #6]
 80005cc:	3301      	adds	r3, #1
 80005ce:	4a10      	ldr	r2, [pc, #64]	@ (8000610 <main+0x90>)
 80005d0:	5cd3      	ldrb	r3, [r2, r3]
 80005d2:	021b      	lsls	r3, r3, #8
 80005d4:	b21a      	sxth	r2, r3
 80005d6:	4b11      	ldr	r3, [pc, #68]	@ (800061c <main+0x9c>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	1c58      	adds	r0, r3, #1
 80005dc:	b284      	uxth	r4, r0
 80005de:	480f      	ldr	r0, [pc, #60]	@ (800061c <main+0x9c>)
 80005e0:	8004      	strh	r4, [r0, #0]
 80005e2:	4618      	mov	r0, r3
 80005e4:	ea41 0302 	orr.w	r3, r1, r2
 80005e8:	b21a      	sxth	r2, r3
 80005ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000620 <main+0xa0>)
 80005ec:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
		 for (uint16_t i = 0; i < RX_BUFFER_SIZE; i += 2) {
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	3302      	adds	r3, #2
 80005f4:	80fb      	strh	r3, [r7, #6]
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
 80005fc:	d3e1      	bcc.n	80005c2 <main+0x42>

		 }
		 RxIndex = 0; // Reset the index for the next reception
 80005fe:	4b07      	ldr	r3, [pc, #28]	@ (800061c <main+0x9c>)
 8000600:	2200      	movs	r2, #0
 8000602:	801a      	strh	r2, [r3, #0]
 8000604:	e7cb      	b.n	800059e <main+0x1e>
	 	 }
	 else printf("Error receiving data via UART\n");
 8000606:	4807      	ldr	r0, [pc, #28]	@ (8000624 <main+0xa4>)
 8000608:	f003 f900 	bl	800380c <puts>
	 if (HAL_UART_Receive(&huart7, RxBuffer, RX_BUFFER_SIZE, 5000) == HAL_OK) {
 800060c:	e7c7      	b.n	800059e <main+0x1e>
 800060e:	bf00      	nop
 8000610:	200007d8 	.word	0x200007d8
 8000614:	200002ac 	.word	0x200002ac
 8000618:	40020000 	.word	0x40020000
 800061c:	20001138 	.word	0x20001138
 8000620:	2000113c 	.word	0x2000113c
 8000624:	080044ec 	.word	0x080044ec

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	@ 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	@ 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f003 f9c8 	bl	80039cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	4a27      	ldr	r2, [pc, #156]	@ (80006f4 <SystemClock_Config+0xcc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	@ 0x40
 800065c:	4b25      	ldr	r3, [pc, #148]	@ (80006f4 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b22      	ldr	r3, [pc, #136]	@ (80006f8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a21      	ldr	r2, [pc, #132]	@ (80006f8 <SystemClock_Config+0xd0>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000688:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800068c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800069c:	23a8      	movs	r3, #168	@ 0xa8
 800069e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a4:	2307      	movs	r3, #7
 80006a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fbd3 	bl	8001e58 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b8:	f000 f994 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2105      	movs	r1, #5
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fe34 	bl	8002348 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e6:	f000 f97d 	bl	80009e4 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	@ 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000700:	4b1f      	ldr	r3, [pc, #124]	@ (8000780 <MX_ETH_Init+0x84>)
 8000702:	4a20      	ldr	r2, [pc, #128]	@ (8000784 <MX_ETH_Init+0x88>)
 8000704:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000706:	4b20      	ldr	r3, [pc, #128]	@ (8000788 <MX_ETH_Init+0x8c>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800070c:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <MX_ETH_Init+0x8c>)
 800070e:	2280      	movs	r2, #128	@ 0x80
 8000710:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000712:	4b1d      	ldr	r3, [pc, #116]	@ (8000788 <MX_ETH_Init+0x8c>)
 8000714:	22e1      	movs	r2, #225	@ 0xe1
 8000716:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000718:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <MX_ETH_Init+0x8c>)
 800071a:	2200      	movs	r2, #0
 800071c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800071e:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <MX_ETH_Init+0x8c>)
 8000720:	2200      	movs	r2, #0
 8000722:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000724:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <MX_ETH_Init+0x8c>)
 8000726:	2200      	movs	r2, #0
 8000728:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800072a:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <MX_ETH_Init+0x84>)
 800072c:	4a16      	ldr	r2, [pc, #88]	@ (8000788 <MX_ETH_Init+0x8c>)
 800072e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000730:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <MX_ETH_Init+0x84>)
 8000732:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000736:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000738:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_ETH_Init+0x84>)
 800073a:	4a14      	ldr	r2, [pc, #80]	@ (800078c <MX_ETH_Init+0x90>)
 800073c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800073e:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <MX_ETH_Init+0x84>)
 8000740:	4a13      	ldr	r2, [pc, #76]	@ (8000790 <MX_ETH_Init+0x94>)
 8000742:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_ETH_Init+0x84>)
 8000746:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800074a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800074c:	480c      	ldr	r0, [pc, #48]	@ (8000780 <MX_ETH_Init+0x84>)
 800074e:	f000 fd6d 	bl	800122c <HAL_ETH_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f944 	bl	80009e4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800075c:	2238      	movs	r2, #56	@ 0x38
 800075e:	2100      	movs	r1, #0
 8000760:	480c      	ldr	r0, [pc, #48]	@ (8000794 <MX_ETH_Init+0x98>)
 8000762:	f003 f933 	bl	80039cc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_ETH_Init+0x98>)
 8000768:	2221      	movs	r2, #33	@ 0x21
 800076a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_ETH_Init+0x98>)
 800076e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000772:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000774:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <MX_ETH_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200001fc 	.word	0x200001fc
 8000784:	40028000 	.word	0x40028000
 8000788:	20001a9c 	.word	0x20001a9c
 800078c:	2000015c 	.word	0x2000015c
 8000790:	200000bc 	.word	0x200000bc
 8000794:	20000084 	.word	0x20000084

08000798 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800079c:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_UART7_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	@ (80007e8 <MX_UART7_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <MX_UART7_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_UART7_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_UART7_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <MX_UART7_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_UART7_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_UART7_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_UART7_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_UART7_Init+0x4c>)
 80007d0:	f001 ffda 	bl	8002788 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_UART7_Init+0x46>
  {
    Error_Handler();
 80007da:	f000 f903 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200002ac 	.word	0x200002ac
 80007e8:	40007800 	.word	0x40007800

080007ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007f0:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fa:	2204      	movs	r2, #4
 80007fc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000800:	2202      	movs	r2, #2
 8000802:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080c:	2202      	movs	r2, #2
 800080e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000812:	2201      	movs	r2, #1
 8000814:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000824:	2201      	movs	r2, #1
 8000826:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000830:	f001 fa03 	bl	8001c3a <HAL_PCD_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800083a:	f000 f8d3 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200002f4 	.word	0x200002f4

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	@ 0x30
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
 8000862:	4b5b      	ldr	r3, [pc, #364]	@ (80009d0 <MX_GPIO_Init+0x188>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a5a      	ldr	r2, [pc, #360]	@ (80009d0 <MX_GPIO_Init+0x188>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b58      	ldr	r3, [pc, #352]	@ (80009d0 <MX_GPIO_Init+0x188>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	61bb      	str	r3, [r7, #24]
 8000878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	4b54      	ldr	r3, [pc, #336]	@ (80009d0 <MX_GPIO_Init+0x188>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a53      	ldr	r2, [pc, #332]	@ (80009d0 <MX_GPIO_Init+0x188>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b51      	ldr	r3, [pc, #324]	@ (80009d0 <MX_GPIO_Init+0x188>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b4d      	ldr	r3, [pc, #308]	@ (80009d0 <MX_GPIO_Init+0x188>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a4c      	ldr	r2, [pc, #304]	@ (80009d0 <MX_GPIO_Init+0x188>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b4a      	ldr	r3, [pc, #296]	@ (80009d0 <MX_GPIO_Init+0x188>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b46      	ldr	r3, [pc, #280]	@ (80009d0 <MX_GPIO_Init+0x188>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a45      	ldr	r2, [pc, #276]	@ (80009d0 <MX_GPIO_Init+0x188>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b43      	ldr	r3, [pc, #268]	@ (80009d0 <MX_GPIO_Init+0x188>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	4b3f      	ldr	r3, [pc, #252]	@ (80009d0 <MX_GPIO_Init+0x188>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a3e      	ldr	r2, [pc, #248]	@ (80009d0 <MX_GPIO_Init+0x188>)
 80008d8:	f043 0310 	orr.w	r3, r3, #16
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b3c      	ldr	r3, [pc, #240]	@ (80009d0 <MX_GPIO_Init+0x188>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0310 	and.w	r3, r3, #16
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b38      	ldr	r3, [pc, #224]	@ (80009d0 <MX_GPIO_Init+0x188>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a37      	ldr	r2, [pc, #220]	@ (80009d0 <MX_GPIO_Init+0x188>)
 80008f4:	f043 0308 	orr.w	r3, r3, #8
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b35      	ldr	r3, [pc, #212]	@ (80009d0 <MX_GPIO_Init+0x188>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0308 	and.w	r3, r3, #8
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b31      	ldr	r3, [pc, #196]	@ (80009d0 <MX_GPIO_Init+0x188>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a30      	ldr	r2, [pc, #192]	@ (80009d0 <MX_GPIO_Init+0x188>)
 8000910:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b2e      	ldr	r3, [pc, #184]	@ (80009d0 <MX_GPIO_Init+0x188>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000928:	482a      	ldr	r0, [pc, #168]	@ (80009d4 <MX_GPIO_Init+0x18c>)
 800092a:	f001 f953 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2140      	movs	r1, #64	@ 0x40
 8000932:	4829      	ldr	r0, [pc, #164]	@ (80009d8 <MX_GPIO_Init+0x190>)
 8000934:	f001 f94e 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000938:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4823      	ldr	r0, [pc, #140]	@ (80009dc <MX_GPIO_Init+0x194>)
 8000950:	f000 ff94 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000954:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4819      	ldr	r0, [pc, #100]	@ (80009d4 <MX_GPIO_Init+0x18c>)
 800096e:	f000 ff85 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000972:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000984:	2307      	movs	r3, #7
 8000986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4814      	ldr	r0, [pc, #80]	@ (80009e0 <MX_GPIO_Init+0x198>)
 8000990:	f000 ff74 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000994:	2340      	movs	r3, #64	@ 0x40
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	480b      	ldr	r0, [pc, #44]	@ (80009d8 <MX_GPIO_Init+0x190>)
 80009ac:	f000 ff66 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009b0:	2380      	movs	r3, #128	@ 0x80
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <MX_GPIO_Init+0x190>)
 80009c4:	f000 ff5a 	bl	800187c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c8:	bf00      	nop
 80009ca:	3730      	adds	r7, #48	@ 0x30
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020400 	.word	0x40020400
 80009d8:	40021800 	.word	0x40021800
 80009dc:	40020800 	.word	0x40020800
 80009e0:	40020c00 	.word	0x40020c00

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error UART initialization");
 80009ec:	4801      	ldr	r0, [pc, #4]	@ (80009f4 <Error_Handler+0x10>)
 80009ee:	f002 fea5 	bl	800373c <iprintf>
 80009f2:	e7fb      	b.n	80009ec <Error_Handler+0x8>
 80009f4:	0800450c 	.word	0x0800450c

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a06:	4a0f      	ldr	r2, [pc, #60]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08e      	sub	sp, #56	@ 0x38
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a55      	ldr	r2, [pc, #340]	@ (8000bbc <HAL_ETH_MspInit+0x174>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	f040 80a4 	bne.w	8000bb4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
 8000a70:	4b53      	ldr	r3, [pc, #332]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a74:	4a52      	ldr	r2, [pc, #328]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000a76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7c:	4b50      	ldr	r3, [pc, #320]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a84:	623b      	str	r3, [r7, #32]
 8000a86:	6a3b      	ldr	r3, [r7, #32]
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	4b4c      	ldr	r3, [pc, #304]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a90:	4a4b      	ldr	r2, [pc, #300]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000a92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a98:	4b49      	ldr	r3, [pc, #292]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000aa0:	61fb      	str	r3, [r7, #28]
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
 8000aa8:	4b45      	ldr	r3, [pc, #276]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aac:	4a44      	ldr	r2, [pc, #272]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000aae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000ab2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab4:	4b42      	ldr	r3, [pc, #264]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000abc:	61bb      	str	r3, [r7, #24]
 8000abe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	4b3e      	ldr	r3, [pc, #248]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac8:	4a3d      	ldr	r2, [pc, #244]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000aca:	f043 0304 	orr.w	r3, r3, #4
 8000ace:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad0:	4b3b      	ldr	r3, [pc, #236]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	4b37      	ldr	r3, [pc, #220]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae4:	4a36      	ldr	r2, [pc, #216]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aec:	4b34      	ldr	r3, [pc, #208]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4b30      	ldr	r3, [pc, #192]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b00:	4a2f      	ldr	r2, [pc, #188]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000b02:	f043 0302 	orr.w	r3, r3, #2
 8000b06:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b08:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0c:	f003 0302 	and.w	r3, r3, #2
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	4b29      	ldr	r3, [pc, #164]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1c:	4a28      	ldr	r2, [pc, #160]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b22:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b24:	4b26      	ldr	r3, [pc, #152]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b30:	2332      	movs	r3, #50	@ 0x32
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b40:	230b      	movs	r3, #11
 8000b42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b48:	4619      	mov	r1, r3
 8000b4a:	481e      	ldr	r0, [pc, #120]	@ (8000bc4 <HAL_ETH_MspInit+0x17c>)
 8000b4c:	f000 fe96 	bl	800187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b50:	2386      	movs	r3, #134	@ 0x86
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b60:	230b      	movs	r3, #11
 8000b62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4817      	ldr	r0, [pc, #92]	@ (8000bc8 <HAL_ETH_MspInit+0x180>)
 8000b6c:	f000 fe86 	bl	800187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b82:	230b      	movs	r3, #11
 8000b84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480f      	ldr	r0, [pc, #60]	@ (8000bcc <HAL_ETH_MspInit+0x184>)
 8000b8e:	f000 fe75 	bl	800187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b92:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba4:	230b      	movs	r3, #11
 8000ba6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	4808      	ldr	r0, [pc, #32]	@ (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000bb0:	f000 fe64 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bb4:	bf00      	nop
 8000bb6:	3738      	adds	r7, #56	@ 0x38
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40028000 	.word	0x40028000
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020800 	.word	0x40020800
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	40020400 	.word	0x40020400
 8000bd0:	40021800 	.word	0x40021800

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	@ 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a19      	ldr	r2, [pc, #100]	@ (8000c58 <HAL_UART_MspInit+0x84>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d12c      	bne.n	8000c50 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <HAL_UART_MspInit+0x88>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfe:	4a17      	ldr	r2, [pc, #92]	@ (8000c5c <HAL_UART_MspInit+0x88>)
 8000c00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <HAL_UART_MspInit+0x88>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <HAL_UART_MspInit+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a10      	ldr	r2, [pc, #64]	@ (8000c5c <HAL_UART_MspInit+0x88>)
 8000c1c:	f043 0310 	orr.w	r3, r3, #16
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <HAL_UART_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0310 	and.w	r3, r3, #16
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000c2e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000c40:	2308      	movs	r3, #8
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <HAL_UART_MspInit+0x8c>)
 8000c4c:	f000 fe16 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8000c50:	bf00      	nop
 8000c52:	3728      	adds	r7, #40	@ 0x28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40007800 	.word	0x40007800
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40021000 	.word	0x40021000

08000c64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	@ 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c84:	d13f      	bne.n	8000d06 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b21      	ldr	r3, [pc, #132]	@ (8000d10 <HAL_PCD_MspInit+0xac>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a20      	ldr	r2, [pc, #128]	@ (8000d10 <HAL_PCD_MspInit+0xac>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b1e      	ldr	r3, [pc, #120]	@ (8000d10 <HAL_PCD_MspInit+0xac>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ca2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cb4:	230a      	movs	r3, #10
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4815      	ldr	r0, [pc, #84]	@ (8000d14 <HAL_PCD_MspInit+0xb0>)
 8000cc0:	f000 fddc 	bl	800187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480e      	ldr	r0, [pc, #56]	@ (8000d14 <HAL_PCD_MspInit+0xb0>)
 8000cda:	f000 fdcf 	bl	800187c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cde:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <HAL_PCD_MspInit+0xac>)
 8000ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	@ (8000d10 <HAL_PCD_MspInit+0xac>)
 8000ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ce8:	6353      	str	r3, [r2, #52]	@ 0x34
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <HAL_PCD_MspInit+0xac>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf2:	4a07      	ldr	r2, [pc, #28]	@ (8000d10 <HAL_PCD_MspInit+0xac>)
 8000cf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cfa:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <HAL_PCD_MspInit+0xac>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d06:	bf00      	nop
 8000d08:	3728      	adds	r7, #40	@ 0x28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020000 	.word	0x40020000

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <NMI_Handler+0x4>

08000d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <MemManage_Handler+0x4>

08000d30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6e:	f000 f933 	bl	8000fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	60f8      	str	r0, [r7, #12]
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	e00a      	b.n	8000d9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d88:	f3af 8000 	nop.w
 8000d8c:	4601      	mov	r1, r0
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	1c5a      	adds	r2, r3, #1
 8000d92:	60ba      	str	r2, [r7, #8]
 8000d94:	b2ca      	uxtb	r2, r1
 8000d96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	dbf0      	blt.n	8000d88 <_read+0x12>
  }

  return len;
 8000da6:	687b      	ldr	r3, [r7, #4]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	e009      	b.n	8000dd6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	1c5a      	adds	r2, r3, #1
 8000dc6:	60ba      	str	r2, [r7, #8]
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	dbf1      	blt.n	8000dc2 <_write+0x12>
  }
  return len;
 8000dde:	687b      	ldr	r3, [r7, #4]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <_close>:

int _close(int file)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e10:	605a      	str	r2, [r3, #4]
  return 0;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_isatty>:

int _isatty(int file)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e28:	2301      	movs	r3, #1
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b085      	sub	sp, #20
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e58:	4a14      	ldr	r2, [pc, #80]	@ (8000eac <_sbrk+0x5c>)
 8000e5a:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <_sbrk+0x60>)
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e64:	4b13      	ldr	r3, [pc, #76]	@ (8000eb4 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <_sbrk+0x64>)
 8000e6e:	4a12      	ldr	r2, [pc, #72]	@ (8000eb8 <_sbrk+0x68>)
 8000e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e72:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d207      	bcs.n	8000e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e80:	f002 fdf2 	bl	8003a68 <__errno>
 8000e84:	4603      	mov	r3, r0
 8000e86:	220c      	movs	r2, #12
 8000e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	e009      	b.n	8000ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e90:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e96:	4b07      	ldr	r3, [pc, #28]	@ (8000eb4 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	4a05      	ldr	r2, [pc, #20]	@ (8000eb4 <_sbrk+0x64>)
 8000ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20030000 	.word	0x20030000
 8000eb0:	00000400 	.word	0x00000400
 8000eb4:	20001aa4 	.word	0x20001aa4
 8000eb8:	20001bf8 	.word	0x20001bf8

08000ebc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <SystemInit+0x20>)
 8000ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ec6:	4a05      	ldr	r2, [pc, #20]	@ (8000edc <SystemInit+0x20>)
 8000ec8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ecc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ee0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ee4:	f7ff ffea 	bl	8000ebc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee8:	480c      	ldr	r0, [pc, #48]	@ (8000f1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eea:	490d      	ldr	r1, [pc, #52]	@ (8000f20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eec:	4a0d      	ldr	r2, [pc, #52]	@ (8000f24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef0:	e002      	b.n	8000ef8 <LoopCopyDataInit>

08000ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef6:	3304      	adds	r3, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000efc:	d3f9      	bcc.n	8000ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efe:	4a0a      	ldr	r2, [pc, #40]	@ (8000f28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f00:	4c0a      	ldr	r4, [pc, #40]	@ (8000f2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f04:	e001      	b.n	8000f0a <LoopFillZerobss>

08000f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f08:	3204      	adds	r2, #4

08000f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f0c:	d3fb      	bcc.n	8000f06 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f002 fdb1 	bl	8003a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f12:	f7ff fb35 	bl	8000580 <main>
  bx  lr    
 8000f16:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f18:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f24:	08004584 	.word	0x08004584
  ldr r2, =_sbss
 8000f28:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f2c:	20001bf8 	.word	0x20001bf8

08000f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC_IRQHandler>
	...

08000f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f38:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f74 <HAL_Init+0x40>)
 8000f3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f44:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0a      	ldr	r2, [pc, #40]	@ (8000f74 <HAL_Init+0x40>)
 8000f4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f50:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a07      	ldr	r2, [pc, #28]	@ (8000f74 <HAL_Init+0x40>)
 8000f56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f000 f931 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f62:	2000      	movs	r0, #0
 8000f64:	f000 f808 	bl	8000f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f68:	f7ff fd46 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023c00 	.word	0x40023c00

08000f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f80:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <HAL_InitTick+0x54>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <HAL_InitTick+0x58>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f93b 	bl	8001212 <HAL_SYSTICK_Config>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00e      	b.n	8000fc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	d80a      	bhi.n	8000fc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fac:	2200      	movs	r2, #0
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f000 f911 	bl	80011da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb8:	4a06      	ldr	r2, [pc, #24]	@ (8000fd4 <HAL_InitTick+0x5c>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e000      	b.n	8000fc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <HAL_IncTick+0x20>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <HAL_IncTick+0x24>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a04      	ldr	r2, [pc, #16]	@ (8000ffc <HAL_IncTick+0x24>)
 8000fea:	6013      	str	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	20001aa8 	.word	0x20001aa8

08001000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b03      	ldr	r3, [pc, #12]	@ (8001014 <HAL_GetTick+0x14>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20001aa8 	.word	0x20001aa8

08001018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001020:	f7ff ffee 	bl	8001000 <HAL_GetTick>
 8001024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001030:	d005      	beq.n	800103e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001032:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <HAL_Delay+0x44>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4413      	add	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800103e:	bf00      	nop
 8001040:	f7ff ffde 	bl	8001000 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	429a      	cmp	r2, r3
 800104e:	d8f7      	bhi.n	8001040 <HAL_Delay+0x28>
  {
  }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000008 	.word	0x20000008

08001060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800107c:	4013      	ands	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001088:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800108c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001092:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	60d3      	str	r3, [r2, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ac:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	f003 0307 	and.w	r3, r3, #7
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	@ (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	@ (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	@ 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	@ 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001190:	d301      	bcc.n	8001196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001192:	2301      	movs	r3, #1
 8001194:	e00f      	b.n	80011b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <SysTick_Config+0x40>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119e:	210f      	movs	r1, #15
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f7ff ff8e 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a8:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <SysTick_Config+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ae:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <SysTick_Config+0x40>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff47 	bl	8001060 <__NVIC_SetPriorityGrouping>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ec:	f7ff ff5c 	bl	80010a8 <__NVIC_GetPriorityGrouping>
 80011f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	6978      	ldr	r0, [r7, #20]
 80011f8:	f7ff ff8e 	bl	8001118 <NVIC_EncodePriority>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff5d 	bl	80010c4 <__NVIC_SetPriority>
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ffb0 	bl	8001180 <SysTick_Config>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e06c      	b.n	8001318 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001244:	2b00      	cmp	r3, #0
 8001246:	d106      	bne.n	8001256 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2223      	movs	r2, #35	@ 0x23
 800124c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff fbf9 	bl	8000a48 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b31      	ldr	r3, [pc, #196]	@ (8001320 <HAL_ETH_Init+0xf4>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125e:	4a30      	ldr	r2, [pc, #192]	@ (8001320 <HAL_ETH_Init+0xf4>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001264:	6453      	str	r3, [r2, #68]	@ 0x44
 8001266:	4b2e      	ldr	r3, [pc, #184]	@ (8001320 <HAL_ETH_Init+0xf4>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001272:	4b2c      	ldr	r3, [pc, #176]	@ (8001324 <HAL_ETH_Init+0xf8>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4a2b      	ldr	r2, [pc, #172]	@ (8001324 <HAL_ETH_Init+0xf8>)
 8001278:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800127c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800127e:	4b29      	ldr	r3, [pc, #164]	@ (8001324 <HAL_ETH_Init+0xf8>)
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	4927      	ldr	r1, [pc, #156]	@ (8001324 <HAL_ETH_Init+0xf8>)
 8001288:	4313      	orrs	r3, r2
 800128a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800128c:	4b25      	ldr	r3, [pc, #148]	@ (8001324 <HAL_ETH_Init+0xf8>)
 800128e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012a8:	f7ff feaa 	bl	8001000 <HAL_GetTick>
 80012ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012ae:	e011      	b.n	80012d4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012b0:	f7ff fea6 	bl	8001000 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012be:	d909      	bls.n	80012d4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2204      	movs	r2, #4
 80012c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	22e0      	movs	r2, #224	@ 0xe0
 80012cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e021      	b.n	8001318 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1e4      	bne.n	80012b0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 f958 	bl	800159c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f9ff 	bl	80016f0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 fa55 	bl	80017a2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	461a      	mov	r2, r3
 80012fe:	2100      	movs	r1, #0
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f9bd 	bl	8001680 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2210      	movs	r2, #16
 8001312:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40013800 	.word	0x40013800

08001328 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	4b51      	ldr	r3, [pc, #324]	@ (8001484 <ETH_SetMACConfig+0x15c>)
 800133e:	4013      	ands	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	7c1b      	ldrb	r3, [r3, #16]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d102      	bne.n	8001350 <ETH_SetMACConfig+0x28>
 800134a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800134e:	e000      	b.n	8001352 <ETH_SetMACConfig+0x2a>
 8001350:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	7c5b      	ldrb	r3, [r3, #17]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d102      	bne.n	8001360 <ETH_SetMACConfig+0x38>
 800135a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800135e:	e000      	b.n	8001362 <ETH_SetMACConfig+0x3a>
 8001360:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001362:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001368:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	7fdb      	ldrb	r3, [r3, #31]
 800136e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001370:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001376:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	7f92      	ldrb	r2, [r2, #30]
 800137c:	2a00      	cmp	r2, #0
 800137e:	d102      	bne.n	8001386 <ETH_SetMACConfig+0x5e>
 8001380:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001384:	e000      	b.n	8001388 <ETH_SetMACConfig+0x60>
 8001386:	2200      	movs	r2, #0
                        macconf->Speed |
 8001388:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	7f1b      	ldrb	r3, [r3, #28]
 800138e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001390:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001396:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	791b      	ldrb	r3, [r3, #4]
 800139c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800139e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80013a6:	2a00      	cmp	r2, #0
 80013a8:	d102      	bne.n	80013b0 <ETH_SetMACConfig+0x88>
 80013aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013ae:	e000      	b.n	80013b2 <ETH_SetMACConfig+0x8a>
 80013b0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	7bdb      	ldrb	r3, [r3, #15]
 80013b8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013ba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80013c8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013ca:	4313      	orrs	r3, r2
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f7ff fe18 	bl	8001018 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80013fe:	4013      	ands	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001406:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800140e:	2a00      	cmp	r2, #0
 8001410:	d101      	bne.n	8001416 <ETH_SetMACConfig+0xee>
 8001412:	2280      	movs	r2, #128	@ 0x80
 8001414:	e000      	b.n	8001418 <ETH_SetMACConfig+0xf0>
 8001416:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001418:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800141e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001426:	2a01      	cmp	r2, #1
 8001428:	d101      	bne.n	800142e <ETH_SetMACConfig+0x106>
 800142a:	2208      	movs	r2, #8
 800142c:	e000      	b.n	8001430 <ETH_SetMACConfig+0x108>
 800142e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001430:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001438:	2a01      	cmp	r2, #1
 800143a:	d101      	bne.n	8001440 <ETH_SetMACConfig+0x118>
 800143c:	2204      	movs	r2, #4
 800143e:	e000      	b.n	8001442 <ETH_SetMACConfig+0x11a>
 8001440:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001442:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800144a:	2a01      	cmp	r2, #1
 800144c:	d101      	bne.n	8001452 <ETH_SetMACConfig+0x12a>
 800144e:	2202      	movs	r2, #2
 8001450:	e000      	b.n	8001454 <ETH_SetMACConfig+0x12c>
 8001452:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001454:	4313      	orrs	r3, r2
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800146c:	2001      	movs	r0, #1
 800146e:	f7ff fdd3 	bl	8001018 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	619a      	str	r2, [r3, #24]
}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	ff20810f 	.word	0xff20810f

08001488 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001598 <ETH_SetDMAConfig+0x110>)
 80014a2:	4013      	ands	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	7b1b      	ldrb	r3, [r3, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <ETH_SetDMAConfig+0x2c>
 80014ae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80014b2:	e000      	b.n	80014b6 <ETH_SetDMAConfig+0x2e>
 80014b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	7b5b      	ldrb	r3, [r3, #13]
 80014ba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014bc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	7f52      	ldrb	r2, [r2, #29]
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d102      	bne.n	80014cc <ETH_SetDMAConfig+0x44>
 80014c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80014ca:	e000      	b.n	80014ce <ETH_SetDMAConfig+0x46>
 80014cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014ce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	7b9b      	ldrb	r3, [r3, #14]
 80014d4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014d6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	7f1b      	ldrb	r3, [r3, #28]
 80014e2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80014e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	7f9b      	ldrb	r3, [r3, #30]
 80014ea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014ec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014fa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014fc:	4313      	orrs	r3, r2
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4313      	orrs	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800150c:	461a      	mov	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800151e:	2001      	movs	r0, #1
 8001520:	f7ff fd7a 	bl	8001018 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800152c:	461a      	mov	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	791b      	ldrb	r3, [r3, #4]
 8001536:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800153c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001542:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001548:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001550:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001552:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001558:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800155a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001560:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800156a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800156e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800157c:	2001      	movs	r0, #1
 800157e:	f7ff fd4b 	bl	8001018 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	f8de3f23 	.word	0xf8de3f23

0800159c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b0a6      	sub	sp, #152	@ 0x98
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80015a4:	2301      	movs	r3, #1
 80015a6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80015aa:	2301      	movs	r3, #1
 80015ac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80015ba:	2301      	movs	r3, #1
 80015bc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80015c6:	2301      	movs	r3, #1
 80015c8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80015d8:	2300      	movs	r3, #0
 80015da:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80015fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001602:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001604:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001608:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001610:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001614:	4619      	mov	r1, r3
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff fe86 	bl	8001328 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800161c:	2301      	movs	r3, #1
 800161e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001620:	2301      	movs	r3, #1
 8001622:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001624:	2301      	movs	r3, #1
 8001626:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800162a:	2301      	movs	r3, #1
 800162c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800163e:	2300      	movs	r3, #0
 8001640:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001642:	2301      	movs	r3, #1
 8001644:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001648:	2301      	movs	r3, #1
 800164a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800164c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001650:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001652:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001656:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001658:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800165c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800165e:	2301      	movs	r3, #1
 8001660:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001664:	2300      	movs	r3, #0
 8001666:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	4619      	mov	r1, r3
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ff08 	bl	8001488 <ETH_SetDMAConfig>
}
 8001678:	bf00      	nop
 800167a:	3798      	adds	r7, #152	@ 0x98
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3305      	adds	r3, #5
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	3204      	adds	r2, #4
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	4313      	orrs	r3, r2
 800169c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <ETH_MACAddressConfig+0x68>)
 80016a2:	4413      	add	r3, r2
 80016a4:	461a      	mov	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3303      	adds	r3, #3
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	061a      	lsls	r2, r3, #24
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3302      	adds	r3, #2
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3301      	adds	r3, #1
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	4313      	orrs	r3, r2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	7812      	ldrb	r2, [r2, #0]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <ETH_MACAddressConfig+0x6c>)
 80016d2:	4413      	add	r3, r2
 80016d4:	461a      	mov	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	6013      	str	r3, [r2, #0]
}
 80016da:	bf00      	nop
 80016dc:	371c      	adds	r7, #28
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40028040 	.word	0x40028040
 80016ec:	40028044 	.word	0x40028044

080016f0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	e03e      	b.n	800177c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68d9      	ldr	r1, [r3, #12]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	440b      	add	r3, r1
 800170e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2200      	movs	r2, #0
 800171a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	3206      	adds	r2, #6
 8001730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d80c      	bhi.n	8001760 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68d9      	ldr	r1, [r3, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	440b      	add	r3, r1
 8001758:	461a      	mov	r2, r3
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	e004      	b.n	800176a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	461a      	mov	r2, r3
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3301      	adds	r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b03      	cmp	r3, #3
 8001780:	d9bd      	bls.n	80016fe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001794:	611a      	str	r2, [r3, #16]
}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b085      	sub	sp, #20
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	e046      	b.n	800183e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6919      	ldr	r1, [r3, #16]
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	440b      	add	r3, r1
 80017c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2200      	movs	r2, #0
 80017cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2200      	movs	r2, #0
 80017de:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	2200      	movs	r2, #0
 80017e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80017ec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 80017f4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001802:	68b9      	ldr	r1, [r7, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	3212      	adds	r2, #18
 800180a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d80c      	bhi.n	800182e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6919      	ldr	r1, [r3, #16]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	440b      	add	r3, r1
 8001826:	461a      	mov	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	e004      	b.n	8001838 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	461a      	mov	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3301      	adds	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2b03      	cmp	r3, #3
 8001842:	d9b5      	bls.n	80017b0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800186e:	60da      	str	r2, [r3, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	@ 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	e177      	b.n	8001b88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001898:	2201      	movs	r2, #1
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	f040 8166 	bne.w	8001b82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d005      	beq.n	80018ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d130      	bne.n	8001930 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	2203      	movs	r2, #3
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001904:	2201      	movs	r2, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f003 0201 	and.w	r2, r3, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	2b03      	cmp	r3, #3
 800193a:	d017      	beq.n	800196c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2203      	movs	r2, #3
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d123      	bne.n	80019c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	08da      	lsrs	r2, r3, #3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3208      	adds	r2, #8
 8001980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	220f      	movs	r2, #15
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	691a      	ldr	r2, [r3, #16]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	08da      	lsrs	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3208      	adds	r2, #8
 80019ba:	69b9      	ldr	r1, [r7, #24]
 80019bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2203      	movs	r2, #3
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0203 	and.w	r2, r3, #3
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f000 80c0 	beq.w	8001b82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b66      	ldr	r3, [pc, #408]	@ (8001ba0 <HAL_GPIO_Init+0x324>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0a:	4a65      	ldr	r2, [pc, #404]	@ (8001ba0 <HAL_GPIO_Init+0x324>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a12:	4b63      	ldr	r3, [pc, #396]	@ (8001ba0 <HAL_GPIO_Init+0x324>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a1e:	4a61      	ldr	r2, [pc, #388]	@ (8001ba4 <HAL_GPIO_Init+0x328>)
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	220f      	movs	r2, #15
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a58      	ldr	r2, [pc, #352]	@ (8001ba8 <HAL_GPIO_Init+0x32c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d037      	beq.n	8001aba <HAL_GPIO_Init+0x23e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a57      	ldr	r2, [pc, #348]	@ (8001bac <HAL_GPIO_Init+0x330>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d031      	beq.n	8001ab6 <HAL_GPIO_Init+0x23a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a56      	ldr	r2, [pc, #344]	@ (8001bb0 <HAL_GPIO_Init+0x334>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d02b      	beq.n	8001ab2 <HAL_GPIO_Init+0x236>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a55      	ldr	r2, [pc, #340]	@ (8001bb4 <HAL_GPIO_Init+0x338>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d025      	beq.n	8001aae <HAL_GPIO_Init+0x232>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a54      	ldr	r2, [pc, #336]	@ (8001bb8 <HAL_GPIO_Init+0x33c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d01f      	beq.n	8001aaa <HAL_GPIO_Init+0x22e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a53      	ldr	r2, [pc, #332]	@ (8001bbc <HAL_GPIO_Init+0x340>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d019      	beq.n	8001aa6 <HAL_GPIO_Init+0x22a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a52      	ldr	r2, [pc, #328]	@ (8001bc0 <HAL_GPIO_Init+0x344>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0x226>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a51      	ldr	r2, [pc, #324]	@ (8001bc4 <HAL_GPIO_Init+0x348>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00d      	beq.n	8001a9e <HAL_GPIO_Init+0x222>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a50      	ldr	r2, [pc, #320]	@ (8001bc8 <HAL_GPIO_Init+0x34c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d007      	beq.n	8001a9a <HAL_GPIO_Init+0x21e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4f      	ldr	r2, [pc, #316]	@ (8001bcc <HAL_GPIO_Init+0x350>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_GPIO_Init+0x21a>
 8001a92:	2309      	movs	r3, #9
 8001a94:	e012      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001a96:	230a      	movs	r3, #10
 8001a98:	e010      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001a9a:	2308      	movs	r3, #8
 8001a9c:	e00e      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001a9e:	2307      	movs	r3, #7
 8001aa0:	e00c      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aa2:	2306      	movs	r3, #6
 8001aa4:	e00a      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	e008      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aaa:	2304      	movs	r3, #4
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e004      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e002      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aba:	2300      	movs	r3, #0
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	f002 0203 	and.w	r2, r2, #3
 8001ac2:	0092      	lsls	r2, r2, #2
 8001ac4:	4093      	lsls	r3, r2
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001acc:	4935      	ldr	r1, [pc, #212]	@ (8001ba4 <HAL_GPIO_Init+0x328>)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ada:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd0 <HAL_GPIO_Init+0x354>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001afe:	4a34      	ldr	r2, [pc, #208]	@ (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b04:	4b32      	ldr	r3, [pc, #200]	@ (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b28:	4a29      	ldr	r2, [pc, #164]	@ (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b2e:	4b28      	ldr	r3, [pc, #160]	@ (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b52:	4a1f      	ldr	r2, [pc, #124]	@ (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b7c:	4a14      	ldr	r2, [pc, #80]	@ (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3301      	adds	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	2b0f      	cmp	r3, #15
 8001b8c:	f67f ae84 	bls.w	8001898 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3724      	adds	r7, #36	@ 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40013800 	.word	0x40013800
 8001ba8:	40020000 	.word	0x40020000
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	40020800 	.word	0x40020800
 8001bb4:	40020c00 	.word	0x40020c00
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40021400 	.word	0x40021400
 8001bc0:	40021800 	.word	0x40021800
 8001bc4:	40021c00 	.word	0x40021c00
 8001bc8:	40022000 	.word	0x40022000
 8001bcc:	40022400 	.word	0x40022400
 8001bd0:	40013c00 	.word	0x40013c00

08001bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
 8001be0:	4613      	mov	r3, r2
 8001be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be4:	787b      	ldrb	r3, [r7, #1]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf0:	e003      	b.n	8001bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	041a      	lsls	r2, r3, #16
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	619a      	str	r2, [r3, #24]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b085      	sub	sp, #20
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c18:	887a      	ldrh	r2, [r7, #2]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	041a      	lsls	r2, r3, #16
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43d9      	mvns	r1, r3
 8001c24:	887b      	ldrh	r3, [r7, #2]
 8001c26:	400b      	ands	r3, r1
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	619a      	str	r2, [r3, #24]
}
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b086      	sub	sp, #24
 8001c3e:	af02      	add	r7, sp, #8
 8001c40:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e101      	b.n	8001e50 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d106      	bne.n	8001c6c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7fe fffc 	bl	8000c64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2203      	movs	r2, #3
 8001c70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c7a:	d102      	bne.n	8001c82 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f001 f9fa 	bl	8003080 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	7c1a      	ldrb	r2, [r3, #16]
 8001c94:	f88d 2000 	strb.w	r2, [sp]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c9c:	f001 f98c 	bl	8002fb8 <USB_CoreInit>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2202      	movs	r2, #2
 8001caa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e0ce      	b.n	8001e50 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f001 f9f2 	bl	80030a2 <USB_SetCurrentMode>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0bf      	b.n	8001e50 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]
 8001cd4:	e04a      	b.n	8001d6c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cd6:	7bfa      	ldrb	r2, [r7, #15]
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	3315      	adds	r3, #21
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cea:	7bfa      	ldrb	r2, [r7, #15]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3314      	adds	r3, #20
 8001cfa:	7bfa      	ldrb	r2, [r7, #15]
 8001cfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	b298      	uxth	r0, r3
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	440b      	add	r3, r1
 8001d10:	332e      	adds	r3, #46	@ 0x2e
 8001d12:	4602      	mov	r2, r0
 8001d14:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	3318      	adds	r3, #24
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	331c      	adds	r3, #28
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3320      	adds	r3, #32
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	3324      	adds	r3, #36	@ 0x24
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	791b      	ldrb	r3, [r3, #4]
 8001d70:	7bfa      	ldrb	r2, [r7, #15]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d3af      	bcc.n	8001cd6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	73fb      	strb	r3, [r7, #15]
 8001d7a:	e044      	b.n	8001e06 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dea:	7bfa      	ldrb	r2, [r7, #15]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	3301      	adds	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	791b      	ldrb	r3, [r3, #4]
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d3b5      	bcc.n	8001d7c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7c1a      	ldrb	r2, [r3, #16]
 8001e18:	f88d 2000 	strb.w	r2, [sp]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e20:	f001 f98c 	bl	800313c <USB_DevInit>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d005      	beq.n	8001e36 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00c      	b.n	8001e50 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f001 fb54 	bl	80034f6 <USB_DevDisconnect>

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e267      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d075      	beq.n	8001f62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e76:	4b88      	ldr	r3, [pc, #544]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d00c      	beq.n	8001e9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e82:	4b85      	ldr	r3, [pc, #532]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d112      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8e:	4b82      	ldr	r3, [pc, #520]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e9a:	d10b      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9c:	4b7e      	ldr	r3, [pc, #504]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d05b      	beq.n	8001f60 <HAL_RCC_OscConfig+0x108>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d157      	bne.n	8001f60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e242      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ebc:	d106      	bne.n	8001ecc <HAL_RCC_OscConfig+0x74>
 8001ebe:	4b76      	ldr	r3, [pc, #472]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a75      	ldr	r2, [pc, #468]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e01d      	b.n	8001f08 <HAL_RCC_OscConfig+0xb0>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x98>
 8001ed6:	4b70      	ldr	r3, [pc, #448]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a6f      	ldr	r2, [pc, #444]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b6d      	ldr	r3, [pc, #436]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a6c      	ldr	r2, [pc, #432]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e00b      	b.n	8001f08 <HAL_RCC_OscConfig+0xb0>
 8001ef0:	4b69      	ldr	r3, [pc, #420]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a68      	ldr	r2, [pc, #416]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	4b66      	ldr	r3, [pc, #408]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a65      	ldr	r2, [pc, #404]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d013      	beq.n	8001f38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7ff f876 	bl	8001000 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f18:	f7ff f872 	bl	8001000 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	@ 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e207      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0xc0>
 8001f36:	e014      	b.n	8001f62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff f862 	bl	8001000 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff f85e 	bl	8001000 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	@ 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e1f3      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f52:	4b51      	ldr	r3, [pc, #324]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0xe8>
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d063      	beq.n	8002036 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00b      	beq.n	8001f92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f7a:	4b47      	ldr	r3, [pc, #284]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d11c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f86:	4b44      	ldr	r3, [pc, #272]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d116      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	4b41      	ldr	r3, [pc, #260]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_RCC_OscConfig+0x152>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e1c7      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001faa:	4b3b      	ldr	r3, [pc, #236]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4937      	ldr	r1, [pc, #220]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fbe:	e03a      	b.n	8002036 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d020      	beq.n	800200a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc8:	4b34      	ldr	r3, [pc, #208]	@ (800209c <HAL_RCC_OscConfig+0x244>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fce:	f7ff f817 	bl	8001000 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd6:	f7ff f813 	bl	8001000 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e1a8      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff4:	4b28      	ldr	r3, [pc, #160]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4925      	ldr	r1, [pc, #148]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]
 8002008:	e015      	b.n	8002036 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800200a:	4b24      	ldr	r3, [pc, #144]	@ (800209c <HAL_RCC_OscConfig+0x244>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7fe fff6 	bl	8001000 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002018:	f7fe fff2 	bl	8001000 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e187      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202a:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d036      	beq.n	80020b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d016      	beq.n	8002078 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204a:	4b15      	ldr	r3, [pc, #84]	@ (80020a0 <HAL_RCC_OscConfig+0x248>)
 800204c:	2201      	movs	r2, #1
 800204e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002050:	f7fe ffd6 	bl	8001000 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002058:	f7fe ffd2 	bl	8001000 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e167      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206a:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <HAL_RCC_OscConfig+0x240>)
 800206c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x200>
 8002076:	e01b      	b.n	80020b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002078:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <HAL_RCC_OscConfig+0x248>)
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207e:	f7fe ffbf 	bl	8001000 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002084:	e00e      	b.n	80020a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002086:	f7fe ffbb 	bl	8001000 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d907      	bls.n	80020a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e150      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
 8002098:	40023800 	.word	0x40023800
 800209c:	42470000 	.word	0x42470000
 80020a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a4:	4b88      	ldr	r3, [pc, #544]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80020a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1ea      	bne.n	8002086 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 8097 	beq.w	80021ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c2:	4b81      	ldr	r3, [pc, #516]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10f      	bne.n	80020ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	4b7d      	ldr	r3, [pc, #500]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	4a7c      	ldr	r2, [pc, #496]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020de:	4b7a      	ldr	r3, [pc, #488]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ea:	2301      	movs	r3, #1
 80020ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ee:	4b77      	ldr	r3, [pc, #476]	@ (80022cc <HAL_RCC_OscConfig+0x474>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d118      	bne.n	800212c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020fa:	4b74      	ldr	r3, [pc, #464]	@ (80022cc <HAL_RCC_OscConfig+0x474>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a73      	ldr	r2, [pc, #460]	@ (80022cc <HAL_RCC_OscConfig+0x474>)
 8002100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002106:	f7fe ff7b 	bl	8001000 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210e:	f7fe ff77 	bl	8001000 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e10c      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002120:	4b6a      	ldr	r3, [pc, #424]	@ (80022cc <HAL_RCC_OscConfig+0x474>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x2ea>
 8002134:	4b64      	ldr	r3, [pc, #400]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002138:	4a63      	ldr	r2, [pc, #396]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002140:	e01c      	b.n	800217c <HAL_RCC_OscConfig+0x324>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b05      	cmp	r3, #5
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x30c>
 800214a:	4b5f      	ldr	r3, [pc, #380]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800214e:	4a5e      	ldr	r2, [pc, #376]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	6713      	str	r3, [r2, #112]	@ 0x70
 8002156:	4b5c      	ldr	r3, [pc, #368]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215a:	4a5b      	ldr	r2, [pc, #364]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6713      	str	r3, [r2, #112]	@ 0x70
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0x324>
 8002164:	4b58      	ldr	r3, [pc, #352]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002168:	4a57      	ldr	r2, [pc, #348]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002170:	4b55      	ldr	r3, [pc, #340]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002174:	4a54      	ldr	r2, [pc, #336]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002176:	f023 0304 	bic.w	r3, r3, #4
 800217a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d015      	beq.n	80021b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002184:	f7fe ff3c 	bl	8001000 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800218c:	f7fe ff38 	bl	8001000 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e0cb      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a2:	4b49      	ldr	r3, [pc, #292]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0ee      	beq.n	800218c <HAL_RCC_OscConfig+0x334>
 80021ae:	e014      	b.n	80021da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b0:	f7fe ff26 	bl	8001000 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b8:	f7fe ff22 	bl	8001000 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e0b5      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ce:	4b3e      	ldr	r3, [pc, #248]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1ee      	bne.n	80021b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021da:	7dfb      	ldrb	r3, [r7, #23]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d105      	bne.n	80021ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e0:	4b39      	ldr	r3, [pc, #228]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80021e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e4:	4a38      	ldr	r2, [pc, #224]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80021e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80a1 	beq.w	8002338 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021f6:	4b34      	ldr	r3, [pc, #208]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d05c      	beq.n	80022bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d141      	bne.n	800228e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220a:	4b31      	ldr	r3, [pc, #196]	@ (80022d0 <HAL_RCC_OscConfig+0x478>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe fef6 	bl	8001000 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002218:	f7fe fef2 	bl	8001000 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e087      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222a:	4b27      	ldr	r3, [pc, #156]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69da      	ldr	r2, [r3, #28]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002244:	019b      	lsls	r3, r3, #6
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224c:	085b      	lsrs	r3, r3, #1
 800224e:	3b01      	subs	r3, #1
 8002250:	041b      	lsls	r3, r3, #16
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002258:	061b      	lsls	r3, r3, #24
 800225a:	491b      	ldr	r1, [pc, #108]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002260:	4b1b      	ldr	r3, [pc, #108]	@ (80022d0 <HAL_RCC_OscConfig+0x478>)
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7fe fecb 	bl	8001000 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226e:	f7fe fec7 	bl	8001000 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e05c      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002280:	4b11      	ldr	r3, [pc, #68]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x416>
 800228c:	e054      	b.n	8002338 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228e:	4b10      	ldr	r3, [pc, #64]	@ (80022d0 <HAL_RCC_OscConfig+0x478>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7fe feb4 	bl	8001000 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229c:	f7fe feb0 	bl	8001000 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e045      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ae:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_RCC_OscConfig+0x470>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x444>
 80022ba:	e03d      	b.n	8002338 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d107      	bne.n	80022d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e038      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40007000 	.word	0x40007000
 80022d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002344 <HAL_RCC_OscConfig+0x4ec>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d028      	beq.n	8002334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d121      	bne.n	8002334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d11a      	bne.n	8002334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002304:	4013      	ands	r3, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800230a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800230c:	4293      	cmp	r3, r2
 800230e:	d111      	bne.n	8002334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231a:	085b      	lsrs	r3, r3, #1
 800231c:	3b01      	subs	r3, #1
 800231e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002320:	429a      	cmp	r2, r3
 8002322:	d107      	bne.n	8002334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800

08002348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0cc      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800235c:	4b68      	ldr	r3, [pc, #416]	@ (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d90c      	bls.n	8002384 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b65      	ldr	r3, [pc, #404]	@ (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	4b63      	ldr	r3, [pc, #396]	@ (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0b8      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800239c:	4b59      	ldr	r3, [pc, #356]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a58      	ldr	r2, [pc, #352]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b4:	4b53      	ldr	r3, [pc, #332]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4a52      	ldr	r2, [pc, #328]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c0:	4b50      	ldr	r3, [pc, #320]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	494d      	ldr	r1, [pc, #308]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d044      	beq.n	8002468 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	4b47      	ldr	r3, [pc, #284]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d119      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e07f      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d003      	beq.n	8002406 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002402:	2b03      	cmp	r3, #3
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002406:	4b3f      	ldr	r3, [pc, #252]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e06f      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002416:	4b3b      	ldr	r3, [pc, #236]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e067      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002426:	4b37      	ldr	r3, [pc, #220]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f023 0203 	bic.w	r2, r3, #3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4934      	ldr	r1, [pc, #208]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	4313      	orrs	r3, r2
 8002436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002438:	f7fe fde2 	bl	8001000 <HAL_GetTick>
 800243c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	e00a      	b.n	8002456 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002440:	f7fe fdde 	bl	8001000 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e04f      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	4b2b      	ldr	r3, [pc, #172]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 020c 	and.w	r2, r3, #12
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	429a      	cmp	r2, r3
 8002466:	d1eb      	bne.n	8002440 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002468:	4b25      	ldr	r3, [pc, #148]	@ (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 030f 	and.w	r3, r3, #15
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d20c      	bcs.n	8002490 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	4b22      	ldr	r3, [pc, #136]	@ (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b20      	ldr	r3, [pc, #128]	@ (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e032      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800249c:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4916      	ldr	r1, [pc, #88]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ba:	4b12      	ldr	r3, [pc, #72]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	490e      	ldr	r1, [pc, #56]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ce:	f000 f821 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 80024d2:	4602      	mov	r2, r0
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	490a      	ldr	r1, [pc, #40]	@ (8002508 <HAL_RCC_ClockConfig+0x1c0>)
 80024e0:	5ccb      	ldrb	r3, [r1, r3]
 80024e2:	fa22 f303 	lsr.w	r3, r2, r3
 80024e6:	4a09      	ldr	r2, [pc, #36]	@ (800250c <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024ea:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe fd42 	bl	8000f78 <HAL_InitTick>

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023c00 	.word	0x40023c00
 8002504:	40023800 	.word	0x40023800
 8002508:	08004528 	.word	0x08004528
 800250c:	20000000 	.word	0x20000000
 8002510:	20000004 	.word	0x20000004

08002514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002518:	b094      	sub	sp, #80	@ 0x50
 800251a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002520:	2300      	movs	r3, #0
 8002522:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002524:	2300      	movs	r3, #0
 8002526:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800252c:	4b79      	ldr	r3, [pc, #484]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x200>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b08      	cmp	r3, #8
 8002536:	d00d      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x40>
 8002538:	2b08      	cmp	r3, #8
 800253a:	f200 80e1 	bhi.w	8002700 <HAL_RCC_GetSysClockFreq+0x1ec>
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x34>
 8002542:	2b04      	cmp	r3, #4
 8002544:	d003      	beq.n	800254e <HAL_RCC_GetSysClockFreq+0x3a>
 8002546:	e0db      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002548:	4b73      	ldr	r3, [pc, #460]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x204>)
 800254a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800254c:	e0db      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800254e:	4b73      	ldr	r3, [pc, #460]	@ (800271c <HAL_RCC_GetSysClockFreq+0x208>)
 8002550:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002552:	e0d8      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002554:	4b6f      	ldr	r3, [pc, #444]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x200>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800255c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800255e:	4b6d      	ldr	r3, [pc, #436]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x200>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d063      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800256a:	4b6a      	ldr	r3, [pc, #424]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x200>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	099b      	lsrs	r3, r3, #6
 8002570:	2200      	movs	r2, #0
 8002572:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002574:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800257c:	633b      	str	r3, [r7, #48]	@ 0x30
 800257e:	2300      	movs	r3, #0
 8002580:	637b      	str	r3, [r7, #52]	@ 0x34
 8002582:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002586:	4622      	mov	r2, r4
 8002588:	462b      	mov	r3, r5
 800258a:	f04f 0000 	mov.w	r0, #0
 800258e:	f04f 0100 	mov.w	r1, #0
 8002592:	0159      	lsls	r1, r3, #5
 8002594:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002598:	0150      	lsls	r0, r2, #5
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4621      	mov	r1, r4
 80025a0:	1a51      	subs	r1, r2, r1
 80025a2:	6139      	str	r1, [r7, #16]
 80025a4:	4629      	mov	r1, r5
 80025a6:	eb63 0301 	sbc.w	r3, r3, r1
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025b8:	4659      	mov	r1, fp
 80025ba:	018b      	lsls	r3, r1, #6
 80025bc:	4651      	mov	r1, sl
 80025be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025c2:	4651      	mov	r1, sl
 80025c4:	018a      	lsls	r2, r1, #6
 80025c6:	4651      	mov	r1, sl
 80025c8:	ebb2 0801 	subs.w	r8, r2, r1
 80025cc:	4659      	mov	r1, fp
 80025ce:	eb63 0901 	sbc.w	r9, r3, r1
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025e6:	4690      	mov	r8, r2
 80025e8:	4699      	mov	r9, r3
 80025ea:	4623      	mov	r3, r4
 80025ec:	eb18 0303 	adds.w	r3, r8, r3
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	462b      	mov	r3, r5
 80025f4:	eb49 0303 	adc.w	r3, r9, r3
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002606:	4629      	mov	r1, r5
 8002608:	024b      	lsls	r3, r1, #9
 800260a:	4621      	mov	r1, r4
 800260c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002610:	4621      	mov	r1, r4
 8002612:	024a      	lsls	r2, r1, #9
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800261a:	2200      	movs	r2, #0
 800261c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800261e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002620:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002624:	f7fd fe34 	bl	8000290 <__aeabi_uldivmod>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4613      	mov	r3, r2
 800262e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002630:	e058      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002632:	4b38      	ldr	r3, [pc, #224]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x200>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	099b      	lsrs	r3, r3, #6
 8002638:	2200      	movs	r2, #0
 800263a:	4618      	mov	r0, r3
 800263c:	4611      	mov	r1, r2
 800263e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002642:	623b      	str	r3, [r7, #32]
 8002644:	2300      	movs	r3, #0
 8002646:	627b      	str	r3, [r7, #36]	@ 0x24
 8002648:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800264c:	4642      	mov	r2, r8
 800264e:	464b      	mov	r3, r9
 8002650:	f04f 0000 	mov.w	r0, #0
 8002654:	f04f 0100 	mov.w	r1, #0
 8002658:	0159      	lsls	r1, r3, #5
 800265a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800265e:	0150      	lsls	r0, r2, #5
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4641      	mov	r1, r8
 8002666:	ebb2 0a01 	subs.w	sl, r2, r1
 800266a:	4649      	mov	r1, r9
 800266c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800267c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002680:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002684:	ebb2 040a 	subs.w	r4, r2, sl
 8002688:	eb63 050b 	sbc.w	r5, r3, fp
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	00eb      	lsls	r3, r5, #3
 8002696:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800269a:	00e2      	lsls	r2, r4, #3
 800269c:	4614      	mov	r4, r2
 800269e:	461d      	mov	r5, r3
 80026a0:	4643      	mov	r3, r8
 80026a2:	18e3      	adds	r3, r4, r3
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	464b      	mov	r3, r9
 80026a8:	eb45 0303 	adc.w	r3, r5, r3
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ba:	4629      	mov	r1, r5
 80026bc:	028b      	lsls	r3, r1, #10
 80026be:	4621      	mov	r1, r4
 80026c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026c4:	4621      	mov	r1, r4
 80026c6:	028a      	lsls	r2, r1, #10
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026ce:	2200      	movs	r2, #0
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	61fa      	str	r2, [r7, #28]
 80026d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026d8:	f7fd fdda 	bl	8000290 <__aeabi_uldivmod>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4613      	mov	r3, r2
 80026e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	0c1b      	lsrs	r3, r3, #16
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	3301      	adds	r3, #1
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80026f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026fe:	e002      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002700:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x204>)
 8002702:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002708:	4618      	mov	r0, r3
 800270a:	3750      	adds	r7, #80	@ 0x50
 800270c:	46bd      	mov	sp, r7
 800270e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
 8002718:	00f42400 	.word	0x00f42400
 800271c:	007a1200 	.word	0x007a1200

08002720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002724:	4b03      	ldr	r3, [pc, #12]	@ (8002734 <HAL_RCC_GetHCLKFreq+0x14>)
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000000 	.word	0x20000000

08002738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800273c:	f7ff fff0 	bl	8002720 <HAL_RCC_GetHCLKFreq>
 8002740:	4602      	mov	r2, r0
 8002742:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	0a9b      	lsrs	r3, r3, #10
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	4903      	ldr	r1, [pc, #12]	@ (800275c <HAL_RCC_GetPCLK1Freq+0x24>)
 800274e:	5ccb      	ldrb	r3, [r1, r3]
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002754:	4618      	mov	r0, r3
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40023800 	.word	0x40023800
 800275c:	08004538 	.word	0x08004538

08002760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002764:	f7ff ffdc 	bl	8002720 <HAL_RCC_GetHCLKFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <HAL_RCC_GetPCLK2Freq+0x20>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	0b5b      	lsrs	r3, r3, #13
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4903      	ldr	r1, [pc, #12]	@ (8002784 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	08004538 	.word	0x08004538

08002788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e042      	b.n	8002820 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d106      	bne.n	80027b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fe fa10 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2224      	movs	r2, #36	@ 0x24
 80027b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f97f 	bl	8002ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	@ 0x28
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	4613      	mov	r3, r2
 8002836:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b20      	cmp	r3, #32
 8002846:	f040 8081 	bne.w	800294c <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <HAL_UART_Receive+0x2e>
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e079      	b.n	800294e <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2222      	movs	r2, #34	@ 0x22
 8002864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800286e:	f7fe fbc7 	bl	8001000 <HAL_GetTick>
 8002872:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	88fa      	ldrh	r2, [r7, #6]
 8002878:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	88fa      	ldrh	r2, [r7, #6]
 800287e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002888:	d108      	bne.n	800289c <HAL_UART_Receive+0x74>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d104      	bne.n	800289c <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	e003      	b.n	80028a4 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80028a4:	e047      	b.n	8002936 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2200      	movs	r2, #0
 80028ae:	2120      	movs	r1, #32
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f850 	bl	8002956 <UART_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e042      	b.n	800294e <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10c      	bne.n	80028e8 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028da:	b29a      	uxth	r2, r3
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	3302      	adds	r3, #2
 80028e4:	61bb      	str	r3, [r7, #24]
 80028e6:	e01f      	b.n	8002928 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028f0:	d007      	beq.n	8002902 <HAL_UART_Receive+0xda>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10a      	bne.n	8002910 <HAL_UART_Receive+0xe8>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	b2da      	uxtb	r2, r3
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	701a      	strb	r2, [r3, #0]
 800290e:	e008      	b.n	8002922 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800291c:	b2da      	uxtb	r2, r3
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3301      	adds	r3, #1
 8002926:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1b2      	bne.n	80028a6 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	e000      	b.n	800294e <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800294c:	2302      	movs	r3, #2
  }
}
 800294e:	4618      	mov	r0, r3
 8002950:	3720      	adds	r7, #32
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b086      	sub	sp, #24
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	603b      	str	r3, [r7, #0]
 8002962:	4613      	mov	r3, r2
 8002964:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002966:	e03b      	b.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	d037      	beq.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002970:	f7fe fb46 	bl	8001000 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	6a3a      	ldr	r2, [r7, #32]
 800297c:	429a      	cmp	r2, r3
 800297e:	d302      	bcc.n	8002986 <UART_WaitOnFlagUntilTimeout+0x30>
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e03a      	b.n	8002a00 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d023      	beq.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b80      	cmp	r3, #128	@ 0x80
 800299c:	d020      	beq.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b40      	cmp	r3, #64	@ 0x40
 80029a2:	d01d      	beq.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d116      	bne.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f81d 	bl	8002a08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2208      	movs	r2, #8
 80029d2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e00f      	b.n	8002a00 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	4013      	ands	r3, r2
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	bf0c      	ite	eq
 80029f0:	2301      	moveq	r3, #1
 80029f2:	2300      	movne	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d0b4      	beq.n	8002968 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b095      	sub	sp, #84	@ 0x54
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	330c      	adds	r3, #12
 8002a16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a1a:	e853 3f00 	ldrex	r3, [r3]
 8002a1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	330c      	adds	r3, #12
 8002a2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a30:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a38:	e841 2300 	strex	r3, r2, [r1]
 8002a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e5      	bne.n	8002a10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3314      	adds	r3, #20
 8002a4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	e853 3f00 	ldrex	r3, [r3]
 8002a52:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	3314      	adds	r3, #20
 8002a62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a6c:	e841 2300 	strex	r3, r2, [r1]
 8002a70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1e5      	bne.n	8002a44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d119      	bne.n	8002ab4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	330c      	adds	r3, #12
 8002a86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	e853 3f00 	ldrex	r3, [r3]
 8002a8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f023 0310 	bic.w	r3, r3, #16
 8002a96:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	330c      	adds	r3, #12
 8002a9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002aa0:	61ba      	str	r2, [r7, #24]
 8002aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa4:	6979      	ldr	r1, [r7, #20]
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	e841 2300 	strex	r3, r2, [r1]
 8002aac:	613b      	str	r3, [r7, #16]
   return(result);
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1e5      	bne.n	8002a80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ac2:	bf00      	nop
 8002ac4:	3754      	adds	r7, #84	@ 0x54
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad4:	b0c0      	sub	sp, #256	@ 0x100
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aec:	68d9      	ldr	r1, [r3, #12]
 8002aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	ea40 0301 	orr.w	r3, r0, r1
 8002af8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b28:	f021 010c 	bic.w	r1, r1, #12
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b36:	430b      	orrs	r3, r1
 8002b38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b4a:	6999      	ldr	r1, [r3, #24]
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	ea40 0301 	orr.w	r3, r0, r1
 8002b56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4b8f      	ldr	r3, [pc, #572]	@ (8002d9c <UART_SetConfig+0x2cc>)
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d005      	beq.n	8002b70 <UART_SetConfig+0xa0>
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4b8d      	ldr	r3, [pc, #564]	@ (8002da0 <UART_SetConfig+0x2d0>)
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d104      	bne.n	8002b7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b70:	f7ff fdf6 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 8002b74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b78:	e003      	b.n	8002b82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b7a:	f7ff fddd 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 8002b7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b8c:	f040 810c 	bne.w	8002da8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b94:	2200      	movs	r2, #0
 8002b96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002ba2:	4622      	mov	r2, r4
 8002ba4:	462b      	mov	r3, r5
 8002ba6:	1891      	adds	r1, r2, r2
 8002ba8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002baa:	415b      	adcs	r3, r3
 8002bac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	eb12 0801 	adds.w	r8, r2, r1
 8002bb8:	4629      	mov	r1, r5
 8002bba:	eb43 0901 	adc.w	r9, r3, r1
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bd2:	4690      	mov	r8, r2
 8002bd4:	4699      	mov	r9, r3
 8002bd6:	4623      	mov	r3, r4
 8002bd8:	eb18 0303 	adds.w	r3, r8, r3
 8002bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002be0:	462b      	mov	r3, r5
 8002be2:	eb49 0303 	adc.w	r3, r9, r3
 8002be6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002bf6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002bfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002bfe:	460b      	mov	r3, r1
 8002c00:	18db      	adds	r3, r3, r3
 8002c02:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c04:	4613      	mov	r3, r2
 8002c06:	eb42 0303 	adc.w	r3, r2, r3
 8002c0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002c14:	f7fd fb3c 	bl	8000290 <__aeabi_uldivmod>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4b61      	ldr	r3, [pc, #388]	@ (8002da4 <UART_SetConfig+0x2d4>)
 8002c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	011c      	lsls	r4, r3, #4
 8002c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c38:	4642      	mov	r2, r8
 8002c3a:	464b      	mov	r3, r9
 8002c3c:	1891      	adds	r1, r2, r2
 8002c3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c40:	415b      	adcs	r3, r3
 8002c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c48:	4641      	mov	r1, r8
 8002c4a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c4e:	4649      	mov	r1, r9
 8002c50:	eb43 0b01 	adc.w	fp, r3, r1
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c68:	4692      	mov	sl, r2
 8002c6a:	469b      	mov	fp, r3
 8002c6c:	4643      	mov	r3, r8
 8002c6e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c76:	464b      	mov	r3, r9
 8002c78:	eb4b 0303 	adc.w	r3, fp, r3
 8002c7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c94:	460b      	mov	r3, r1
 8002c96:	18db      	adds	r3, r3, r3
 8002c98:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ca0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ca2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002ca6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002caa:	f7fd faf1 	bl	8000290 <__aeabi_uldivmod>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8002da4 <UART_SetConfig+0x2d4>)
 8002cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	2264      	movs	r2, #100	@ 0x64
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	1acb      	subs	r3, r1, r3
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002cca:	4b36      	ldr	r3, [pc, #216]	@ (8002da4 <UART_SetConfig+0x2d4>)
 8002ccc:	fba3 2302 	umull	r2, r3, r3, r2
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002cd8:	441c      	add	r4, r3
 8002cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ce4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ce8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002cec:	4642      	mov	r2, r8
 8002cee:	464b      	mov	r3, r9
 8002cf0:	1891      	adds	r1, r2, r2
 8002cf2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002cf4:	415b      	adcs	r3, r3
 8002cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002cfc:	4641      	mov	r1, r8
 8002cfe:	1851      	adds	r1, r2, r1
 8002d00:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d02:	4649      	mov	r1, r9
 8002d04:	414b      	adcs	r3, r1
 8002d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002d14:	4659      	mov	r1, fp
 8002d16:	00cb      	lsls	r3, r1, #3
 8002d18:	4651      	mov	r1, sl
 8002d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d1e:	4651      	mov	r1, sl
 8002d20:	00ca      	lsls	r2, r1, #3
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	4642      	mov	r2, r8
 8002d2a:	189b      	adds	r3, r3, r2
 8002d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d30:	464b      	mov	r3, r9
 8002d32:	460a      	mov	r2, r1
 8002d34:	eb42 0303 	adc.w	r3, r2, r3
 8002d38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d50:	460b      	mov	r3, r1
 8002d52:	18db      	adds	r3, r3, r3
 8002d54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d56:	4613      	mov	r3, r2
 8002d58:	eb42 0303 	adc.w	r3, r2, r3
 8002d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d66:	f7fd fa93 	bl	8000290 <__aeabi_uldivmod>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002da4 <UART_SetConfig+0x2d4>)
 8002d70:	fba3 1302 	umull	r1, r3, r3, r2
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	2164      	movs	r1, #100	@ 0x64
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	3332      	adds	r3, #50	@ 0x32
 8002d82:	4a08      	ldr	r2, [pc, #32]	@ (8002da4 <UART_SetConfig+0x2d4>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	f003 0207 	and.w	r2, r3, #7
 8002d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4422      	add	r2, r4
 8002d96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d98:	e106      	b.n	8002fa8 <UART_SetConfig+0x4d8>
 8002d9a:	bf00      	nop
 8002d9c:	40011000 	.word	0x40011000
 8002da0:	40011400 	.word	0x40011400
 8002da4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dac:	2200      	movs	r2, #0
 8002dae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002db2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002db6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002dba:	4642      	mov	r2, r8
 8002dbc:	464b      	mov	r3, r9
 8002dbe:	1891      	adds	r1, r2, r2
 8002dc0:	6239      	str	r1, [r7, #32]
 8002dc2:	415b      	adcs	r3, r3
 8002dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dca:	4641      	mov	r1, r8
 8002dcc:	1854      	adds	r4, r2, r1
 8002dce:	4649      	mov	r1, r9
 8002dd0:	eb43 0501 	adc.w	r5, r3, r1
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	00eb      	lsls	r3, r5, #3
 8002dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002de2:	00e2      	lsls	r2, r4, #3
 8002de4:	4614      	mov	r4, r2
 8002de6:	461d      	mov	r5, r3
 8002de8:	4643      	mov	r3, r8
 8002dea:	18e3      	adds	r3, r4, r3
 8002dec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002df0:	464b      	mov	r3, r9
 8002df2:	eb45 0303 	adc.w	r3, r5, r3
 8002df6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e16:	4629      	mov	r1, r5
 8002e18:	008b      	lsls	r3, r1, #2
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e20:	4621      	mov	r1, r4
 8002e22:	008a      	lsls	r2, r1, #2
 8002e24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e28:	f7fd fa32 	bl	8000290 <__aeabi_uldivmod>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4b60      	ldr	r3, [pc, #384]	@ (8002fb4 <UART_SetConfig+0x4e4>)
 8002e32:	fba3 2302 	umull	r2, r3, r3, r2
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	011c      	lsls	r4, r3, #4
 8002e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e4c:	4642      	mov	r2, r8
 8002e4e:	464b      	mov	r3, r9
 8002e50:	1891      	adds	r1, r2, r2
 8002e52:	61b9      	str	r1, [r7, #24]
 8002e54:	415b      	adcs	r3, r3
 8002e56:	61fb      	str	r3, [r7, #28]
 8002e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	1851      	adds	r1, r2, r1
 8002e60:	6139      	str	r1, [r7, #16]
 8002e62:	4649      	mov	r1, r9
 8002e64:	414b      	adcs	r3, r1
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e74:	4659      	mov	r1, fp
 8002e76:	00cb      	lsls	r3, r1, #3
 8002e78:	4651      	mov	r1, sl
 8002e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e7e:	4651      	mov	r1, sl
 8002e80:	00ca      	lsls	r2, r1, #3
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	4642      	mov	r2, r8
 8002e8a:	189b      	adds	r3, r3, r2
 8002e8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e90:	464b      	mov	r3, r9
 8002e92:	460a      	mov	r2, r1
 8002e94:	eb42 0303 	adc.w	r3, r2, r3
 8002e98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ea6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002eb4:	4649      	mov	r1, r9
 8002eb6:	008b      	lsls	r3, r1, #2
 8002eb8:	4641      	mov	r1, r8
 8002eba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	008a      	lsls	r2, r1, #2
 8002ec2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002ec6:	f7fd f9e3 	bl	8000290 <__aeabi_uldivmod>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4b38      	ldr	r3, [pc, #224]	@ (8002fb4 <UART_SetConfig+0x4e4>)
 8002ed2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	2264      	movs	r2, #100	@ 0x64
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	1acb      	subs	r3, r1, r3
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	3332      	adds	r3, #50	@ 0x32
 8002ee4:	4a33      	ldr	r2, [pc, #204]	@ (8002fb4 <UART_SetConfig+0x4e4>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ef0:	441c      	add	r4, r3
 8002ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	673b      	str	r3, [r7, #112]	@ 0x70
 8002efa:	677a      	str	r2, [r7, #116]	@ 0x74
 8002efc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002f00:	4642      	mov	r2, r8
 8002f02:	464b      	mov	r3, r9
 8002f04:	1891      	adds	r1, r2, r2
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	415b      	adcs	r3, r3
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f10:	4641      	mov	r1, r8
 8002f12:	1851      	adds	r1, r2, r1
 8002f14:	6039      	str	r1, [r7, #0]
 8002f16:	4649      	mov	r1, r9
 8002f18:	414b      	adcs	r3, r1
 8002f1a:	607b      	str	r3, [r7, #4]
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f28:	4659      	mov	r1, fp
 8002f2a:	00cb      	lsls	r3, r1, #3
 8002f2c:	4651      	mov	r1, sl
 8002f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f32:	4651      	mov	r1, sl
 8002f34:	00ca      	lsls	r2, r1, #3
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4642      	mov	r2, r8
 8002f3e:	189b      	adds	r3, r3, r2
 8002f40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f42:	464b      	mov	r3, r9
 8002f44:	460a      	mov	r2, r1
 8002f46:	eb42 0303 	adc.w	r3, r2, r3
 8002f4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f56:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f64:	4649      	mov	r1, r9
 8002f66:	008b      	lsls	r3, r1, #2
 8002f68:	4641      	mov	r1, r8
 8002f6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f6e:	4641      	mov	r1, r8
 8002f70:	008a      	lsls	r2, r1, #2
 8002f72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f76:	f7fd f98b 	bl	8000290 <__aeabi_uldivmod>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb4 <UART_SetConfig+0x4e4>)
 8002f80:	fba3 1302 	umull	r1, r3, r3, r2
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	2164      	movs	r1, #100	@ 0x64
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	3332      	adds	r3, #50	@ 0x32
 8002f92:	4a08      	ldr	r2, [pc, #32]	@ (8002fb4 <UART_SetConfig+0x4e4>)
 8002f94:	fba2 2303 	umull	r2, r3, r2, r3
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	f003 020f 	and.w	r2, r3, #15
 8002f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4422      	add	r2, r4
 8002fa6:	609a      	str	r2, [r3, #8]
}
 8002fa8:	bf00      	nop
 8002faa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb4:	51eb851f 	.word	0x51eb851f

08002fb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fb8:	b084      	sub	sp, #16
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	f107 001c 	add.w	r0, r7, #28
 8002fc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d123      	bne.n	800301a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002fe6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002ffa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d105      	bne.n	800300e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 faa0 	bl	8003554 <USB_CoreReset>
 8003014:	4603      	mov	r3, r0
 8003016:	73fb      	strb	r3, [r7, #15]
 8003018:	e01b      	b.n	8003052 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fa94 	bl	8003554 <USB_CoreReset>
 800302c:	4603      	mov	r3, r0
 800302e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003030:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003034:	2b00      	cmp	r3, #0
 8003036:	d106      	bne.n	8003046 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	639a      	str	r2, [r3, #56]	@ 0x38
 8003044:	e005      	b.n	8003052 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003052:	7fbb      	ldrb	r3, [r7, #30]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d10b      	bne.n	8003070 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f043 0206 	orr.w	r2, r3, #6
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f043 0220 	orr.w	r2, r3, #32
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003070:	7bfb      	ldrb	r3, [r7, #15]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800307c:	b004      	add	sp, #16
 800307e:	4770      	bx	lr

08003080 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f023 0201 	bic.w	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	460b      	mov	r3, r1
 80030ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d115      	bne.n	80030f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80030d0:	200a      	movs	r0, #10
 80030d2:	f7fd ffa1 	bl	8001018 <HAL_Delay>
      ms += 10U;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	330a      	adds	r3, #10
 80030da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 fa2b 	bl	8003538 <USB_GetMode>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d01e      	beq.n	8003126 <USB_SetCurrentMode+0x84>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80030ec:	d9f0      	bls.n	80030d0 <USB_SetCurrentMode+0x2e>
 80030ee:	e01a      	b.n	8003126 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d115      	bne.n	8003122 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003102:	200a      	movs	r0, #10
 8003104:	f7fd ff88 	bl	8001018 <HAL_Delay>
      ms += 10U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	330a      	adds	r3, #10
 800310c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fa12 	bl	8003538 <USB_GetMode>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <USB_SetCurrentMode+0x84>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2bc7      	cmp	r3, #199	@ 0xc7
 800311e:	d9f0      	bls.n	8003102 <USB_SetCurrentMode+0x60>
 8003120:	e001      	b.n	8003126 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e005      	b.n	8003132 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2bc8      	cmp	r3, #200	@ 0xc8
 800312a:	d101      	bne.n	8003130 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800313c:	b084      	sub	sp, #16
 800313e:	b580      	push	{r7, lr}
 8003140:	b086      	sub	sp, #24
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800314a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	e009      	b.n	8003170 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	3340      	adds	r3, #64	@ 0x40
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	2200      	movs	r2, #0
 8003168:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	3301      	adds	r3, #1
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	2b0e      	cmp	r3, #14
 8003174:	d9f2      	bls.n	800315c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003176:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800317a:	2b00      	cmp	r3, #0
 800317c:	d11c      	bne.n	80031b8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800318c:	f043 0302 	orr.w	r3, r3, #2
 8003190:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003196:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ae:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80031b6:	e00b      	b.n	80031d0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031bc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80031d6:	461a      	mov	r2, r3
 80031d8:	2300      	movs	r3, #0
 80031da:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031dc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d10d      	bne.n	8003200 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80031e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d104      	bne.n	80031f6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80031ec:	2100      	movs	r1, #0
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f968 	bl	80034c4 <USB_SetDevSpeed>
 80031f4:	e008      	b.n	8003208 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80031f6:	2101      	movs	r1, #1
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f963 	bl	80034c4 <USB_SetDevSpeed>
 80031fe:	e003      	b.n	8003208 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003200:	2103      	movs	r1, #3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f95e 	bl	80034c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003208:	2110      	movs	r1, #16
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f8fa 	bl	8003404 <USB_FlushTxFifo>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f924 	bl	8003468 <USB_FlushRxFifo>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003230:	461a      	mov	r2, r3
 8003232:	2300      	movs	r3, #0
 8003234:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800323c:	461a      	mov	r2, r3
 800323e:	2300      	movs	r3, #0
 8003240:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003248:	461a      	mov	r2, r3
 800324a:	2300      	movs	r3, #0
 800324c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800324e:	2300      	movs	r3, #0
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	e043      	b.n	80032dc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4413      	add	r3, r2
 800325c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003266:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800326a:	d118      	bne.n	800329e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4413      	add	r3, r2
 800327a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800327e:	461a      	mov	r2, r3
 8003280:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e013      	b.n	80032b0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003294:	461a      	mov	r2, r3
 8003296:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	e008      	b.n	80032b0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032aa:	461a      	mov	r2, r3
 80032ac:	2300      	movs	r3, #0
 80032ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032bc:	461a      	mov	r2, r3
 80032be:	2300      	movs	r3, #0
 80032c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	015a      	lsls	r2, r3, #5
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032ce:	461a      	mov	r2, r3
 80032d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80032d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	3301      	adds	r3, #1
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80032e0:	461a      	mov	r2, r3
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d3b5      	bcc.n	8003254 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032e8:	2300      	movs	r3, #0
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	e043      	b.n	8003376 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003300:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003304:	d118      	bne.n	8003338 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10a      	bne.n	8003322 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4413      	add	r3, r2
 8003314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003318:	461a      	mov	r2, r3
 800331a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800331e:	6013      	str	r3, [r2, #0]
 8003320:	e013      	b.n	800334a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4413      	add	r3, r2
 800332a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800332e:	461a      	mov	r2, r3
 8003330:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e008      	b.n	800334a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003344:	461a      	mov	r2, r3
 8003346:	2300      	movs	r3, #0
 8003348:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4413      	add	r3, r2
 8003352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003356:	461a      	mov	r2, r3
 8003358:	2300      	movs	r3, #0
 800335a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4413      	add	r3, r2
 8003364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003368:	461a      	mov	r2, r3
 800336a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800336e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	3301      	adds	r3, #1
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800337a:	461a      	mov	r2, r3
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4293      	cmp	r3, r2
 8003380:	d3b5      	bcc.n	80032ee <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003390:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003394:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80033a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80033a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d105      	bne.n	80033b8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f043 0210 	orr.w	r2, r3, #16
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699a      	ldr	r2, [r3, #24]
 80033bc:	4b10      	ldr	r3, [pc, #64]	@ (8003400 <USB_DevInit+0x2c4>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80033c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f043 0208 	orr.w	r2, r3, #8
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80033d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d107      	bne.n	80033f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033e8:	f043 0304 	orr.w	r3, r3, #4
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033fc:	b004      	add	sp, #16
 80033fe:	4770      	bx	lr
 8003400:	803c3800 	.word	0x803c3800

08003404 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	3301      	adds	r3, #1
 8003416:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800341e:	d901      	bls.n	8003424 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e01b      	b.n	800345c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	daf2      	bge.n	8003412 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	019b      	lsls	r3, r3, #6
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3301      	adds	r3, #1
 8003440:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003448:	d901      	bls.n	800344e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e006      	b.n	800345c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b20      	cmp	r3, #32
 8003458:	d0f0      	beq.n	800343c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3301      	adds	r3, #1
 8003478:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003480:	d901      	bls.n	8003486 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e018      	b.n	80034b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	daf2      	bge.n	8003474 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2210      	movs	r2, #16
 8003496:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3301      	adds	r3, #1
 800349c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80034a4:	d901      	bls.n	80034aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e006      	b.n	80034b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0310 	and.w	r3, r3, #16
 80034b2:	2b10      	cmp	r3, #16
 80034b4:	d0f0      	beq.n	8003498 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	68f9      	ldr	r1, [r7, #12]
 80034e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034e4:	4313      	orrs	r3, r2
 80034e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b085      	sub	sp, #20
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003510:	f023 0303 	bic.w	r3, r3, #3
 8003514:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003524:	f043 0302 	orr.w	r3, r3, #2
 8003528:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f003 0301 	and.w	r3, r3, #1
}
 8003548:	4618      	mov	r0, r3
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3301      	adds	r3, #1
 8003564:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800356c:	d901      	bls.n	8003572 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e01b      	b.n	80035aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	daf2      	bge.n	8003560 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f043 0201 	orr.w	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3301      	adds	r3, #1
 800358e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003596:	d901      	bls.n	800359c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e006      	b.n	80035aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d0f0      	beq.n	800358a <USB_CoreReset+0x36>

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
	...

080035b8 <std>:
 80035b8:	2300      	movs	r3, #0
 80035ba:	b510      	push	{r4, lr}
 80035bc:	4604      	mov	r4, r0
 80035be:	e9c0 3300 	strd	r3, r3, [r0]
 80035c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035c6:	6083      	str	r3, [r0, #8]
 80035c8:	8181      	strh	r1, [r0, #12]
 80035ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80035cc:	81c2      	strh	r2, [r0, #14]
 80035ce:	6183      	str	r3, [r0, #24]
 80035d0:	4619      	mov	r1, r3
 80035d2:	2208      	movs	r2, #8
 80035d4:	305c      	adds	r0, #92	@ 0x5c
 80035d6:	f000 f9f9 	bl	80039cc <memset>
 80035da:	4b0d      	ldr	r3, [pc, #52]	@ (8003610 <std+0x58>)
 80035dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80035de:	4b0d      	ldr	r3, [pc, #52]	@ (8003614 <std+0x5c>)
 80035e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80035e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003618 <std+0x60>)
 80035e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80035e6:	4b0d      	ldr	r3, [pc, #52]	@ (800361c <std+0x64>)
 80035e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80035ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003620 <std+0x68>)
 80035ec:	6224      	str	r4, [r4, #32]
 80035ee:	429c      	cmp	r4, r3
 80035f0:	d006      	beq.n	8003600 <std+0x48>
 80035f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80035f6:	4294      	cmp	r4, r2
 80035f8:	d002      	beq.n	8003600 <std+0x48>
 80035fa:	33d0      	adds	r3, #208	@ 0xd0
 80035fc:	429c      	cmp	r4, r3
 80035fe:	d105      	bne.n	800360c <std+0x54>
 8003600:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003608:	f000 ba58 	b.w	8003abc <__retarget_lock_init_recursive>
 800360c:	bd10      	pop	{r4, pc}
 800360e:	bf00      	nop
 8003610:	0800381d 	.word	0x0800381d
 8003614:	0800383f 	.word	0x0800383f
 8003618:	08003877 	.word	0x08003877
 800361c:	0800389b 	.word	0x0800389b
 8003620:	20001aac 	.word	0x20001aac

08003624 <stdio_exit_handler>:
 8003624:	4a02      	ldr	r2, [pc, #8]	@ (8003630 <stdio_exit_handler+0xc>)
 8003626:	4903      	ldr	r1, [pc, #12]	@ (8003634 <stdio_exit_handler+0x10>)
 8003628:	4803      	ldr	r0, [pc, #12]	@ (8003638 <stdio_exit_handler+0x14>)
 800362a:	f000 b869 	b.w	8003700 <_fwalk_sglue>
 800362e:	bf00      	nop
 8003630:	2000000c 	.word	0x2000000c
 8003634:	0800435d 	.word	0x0800435d
 8003638:	2000001c 	.word	0x2000001c

0800363c <cleanup_stdio>:
 800363c:	6841      	ldr	r1, [r0, #4]
 800363e:	4b0c      	ldr	r3, [pc, #48]	@ (8003670 <cleanup_stdio+0x34>)
 8003640:	4299      	cmp	r1, r3
 8003642:	b510      	push	{r4, lr}
 8003644:	4604      	mov	r4, r0
 8003646:	d001      	beq.n	800364c <cleanup_stdio+0x10>
 8003648:	f000 fe88 	bl	800435c <_fflush_r>
 800364c:	68a1      	ldr	r1, [r4, #8]
 800364e:	4b09      	ldr	r3, [pc, #36]	@ (8003674 <cleanup_stdio+0x38>)
 8003650:	4299      	cmp	r1, r3
 8003652:	d002      	beq.n	800365a <cleanup_stdio+0x1e>
 8003654:	4620      	mov	r0, r4
 8003656:	f000 fe81 	bl	800435c <_fflush_r>
 800365a:	68e1      	ldr	r1, [r4, #12]
 800365c:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <cleanup_stdio+0x3c>)
 800365e:	4299      	cmp	r1, r3
 8003660:	d004      	beq.n	800366c <cleanup_stdio+0x30>
 8003662:	4620      	mov	r0, r4
 8003664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003668:	f000 be78 	b.w	800435c <_fflush_r>
 800366c:	bd10      	pop	{r4, pc}
 800366e:	bf00      	nop
 8003670:	20001aac 	.word	0x20001aac
 8003674:	20001b14 	.word	0x20001b14
 8003678:	20001b7c 	.word	0x20001b7c

0800367c <global_stdio_init.part.0>:
 800367c:	b510      	push	{r4, lr}
 800367e:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <global_stdio_init.part.0+0x30>)
 8003680:	4c0b      	ldr	r4, [pc, #44]	@ (80036b0 <global_stdio_init.part.0+0x34>)
 8003682:	4a0c      	ldr	r2, [pc, #48]	@ (80036b4 <global_stdio_init.part.0+0x38>)
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	4620      	mov	r0, r4
 8003688:	2200      	movs	r2, #0
 800368a:	2104      	movs	r1, #4
 800368c:	f7ff ff94 	bl	80035b8 <std>
 8003690:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003694:	2201      	movs	r2, #1
 8003696:	2109      	movs	r1, #9
 8003698:	f7ff ff8e 	bl	80035b8 <std>
 800369c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80036a0:	2202      	movs	r2, #2
 80036a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036a6:	2112      	movs	r1, #18
 80036a8:	f7ff bf86 	b.w	80035b8 <std>
 80036ac:	20001be4 	.word	0x20001be4
 80036b0:	20001aac 	.word	0x20001aac
 80036b4:	08003625 	.word	0x08003625

080036b8 <__sfp_lock_acquire>:
 80036b8:	4801      	ldr	r0, [pc, #4]	@ (80036c0 <__sfp_lock_acquire+0x8>)
 80036ba:	f000 ba00 	b.w	8003abe <__retarget_lock_acquire_recursive>
 80036be:	bf00      	nop
 80036c0:	20001bed 	.word	0x20001bed

080036c4 <__sfp_lock_release>:
 80036c4:	4801      	ldr	r0, [pc, #4]	@ (80036cc <__sfp_lock_release+0x8>)
 80036c6:	f000 b9fb 	b.w	8003ac0 <__retarget_lock_release_recursive>
 80036ca:	bf00      	nop
 80036cc:	20001bed 	.word	0x20001bed

080036d0 <__sinit>:
 80036d0:	b510      	push	{r4, lr}
 80036d2:	4604      	mov	r4, r0
 80036d4:	f7ff fff0 	bl	80036b8 <__sfp_lock_acquire>
 80036d8:	6a23      	ldr	r3, [r4, #32]
 80036da:	b11b      	cbz	r3, 80036e4 <__sinit+0x14>
 80036dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036e0:	f7ff bff0 	b.w	80036c4 <__sfp_lock_release>
 80036e4:	4b04      	ldr	r3, [pc, #16]	@ (80036f8 <__sinit+0x28>)
 80036e6:	6223      	str	r3, [r4, #32]
 80036e8:	4b04      	ldr	r3, [pc, #16]	@ (80036fc <__sinit+0x2c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f5      	bne.n	80036dc <__sinit+0xc>
 80036f0:	f7ff ffc4 	bl	800367c <global_stdio_init.part.0>
 80036f4:	e7f2      	b.n	80036dc <__sinit+0xc>
 80036f6:	bf00      	nop
 80036f8:	0800363d 	.word	0x0800363d
 80036fc:	20001be4 	.word	0x20001be4

08003700 <_fwalk_sglue>:
 8003700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003704:	4607      	mov	r7, r0
 8003706:	4688      	mov	r8, r1
 8003708:	4614      	mov	r4, r2
 800370a:	2600      	movs	r6, #0
 800370c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003710:	f1b9 0901 	subs.w	r9, r9, #1
 8003714:	d505      	bpl.n	8003722 <_fwalk_sglue+0x22>
 8003716:	6824      	ldr	r4, [r4, #0]
 8003718:	2c00      	cmp	r4, #0
 800371a:	d1f7      	bne.n	800370c <_fwalk_sglue+0xc>
 800371c:	4630      	mov	r0, r6
 800371e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003722:	89ab      	ldrh	r3, [r5, #12]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d907      	bls.n	8003738 <_fwalk_sglue+0x38>
 8003728:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800372c:	3301      	adds	r3, #1
 800372e:	d003      	beq.n	8003738 <_fwalk_sglue+0x38>
 8003730:	4629      	mov	r1, r5
 8003732:	4638      	mov	r0, r7
 8003734:	47c0      	blx	r8
 8003736:	4306      	orrs	r6, r0
 8003738:	3568      	adds	r5, #104	@ 0x68
 800373a:	e7e9      	b.n	8003710 <_fwalk_sglue+0x10>

0800373c <iprintf>:
 800373c:	b40f      	push	{r0, r1, r2, r3}
 800373e:	b507      	push	{r0, r1, r2, lr}
 8003740:	4906      	ldr	r1, [pc, #24]	@ (800375c <iprintf+0x20>)
 8003742:	ab04      	add	r3, sp, #16
 8003744:	6808      	ldr	r0, [r1, #0]
 8003746:	f853 2b04 	ldr.w	r2, [r3], #4
 800374a:	6881      	ldr	r1, [r0, #8]
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	f000 fadb 	bl	8003d08 <_vfiprintf_r>
 8003752:	b003      	add	sp, #12
 8003754:	f85d eb04 	ldr.w	lr, [sp], #4
 8003758:	b004      	add	sp, #16
 800375a:	4770      	bx	lr
 800375c:	20000018 	.word	0x20000018

08003760 <_puts_r>:
 8003760:	6a03      	ldr	r3, [r0, #32]
 8003762:	b570      	push	{r4, r5, r6, lr}
 8003764:	6884      	ldr	r4, [r0, #8]
 8003766:	4605      	mov	r5, r0
 8003768:	460e      	mov	r6, r1
 800376a:	b90b      	cbnz	r3, 8003770 <_puts_r+0x10>
 800376c:	f7ff ffb0 	bl	80036d0 <__sinit>
 8003770:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003772:	07db      	lsls	r3, r3, #31
 8003774:	d405      	bmi.n	8003782 <_puts_r+0x22>
 8003776:	89a3      	ldrh	r3, [r4, #12]
 8003778:	0598      	lsls	r0, r3, #22
 800377a:	d402      	bmi.n	8003782 <_puts_r+0x22>
 800377c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800377e:	f000 f99e 	bl	8003abe <__retarget_lock_acquire_recursive>
 8003782:	89a3      	ldrh	r3, [r4, #12]
 8003784:	0719      	lsls	r1, r3, #28
 8003786:	d502      	bpl.n	800378e <_puts_r+0x2e>
 8003788:	6923      	ldr	r3, [r4, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d135      	bne.n	80037fa <_puts_r+0x9a>
 800378e:	4621      	mov	r1, r4
 8003790:	4628      	mov	r0, r5
 8003792:	f000 f8c5 	bl	8003920 <__swsetup_r>
 8003796:	b380      	cbz	r0, 80037fa <_puts_r+0x9a>
 8003798:	f04f 35ff 	mov.w	r5, #4294967295
 800379c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800379e:	07da      	lsls	r2, r3, #31
 80037a0:	d405      	bmi.n	80037ae <_puts_r+0x4e>
 80037a2:	89a3      	ldrh	r3, [r4, #12]
 80037a4:	059b      	lsls	r3, r3, #22
 80037a6:	d402      	bmi.n	80037ae <_puts_r+0x4e>
 80037a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037aa:	f000 f989 	bl	8003ac0 <__retarget_lock_release_recursive>
 80037ae:	4628      	mov	r0, r5
 80037b0:	bd70      	pop	{r4, r5, r6, pc}
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	da04      	bge.n	80037c0 <_puts_r+0x60>
 80037b6:	69a2      	ldr	r2, [r4, #24]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	dc17      	bgt.n	80037ec <_puts_r+0x8c>
 80037bc:	290a      	cmp	r1, #10
 80037be:	d015      	beq.n	80037ec <_puts_r+0x8c>
 80037c0:	6823      	ldr	r3, [r4, #0]
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	6022      	str	r2, [r4, #0]
 80037c6:	7019      	strb	r1, [r3, #0]
 80037c8:	68a3      	ldr	r3, [r4, #8]
 80037ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80037ce:	3b01      	subs	r3, #1
 80037d0:	60a3      	str	r3, [r4, #8]
 80037d2:	2900      	cmp	r1, #0
 80037d4:	d1ed      	bne.n	80037b2 <_puts_r+0x52>
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	da11      	bge.n	80037fe <_puts_r+0x9e>
 80037da:	4622      	mov	r2, r4
 80037dc:	210a      	movs	r1, #10
 80037de:	4628      	mov	r0, r5
 80037e0:	f000 f85f 	bl	80038a2 <__swbuf_r>
 80037e4:	3001      	adds	r0, #1
 80037e6:	d0d7      	beq.n	8003798 <_puts_r+0x38>
 80037e8:	250a      	movs	r5, #10
 80037ea:	e7d7      	b.n	800379c <_puts_r+0x3c>
 80037ec:	4622      	mov	r2, r4
 80037ee:	4628      	mov	r0, r5
 80037f0:	f000 f857 	bl	80038a2 <__swbuf_r>
 80037f4:	3001      	adds	r0, #1
 80037f6:	d1e7      	bne.n	80037c8 <_puts_r+0x68>
 80037f8:	e7ce      	b.n	8003798 <_puts_r+0x38>
 80037fa:	3e01      	subs	r6, #1
 80037fc:	e7e4      	b.n	80037c8 <_puts_r+0x68>
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	6022      	str	r2, [r4, #0]
 8003804:	220a      	movs	r2, #10
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	e7ee      	b.n	80037e8 <_puts_r+0x88>
	...

0800380c <puts>:
 800380c:	4b02      	ldr	r3, [pc, #8]	@ (8003818 <puts+0xc>)
 800380e:	4601      	mov	r1, r0
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	f7ff bfa5 	b.w	8003760 <_puts_r>
 8003816:	bf00      	nop
 8003818:	20000018 	.word	0x20000018

0800381c <__sread>:
 800381c:	b510      	push	{r4, lr}
 800381e:	460c      	mov	r4, r1
 8003820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003824:	f000 f8fc 	bl	8003a20 <_read_r>
 8003828:	2800      	cmp	r0, #0
 800382a:	bfab      	itete	ge
 800382c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800382e:	89a3      	ldrhlt	r3, [r4, #12]
 8003830:	181b      	addge	r3, r3, r0
 8003832:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003836:	bfac      	ite	ge
 8003838:	6563      	strge	r3, [r4, #84]	@ 0x54
 800383a:	81a3      	strhlt	r3, [r4, #12]
 800383c:	bd10      	pop	{r4, pc}

0800383e <__swrite>:
 800383e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003842:	461f      	mov	r7, r3
 8003844:	898b      	ldrh	r3, [r1, #12]
 8003846:	05db      	lsls	r3, r3, #23
 8003848:	4605      	mov	r5, r0
 800384a:	460c      	mov	r4, r1
 800384c:	4616      	mov	r6, r2
 800384e:	d505      	bpl.n	800385c <__swrite+0x1e>
 8003850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003854:	2302      	movs	r3, #2
 8003856:	2200      	movs	r2, #0
 8003858:	f000 f8d0 	bl	80039fc <_lseek_r>
 800385c:	89a3      	ldrh	r3, [r4, #12]
 800385e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003862:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003866:	81a3      	strh	r3, [r4, #12]
 8003868:	4632      	mov	r2, r6
 800386a:	463b      	mov	r3, r7
 800386c:	4628      	mov	r0, r5
 800386e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003872:	f000 b8e7 	b.w	8003a44 <_write_r>

08003876 <__sseek>:
 8003876:	b510      	push	{r4, lr}
 8003878:	460c      	mov	r4, r1
 800387a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800387e:	f000 f8bd 	bl	80039fc <_lseek_r>
 8003882:	1c43      	adds	r3, r0, #1
 8003884:	89a3      	ldrh	r3, [r4, #12]
 8003886:	bf15      	itete	ne
 8003888:	6560      	strne	r0, [r4, #84]	@ 0x54
 800388a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800388e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003892:	81a3      	strheq	r3, [r4, #12]
 8003894:	bf18      	it	ne
 8003896:	81a3      	strhne	r3, [r4, #12]
 8003898:	bd10      	pop	{r4, pc}

0800389a <__sclose>:
 800389a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800389e:	f000 b89d 	b.w	80039dc <_close_r>

080038a2 <__swbuf_r>:
 80038a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a4:	460e      	mov	r6, r1
 80038a6:	4614      	mov	r4, r2
 80038a8:	4605      	mov	r5, r0
 80038aa:	b118      	cbz	r0, 80038b4 <__swbuf_r+0x12>
 80038ac:	6a03      	ldr	r3, [r0, #32]
 80038ae:	b90b      	cbnz	r3, 80038b4 <__swbuf_r+0x12>
 80038b0:	f7ff ff0e 	bl	80036d0 <__sinit>
 80038b4:	69a3      	ldr	r3, [r4, #24]
 80038b6:	60a3      	str	r3, [r4, #8]
 80038b8:	89a3      	ldrh	r3, [r4, #12]
 80038ba:	071a      	lsls	r2, r3, #28
 80038bc:	d501      	bpl.n	80038c2 <__swbuf_r+0x20>
 80038be:	6923      	ldr	r3, [r4, #16]
 80038c0:	b943      	cbnz	r3, 80038d4 <__swbuf_r+0x32>
 80038c2:	4621      	mov	r1, r4
 80038c4:	4628      	mov	r0, r5
 80038c6:	f000 f82b 	bl	8003920 <__swsetup_r>
 80038ca:	b118      	cbz	r0, 80038d4 <__swbuf_r+0x32>
 80038cc:	f04f 37ff 	mov.w	r7, #4294967295
 80038d0:	4638      	mov	r0, r7
 80038d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	6922      	ldr	r2, [r4, #16]
 80038d8:	1a98      	subs	r0, r3, r2
 80038da:	6963      	ldr	r3, [r4, #20]
 80038dc:	b2f6      	uxtb	r6, r6
 80038de:	4283      	cmp	r3, r0
 80038e0:	4637      	mov	r7, r6
 80038e2:	dc05      	bgt.n	80038f0 <__swbuf_r+0x4e>
 80038e4:	4621      	mov	r1, r4
 80038e6:	4628      	mov	r0, r5
 80038e8:	f000 fd38 	bl	800435c <_fflush_r>
 80038ec:	2800      	cmp	r0, #0
 80038ee:	d1ed      	bne.n	80038cc <__swbuf_r+0x2a>
 80038f0:	68a3      	ldr	r3, [r4, #8]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	60a3      	str	r3, [r4, #8]
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	6022      	str	r2, [r4, #0]
 80038fc:	701e      	strb	r6, [r3, #0]
 80038fe:	6962      	ldr	r2, [r4, #20]
 8003900:	1c43      	adds	r3, r0, #1
 8003902:	429a      	cmp	r2, r3
 8003904:	d004      	beq.n	8003910 <__swbuf_r+0x6e>
 8003906:	89a3      	ldrh	r3, [r4, #12]
 8003908:	07db      	lsls	r3, r3, #31
 800390a:	d5e1      	bpl.n	80038d0 <__swbuf_r+0x2e>
 800390c:	2e0a      	cmp	r6, #10
 800390e:	d1df      	bne.n	80038d0 <__swbuf_r+0x2e>
 8003910:	4621      	mov	r1, r4
 8003912:	4628      	mov	r0, r5
 8003914:	f000 fd22 	bl	800435c <_fflush_r>
 8003918:	2800      	cmp	r0, #0
 800391a:	d0d9      	beq.n	80038d0 <__swbuf_r+0x2e>
 800391c:	e7d6      	b.n	80038cc <__swbuf_r+0x2a>
	...

08003920 <__swsetup_r>:
 8003920:	b538      	push	{r3, r4, r5, lr}
 8003922:	4b29      	ldr	r3, [pc, #164]	@ (80039c8 <__swsetup_r+0xa8>)
 8003924:	4605      	mov	r5, r0
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	460c      	mov	r4, r1
 800392a:	b118      	cbz	r0, 8003934 <__swsetup_r+0x14>
 800392c:	6a03      	ldr	r3, [r0, #32]
 800392e:	b90b      	cbnz	r3, 8003934 <__swsetup_r+0x14>
 8003930:	f7ff fece 	bl	80036d0 <__sinit>
 8003934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003938:	0719      	lsls	r1, r3, #28
 800393a:	d422      	bmi.n	8003982 <__swsetup_r+0x62>
 800393c:	06da      	lsls	r2, r3, #27
 800393e:	d407      	bmi.n	8003950 <__swsetup_r+0x30>
 8003940:	2209      	movs	r2, #9
 8003942:	602a      	str	r2, [r5, #0]
 8003944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003948:	81a3      	strh	r3, [r4, #12]
 800394a:	f04f 30ff 	mov.w	r0, #4294967295
 800394e:	e033      	b.n	80039b8 <__swsetup_r+0x98>
 8003950:	0758      	lsls	r0, r3, #29
 8003952:	d512      	bpl.n	800397a <__swsetup_r+0x5a>
 8003954:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003956:	b141      	cbz	r1, 800396a <__swsetup_r+0x4a>
 8003958:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800395c:	4299      	cmp	r1, r3
 800395e:	d002      	beq.n	8003966 <__swsetup_r+0x46>
 8003960:	4628      	mov	r0, r5
 8003962:	f000 f8af 	bl	8003ac4 <_free_r>
 8003966:	2300      	movs	r3, #0
 8003968:	6363      	str	r3, [r4, #52]	@ 0x34
 800396a:	89a3      	ldrh	r3, [r4, #12]
 800396c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003970:	81a3      	strh	r3, [r4, #12]
 8003972:	2300      	movs	r3, #0
 8003974:	6063      	str	r3, [r4, #4]
 8003976:	6923      	ldr	r3, [r4, #16]
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	89a3      	ldrh	r3, [r4, #12]
 800397c:	f043 0308 	orr.w	r3, r3, #8
 8003980:	81a3      	strh	r3, [r4, #12]
 8003982:	6923      	ldr	r3, [r4, #16]
 8003984:	b94b      	cbnz	r3, 800399a <__swsetup_r+0x7a>
 8003986:	89a3      	ldrh	r3, [r4, #12]
 8003988:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800398c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003990:	d003      	beq.n	800399a <__swsetup_r+0x7a>
 8003992:	4621      	mov	r1, r4
 8003994:	4628      	mov	r0, r5
 8003996:	f000 fd2f 	bl	80043f8 <__smakebuf_r>
 800399a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800399e:	f013 0201 	ands.w	r2, r3, #1
 80039a2:	d00a      	beq.n	80039ba <__swsetup_r+0x9a>
 80039a4:	2200      	movs	r2, #0
 80039a6:	60a2      	str	r2, [r4, #8]
 80039a8:	6962      	ldr	r2, [r4, #20]
 80039aa:	4252      	negs	r2, r2
 80039ac:	61a2      	str	r2, [r4, #24]
 80039ae:	6922      	ldr	r2, [r4, #16]
 80039b0:	b942      	cbnz	r2, 80039c4 <__swsetup_r+0xa4>
 80039b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80039b6:	d1c5      	bne.n	8003944 <__swsetup_r+0x24>
 80039b8:	bd38      	pop	{r3, r4, r5, pc}
 80039ba:	0799      	lsls	r1, r3, #30
 80039bc:	bf58      	it	pl
 80039be:	6962      	ldrpl	r2, [r4, #20]
 80039c0:	60a2      	str	r2, [r4, #8]
 80039c2:	e7f4      	b.n	80039ae <__swsetup_r+0x8e>
 80039c4:	2000      	movs	r0, #0
 80039c6:	e7f7      	b.n	80039b8 <__swsetup_r+0x98>
 80039c8:	20000018 	.word	0x20000018

080039cc <memset>:
 80039cc:	4402      	add	r2, r0
 80039ce:	4603      	mov	r3, r0
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d100      	bne.n	80039d6 <memset+0xa>
 80039d4:	4770      	bx	lr
 80039d6:	f803 1b01 	strb.w	r1, [r3], #1
 80039da:	e7f9      	b.n	80039d0 <memset+0x4>

080039dc <_close_r>:
 80039dc:	b538      	push	{r3, r4, r5, lr}
 80039de:	4d06      	ldr	r5, [pc, #24]	@ (80039f8 <_close_r+0x1c>)
 80039e0:	2300      	movs	r3, #0
 80039e2:	4604      	mov	r4, r0
 80039e4:	4608      	mov	r0, r1
 80039e6:	602b      	str	r3, [r5, #0]
 80039e8:	f7fd f9fe 	bl	8000de8 <_close>
 80039ec:	1c43      	adds	r3, r0, #1
 80039ee:	d102      	bne.n	80039f6 <_close_r+0x1a>
 80039f0:	682b      	ldr	r3, [r5, #0]
 80039f2:	b103      	cbz	r3, 80039f6 <_close_r+0x1a>
 80039f4:	6023      	str	r3, [r4, #0]
 80039f6:	bd38      	pop	{r3, r4, r5, pc}
 80039f8:	20001be8 	.word	0x20001be8

080039fc <_lseek_r>:
 80039fc:	b538      	push	{r3, r4, r5, lr}
 80039fe:	4d07      	ldr	r5, [pc, #28]	@ (8003a1c <_lseek_r+0x20>)
 8003a00:	4604      	mov	r4, r0
 8003a02:	4608      	mov	r0, r1
 8003a04:	4611      	mov	r1, r2
 8003a06:	2200      	movs	r2, #0
 8003a08:	602a      	str	r2, [r5, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f7fd fa13 	bl	8000e36 <_lseek>
 8003a10:	1c43      	adds	r3, r0, #1
 8003a12:	d102      	bne.n	8003a1a <_lseek_r+0x1e>
 8003a14:	682b      	ldr	r3, [r5, #0]
 8003a16:	b103      	cbz	r3, 8003a1a <_lseek_r+0x1e>
 8003a18:	6023      	str	r3, [r4, #0]
 8003a1a:	bd38      	pop	{r3, r4, r5, pc}
 8003a1c:	20001be8 	.word	0x20001be8

08003a20 <_read_r>:
 8003a20:	b538      	push	{r3, r4, r5, lr}
 8003a22:	4d07      	ldr	r5, [pc, #28]	@ (8003a40 <_read_r+0x20>)
 8003a24:	4604      	mov	r4, r0
 8003a26:	4608      	mov	r0, r1
 8003a28:	4611      	mov	r1, r2
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	602a      	str	r2, [r5, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f7fd f9a1 	bl	8000d76 <_read>
 8003a34:	1c43      	adds	r3, r0, #1
 8003a36:	d102      	bne.n	8003a3e <_read_r+0x1e>
 8003a38:	682b      	ldr	r3, [r5, #0]
 8003a3a:	b103      	cbz	r3, 8003a3e <_read_r+0x1e>
 8003a3c:	6023      	str	r3, [r4, #0]
 8003a3e:	bd38      	pop	{r3, r4, r5, pc}
 8003a40:	20001be8 	.word	0x20001be8

08003a44 <_write_r>:
 8003a44:	b538      	push	{r3, r4, r5, lr}
 8003a46:	4d07      	ldr	r5, [pc, #28]	@ (8003a64 <_write_r+0x20>)
 8003a48:	4604      	mov	r4, r0
 8003a4a:	4608      	mov	r0, r1
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	2200      	movs	r2, #0
 8003a50:	602a      	str	r2, [r5, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	f7fd f9ac 	bl	8000db0 <_write>
 8003a58:	1c43      	adds	r3, r0, #1
 8003a5a:	d102      	bne.n	8003a62 <_write_r+0x1e>
 8003a5c:	682b      	ldr	r3, [r5, #0]
 8003a5e:	b103      	cbz	r3, 8003a62 <_write_r+0x1e>
 8003a60:	6023      	str	r3, [r4, #0]
 8003a62:	bd38      	pop	{r3, r4, r5, pc}
 8003a64:	20001be8 	.word	0x20001be8

08003a68 <__errno>:
 8003a68:	4b01      	ldr	r3, [pc, #4]	@ (8003a70 <__errno+0x8>)
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	20000018 	.word	0x20000018

08003a74 <__libc_init_array>:
 8003a74:	b570      	push	{r4, r5, r6, lr}
 8003a76:	4d0d      	ldr	r5, [pc, #52]	@ (8003aac <__libc_init_array+0x38>)
 8003a78:	4c0d      	ldr	r4, [pc, #52]	@ (8003ab0 <__libc_init_array+0x3c>)
 8003a7a:	1b64      	subs	r4, r4, r5
 8003a7c:	10a4      	asrs	r4, r4, #2
 8003a7e:	2600      	movs	r6, #0
 8003a80:	42a6      	cmp	r6, r4
 8003a82:	d109      	bne.n	8003a98 <__libc_init_array+0x24>
 8003a84:	4d0b      	ldr	r5, [pc, #44]	@ (8003ab4 <__libc_init_array+0x40>)
 8003a86:	4c0c      	ldr	r4, [pc, #48]	@ (8003ab8 <__libc_init_array+0x44>)
 8003a88:	f000 fd24 	bl	80044d4 <_init>
 8003a8c:	1b64      	subs	r4, r4, r5
 8003a8e:	10a4      	asrs	r4, r4, #2
 8003a90:	2600      	movs	r6, #0
 8003a92:	42a6      	cmp	r6, r4
 8003a94:	d105      	bne.n	8003aa2 <__libc_init_array+0x2e>
 8003a96:	bd70      	pop	{r4, r5, r6, pc}
 8003a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a9c:	4798      	blx	r3
 8003a9e:	3601      	adds	r6, #1
 8003aa0:	e7ee      	b.n	8003a80 <__libc_init_array+0xc>
 8003aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa6:	4798      	blx	r3
 8003aa8:	3601      	adds	r6, #1
 8003aaa:	e7f2      	b.n	8003a92 <__libc_init_array+0x1e>
 8003aac:	0800457c 	.word	0x0800457c
 8003ab0:	0800457c 	.word	0x0800457c
 8003ab4:	0800457c 	.word	0x0800457c
 8003ab8:	08004580 	.word	0x08004580

08003abc <__retarget_lock_init_recursive>:
 8003abc:	4770      	bx	lr

08003abe <__retarget_lock_acquire_recursive>:
 8003abe:	4770      	bx	lr

08003ac0 <__retarget_lock_release_recursive>:
 8003ac0:	4770      	bx	lr
	...

08003ac4 <_free_r>:
 8003ac4:	b538      	push	{r3, r4, r5, lr}
 8003ac6:	4605      	mov	r5, r0
 8003ac8:	2900      	cmp	r1, #0
 8003aca:	d041      	beq.n	8003b50 <_free_r+0x8c>
 8003acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ad0:	1f0c      	subs	r4, r1, #4
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bfb8      	it	lt
 8003ad6:	18e4      	addlt	r4, r4, r3
 8003ad8:	f000 f8e0 	bl	8003c9c <__malloc_lock>
 8003adc:	4a1d      	ldr	r2, [pc, #116]	@ (8003b54 <_free_r+0x90>)
 8003ade:	6813      	ldr	r3, [r2, #0]
 8003ae0:	b933      	cbnz	r3, 8003af0 <_free_r+0x2c>
 8003ae2:	6063      	str	r3, [r4, #4]
 8003ae4:	6014      	str	r4, [r2, #0]
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aec:	f000 b8dc 	b.w	8003ca8 <__malloc_unlock>
 8003af0:	42a3      	cmp	r3, r4
 8003af2:	d908      	bls.n	8003b06 <_free_r+0x42>
 8003af4:	6820      	ldr	r0, [r4, #0]
 8003af6:	1821      	adds	r1, r4, r0
 8003af8:	428b      	cmp	r3, r1
 8003afa:	bf01      	itttt	eq
 8003afc:	6819      	ldreq	r1, [r3, #0]
 8003afe:	685b      	ldreq	r3, [r3, #4]
 8003b00:	1809      	addeq	r1, r1, r0
 8003b02:	6021      	streq	r1, [r4, #0]
 8003b04:	e7ed      	b.n	8003ae2 <_free_r+0x1e>
 8003b06:	461a      	mov	r2, r3
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	b10b      	cbz	r3, 8003b10 <_free_r+0x4c>
 8003b0c:	42a3      	cmp	r3, r4
 8003b0e:	d9fa      	bls.n	8003b06 <_free_r+0x42>
 8003b10:	6811      	ldr	r1, [r2, #0]
 8003b12:	1850      	adds	r0, r2, r1
 8003b14:	42a0      	cmp	r0, r4
 8003b16:	d10b      	bne.n	8003b30 <_free_r+0x6c>
 8003b18:	6820      	ldr	r0, [r4, #0]
 8003b1a:	4401      	add	r1, r0
 8003b1c:	1850      	adds	r0, r2, r1
 8003b1e:	4283      	cmp	r3, r0
 8003b20:	6011      	str	r1, [r2, #0]
 8003b22:	d1e0      	bne.n	8003ae6 <_free_r+0x22>
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	6053      	str	r3, [r2, #4]
 8003b2a:	4408      	add	r0, r1
 8003b2c:	6010      	str	r0, [r2, #0]
 8003b2e:	e7da      	b.n	8003ae6 <_free_r+0x22>
 8003b30:	d902      	bls.n	8003b38 <_free_r+0x74>
 8003b32:	230c      	movs	r3, #12
 8003b34:	602b      	str	r3, [r5, #0]
 8003b36:	e7d6      	b.n	8003ae6 <_free_r+0x22>
 8003b38:	6820      	ldr	r0, [r4, #0]
 8003b3a:	1821      	adds	r1, r4, r0
 8003b3c:	428b      	cmp	r3, r1
 8003b3e:	bf04      	itt	eq
 8003b40:	6819      	ldreq	r1, [r3, #0]
 8003b42:	685b      	ldreq	r3, [r3, #4]
 8003b44:	6063      	str	r3, [r4, #4]
 8003b46:	bf04      	itt	eq
 8003b48:	1809      	addeq	r1, r1, r0
 8003b4a:	6021      	streq	r1, [r4, #0]
 8003b4c:	6054      	str	r4, [r2, #4]
 8003b4e:	e7ca      	b.n	8003ae6 <_free_r+0x22>
 8003b50:	bd38      	pop	{r3, r4, r5, pc}
 8003b52:	bf00      	nop
 8003b54:	20001bf4 	.word	0x20001bf4

08003b58 <sbrk_aligned>:
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	4e0f      	ldr	r6, [pc, #60]	@ (8003b98 <sbrk_aligned+0x40>)
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	6831      	ldr	r1, [r6, #0]
 8003b60:	4605      	mov	r5, r0
 8003b62:	b911      	cbnz	r1, 8003b6a <sbrk_aligned+0x12>
 8003b64:	f000 fca6 	bl	80044b4 <_sbrk_r>
 8003b68:	6030      	str	r0, [r6, #0]
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	4628      	mov	r0, r5
 8003b6e:	f000 fca1 	bl	80044b4 <_sbrk_r>
 8003b72:	1c43      	adds	r3, r0, #1
 8003b74:	d103      	bne.n	8003b7e <sbrk_aligned+0x26>
 8003b76:	f04f 34ff 	mov.w	r4, #4294967295
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	bd70      	pop	{r4, r5, r6, pc}
 8003b7e:	1cc4      	adds	r4, r0, #3
 8003b80:	f024 0403 	bic.w	r4, r4, #3
 8003b84:	42a0      	cmp	r0, r4
 8003b86:	d0f8      	beq.n	8003b7a <sbrk_aligned+0x22>
 8003b88:	1a21      	subs	r1, r4, r0
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	f000 fc92 	bl	80044b4 <_sbrk_r>
 8003b90:	3001      	adds	r0, #1
 8003b92:	d1f2      	bne.n	8003b7a <sbrk_aligned+0x22>
 8003b94:	e7ef      	b.n	8003b76 <sbrk_aligned+0x1e>
 8003b96:	bf00      	nop
 8003b98:	20001bf0 	.word	0x20001bf0

08003b9c <_malloc_r>:
 8003b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ba0:	1ccd      	adds	r5, r1, #3
 8003ba2:	f025 0503 	bic.w	r5, r5, #3
 8003ba6:	3508      	adds	r5, #8
 8003ba8:	2d0c      	cmp	r5, #12
 8003baa:	bf38      	it	cc
 8003bac:	250c      	movcc	r5, #12
 8003bae:	2d00      	cmp	r5, #0
 8003bb0:	4606      	mov	r6, r0
 8003bb2:	db01      	blt.n	8003bb8 <_malloc_r+0x1c>
 8003bb4:	42a9      	cmp	r1, r5
 8003bb6:	d904      	bls.n	8003bc2 <_malloc_r+0x26>
 8003bb8:	230c      	movs	r3, #12
 8003bba:	6033      	str	r3, [r6, #0]
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c98 <_malloc_r+0xfc>
 8003bc6:	f000 f869 	bl	8003c9c <__malloc_lock>
 8003bca:	f8d8 3000 	ldr.w	r3, [r8]
 8003bce:	461c      	mov	r4, r3
 8003bd0:	bb44      	cbnz	r4, 8003c24 <_malloc_r+0x88>
 8003bd2:	4629      	mov	r1, r5
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	f7ff ffbf 	bl	8003b58 <sbrk_aligned>
 8003bda:	1c43      	adds	r3, r0, #1
 8003bdc:	4604      	mov	r4, r0
 8003bde:	d158      	bne.n	8003c92 <_malloc_r+0xf6>
 8003be0:	f8d8 4000 	ldr.w	r4, [r8]
 8003be4:	4627      	mov	r7, r4
 8003be6:	2f00      	cmp	r7, #0
 8003be8:	d143      	bne.n	8003c72 <_malloc_r+0xd6>
 8003bea:	2c00      	cmp	r4, #0
 8003bec:	d04b      	beq.n	8003c86 <_malloc_r+0xea>
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	4639      	mov	r1, r7
 8003bf2:	4630      	mov	r0, r6
 8003bf4:	eb04 0903 	add.w	r9, r4, r3
 8003bf8:	f000 fc5c 	bl	80044b4 <_sbrk_r>
 8003bfc:	4581      	cmp	r9, r0
 8003bfe:	d142      	bne.n	8003c86 <_malloc_r+0xea>
 8003c00:	6821      	ldr	r1, [r4, #0]
 8003c02:	1a6d      	subs	r5, r5, r1
 8003c04:	4629      	mov	r1, r5
 8003c06:	4630      	mov	r0, r6
 8003c08:	f7ff ffa6 	bl	8003b58 <sbrk_aligned>
 8003c0c:	3001      	adds	r0, #1
 8003c0e:	d03a      	beq.n	8003c86 <_malloc_r+0xea>
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	442b      	add	r3, r5
 8003c14:	6023      	str	r3, [r4, #0]
 8003c16:	f8d8 3000 	ldr.w	r3, [r8]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	bb62      	cbnz	r2, 8003c78 <_malloc_r+0xdc>
 8003c1e:	f8c8 7000 	str.w	r7, [r8]
 8003c22:	e00f      	b.n	8003c44 <_malloc_r+0xa8>
 8003c24:	6822      	ldr	r2, [r4, #0]
 8003c26:	1b52      	subs	r2, r2, r5
 8003c28:	d420      	bmi.n	8003c6c <_malloc_r+0xd0>
 8003c2a:	2a0b      	cmp	r2, #11
 8003c2c:	d917      	bls.n	8003c5e <_malloc_r+0xc2>
 8003c2e:	1961      	adds	r1, r4, r5
 8003c30:	42a3      	cmp	r3, r4
 8003c32:	6025      	str	r5, [r4, #0]
 8003c34:	bf18      	it	ne
 8003c36:	6059      	strne	r1, [r3, #4]
 8003c38:	6863      	ldr	r3, [r4, #4]
 8003c3a:	bf08      	it	eq
 8003c3c:	f8c8 1000 	streq.w	r1, [r8]
 8003c40:	5162      	str	r2, [r4, r5]
 8003c42:	604b      	str	r3, [r1, #4]
 8003c44:	4630      	mov	r0, r6
 8003c46:	f000 f82f 	bl	8003ca8 <__malloc_unlock>
 8003c4a:	f104 000b 	add.w	r0, r4, #11
 8003c4e:	1d23      	adds	r3, r4, #4
 8003c50:	f020 0007 	bic.w	r0, r0, #7
 8003c54:	1ac2      	subs	r2, r0, r3
 8003c56:	bf1c      	itt	ne
 8003c58:	1a1b      	subne	r3, r3, r0
 8003c5a:	50a3      	strne	r3, [r4, r2]
 8003c5c:	e7af      	b.n	8003bbe <_malloc_r+0x22>
 8003c5e:	6862      	ldr	r2, [r4, #4]
 8003c60:	42a3      	cmp	r3, r4
 8003c62:	bf0c      	ite	eq
 8003c64:	f8c8 2000 	streq.w	r2, [r8]
 8003c68:	605a      	strne	r2, [r3, #4]
 8003c6a:	e7eb      	b.n	8003c44 <_malloc_r+0xa8>
 8003c6c:	4623      	mov	r3, r4
 8003c6e:	6864      	ldr	r4, [r4, #4]
 8003c70:	e7ae      	b.n	8003bd0 <_malloc_r+0x34>
 8003c72:	463c      	mov	r4, r7
 8003c74:	687f      	ldr	r7, [r7, #4]
 8003c76:	e7b6      	b.n	8003be6 <_malloc_r+0x4a>
 8003c78:	461a      	mov	r2, r3
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	42a3      	cmp	r3, r4
 8003c7e:	d1fb      	bne.n	8003c78 <_malloc_r+0xdc>
 8003c80:	2300      	movs	r3, #0
 8003c82:	6053      	str	r3, [r2, #4]
 8003c84:	e7de      	b.n	8003c44 <_malloc_r+0xa8>
 8003c86:	230c      	movs	r3, #12
 8003c88:	6033      	str	r3, [r6, #0]
 8003c8a:	4630      	mov	r0, r6
 8003c8c:	f000 f80c 	bl	8003ca8 <__malloc_unlock>
 8003c90:	e794      	b.n	8003bbc <_malloc_r+0x20>
 8003c92:	6005      	str	r5, [r0, #0]
 8003c94:	e7d6      	b.n	8003c44 <_malloc_r+0xa8>
 8003c96:	bf00      	nop
 8003c98:	20001bf4 	.word	0x20001bf4

08003c9c <__malloc_lock>:
 8003c9c:	4801      	ldr	r0, [pc, #4]	@ (8003ca4 <__malloc_lock+0x8>)
 8003c9e:	f7ff bf0e 	b.w	8003abe <__retarget_lock_acquire_recursive>
 8003ca2:	bf00      	nop
 8003ca4:	20001bec 	.word	0x20001bec

08003ca8 <__malloc_unlock>:
 8003ca8:	4801      	ldr	r0, [pc, #4]	@ (8003cb0 <__malloc_unlock+0x8>)
 8003caa:	f7ff bf09 	b.w	8003ac0 <__retarget_lock_release_recursive>
 8003cae:	bf00      	nop
 8003cb0:	20001bec 	.word	0x20001bec

08003cb4 <__sfputc_r>:
 8003cb4:	6893      	ldr	r3, [r2, #8]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	b410      	push	{r4}
 8003cbc:	6093      	str	r3, [r2, #8]
 8003cbe:	da08      	bge.n	8003cd2 <__sfputc_r+0x1e>
 8003cc0:	6994      	ldr	r4, [r2, #24]
 8003cc2:	42a3      	cmp	r3, r4
 8003cc4:	db01      	blt.n	8003cca <__sfputc_r+0x16>
 8003cc6:	290a      	cmp	r1, #10
 8003cc8:	d103      	bne.n	8003cd2 <__sfputc_r+0x1e>
 8003cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cce:	f7ff bde8 	b.w	80038a2 <__swbuf_r>
 8003cd2:	6813      	ldr	r3, [r2, #0]
 8003cd4:	1c58      	adds	r0, r3, #1
 8003cd6:	6010      	str	r0, [r2, #0]
 8003cd8:	7019      	strb	r1, [r3, #0]
 8003cda:	4608      	mov	r0, r1
 8003cdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <__sfputs_r>:
 8003ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce4:	4606      	mov	r6, r0
 8003ce6:	460f      	mov	r7, r1
 8003ce8:	4614      	mov	r4, r2
 8003cea:	18d5      	adds	r5, r2, r3
 8003cec:	42ac      	cmp	r4, r5
 8003cee:	d101      	bne.n	8003cf4 <__sfputs_r+0x12>
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	e007      	b.n	8003d04 <__sfputs_r+0x22>
 8003cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cf8:	463a      	mov	r2, r7
 8003cfa:	4630      	mov	r0, r6
 8003cfc:	f7ff ffda 	bl	8003cb4 <__sfputc_r>
 8003d00:	1c43      	adds	r3, r0, #1
 8003d02:	d1f3      	bne.n	8003cec <__sfputs_r+0xa>
 8003d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d08 <_vfiprintf_r>:
 8003d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d0c:	460d      	mov	r5, r1
 8003d0e:	b09d      	sub	sp, #116	@ 0x74
 8003d10:	4614      	mov	r4, r2
 8003d12:	4698      	mov	r8, r3
 8003d14:	4606      	mov	r6, r0
 8003d16:	b118      	cbz	r0, 8003d20 <_vfiprintf_r+0x18>
 8003d18:	6a03      	ldr	r3, [r0, #32]
 8003d1a:	b90b      	cbnz	r3, 8003d20 <_vfiprintf_r+0x18>
 8003d1c:	f7ff fcd8 	bl	80036d0 <__sinit>
 8003d20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d22:	07d9      	lsls	r1, r3, #31
 8003d24:	d405      	bmi.n	8003d32 <_vfiprintf_r+0x2a>
 8003d26:	89ab      	ldrh	r3, [r5, #12]
 8003d28:	059a      	lsls	r2, r3, #22
 8003d2a:	d402      	bmi.n	8003d32 <_vfiprintf_r+0x2a>
 8003d2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d2e:	f7ff fec6 	bl	8003abe <__retarget_lock_acquire_recursive>
 8003d32:	89ab      	ldrh	r3, [r5, #12]
 8003d34:	071b      	lsls	r3, r3, #28
 8003d36:	d501      	bpl.n	8003d3c <_vfiprintf_r+0x34>
 8003d38:	692b      	ldr	r3, [r5, #16]
 8003d3a:	b99b      	cbnz	r3, 8003d64 <_vfiprintf_r+0x5c>
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f7ff fdee 	bl	8003920 <__swsetup_r>
 8003d44:	b170      	cbz	r0, 8003d64 <_vfiprintf_r+0x5c>
 8003d46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d48:	07dc      	lsls	r4, r3, #31
 8003d4a:	d504      	bpl.n	8003d56 <_vfiprintf_r+0x4e>
 8003d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d50:	b01d      	add	sp, #116	@ 0x74
 8003d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d56:	89ab      	ldrh	r3, [r5, #12]
 8003d58:	0598      	lsls	r0, r3, #22
 8003d5a:	d4f7      	bmi.n	8003d4c <_vfiprintf_r+0x44>
 8003d5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d5e:	f7ff feaf 	bl	8003ac0 <__retarget_lock_release_recursive>
 8003d62:	e7f3      	b.n	8003d4c <_vfiprintf_r+0x44>
 8003d64:	2300      	movs	r3, #0
 8003d66:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d68:	2320      	movs	r3, #32
 8003d6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d72:	2330      	movs	r3, #48	@ 0x30
 8003d74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003f24 <_vfiprintf_r+0x21c>
 8003d78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d7c:	f04f 0901 	mov.w	r9, #1
 8003d80:	4623      	mov	r3, r4
 8003d82:	469a      	mov	sl, r3
 8003d84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d88:	b10a      	cbz	r2, 8003d8e <_vfiprintf_r+0x86>
 8003d8a:	2a25      	cmp	r2, #37	@ 0x25
 8003d8c:	d1f9      	bne.n	8003d82 <_vfiprintf_r+0x7a>
 8003d8e:	ebba 0b04 	subs.w	fp, sl, r4
 8003d92:	d00b      	beq.n	8003dac <_vfiprintf_r+0xa4>
 8003d94:	465b      	mov	r3, fp
 8003d96:	4622      	mov	r2, r4
 8003d98:	4629      	mov	r1, r5
 8003d9a:	4630      	mov	r0, r6
 8003d9c:	f7ff ffa1 	bl	8003ce2 <__sfputs_r>
 8003da0:	3001      	adds	r0, #1
 8003da2:	f000 80a7 	beq.w	8003ef4 <_vfiprintf_r+0x1ec>
 8003da6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003da8:	445a      	add	r2, fp
 8003daa:	9209      	str	r2, [sp, #36]	@ 0x24
 8003dac:	f89a 3000 	ldrb.w	r3, [sl]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 809f 	beq.w	8003ef4 <_vfiprintf_r+0x1ec>
 8003db6:	2300      	movs	r3, #0
 8003db8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dc0:	f10a 0a01 	add.w	sl, sl, #1
 8003dc4:	9304      	str	r3, [sp, #16]
 8003dc6:	9307      	str	r3, [sp, #28]
 8003dc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003dcc:	931a      	str	r3, [sp, #104]	@ 0x68
 8003dce:	4654      	mov	r4, sl
 8003dd0:	2205      	movs	r2, #5
 8003dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dd6:	4853      	ldr	r0, [pc, #332]	@ (8003f24 <_vfiprintf_r+0x21c>)
 8003dd8:	f7fc fa0a 	bl	80001f0 <memchr>
 8003ddc:	9a04      	ldr	r2, [sp, #16]
 8003dde:	b9d8      	cbnz	r0, 8003e18 <_vfiprintf_r+0x110>
 8003de0:	06d1      	lsls	r1, r2, #27
 8003de2:	bf44      	itt	mi
 8003de4:	2320      	movmi	r3, #32
 8003de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003dea:	0713      	lsls	r3, r2, #28
 8003dec:	bf44      	itt	mi
 8003dee:	232b      	movmi	r3, #43	@ 0x2b
 8003df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003df4:	f89a 3000 	ldrb.w	r3, [sl]
 8003df8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dfa:	d015      	beq.n	8003e28 <_vfiprintf_r+0x120>
 8003dfc:	9a07      	ldr	r2, [sp, #28]
 8003dfe:	4654      	mov	r4, sl
 8003e00:	2000      	movs	r0, #0
 8003e02:	f04f 0c0a 	mov.w	ip, #10
 8003e06:	4621      	mov	r1, r4
 8003e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e0c:	3b30      	subs	r3, #48	@ 0x30
 8003e0e:	2b09      	cmp	r3, #9
 8003e10:	d94b      	bls.n	8003eaa <_vfiprintf_r+0x1a2>
 8003e12:	b1b0      	cbz	r0, 8003e42 <_vfiprintf_r+0x13a>
 8003e14:	9207      	str	r2, [sp, #28]
 8003e16:	e014      	b.n	8003e42 <_vfiprintf_r+0x13a>
 8003e18:	eba0 0308 	sub.w	r3, r0, r8
 8003e1c:	fa09 f303 	lsl.w	r3, r9, r3
 8003e20:	4313      	orrs	r3, r2
 8003e22:	9304      	str	r3, [sp, #16]
 8003e24:	46a2      	mov	sl, r4
 8003e26:	e7d2      	b.n	8003dce <_vfiprintf_r+0xc6>
 8003e28:	9b03      	ldr	r3, [sp, #12]
 8003e2a:	1d19      	adds	r1, r3, #4
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	9103      	str	r1, [sp, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	bfbb      	ittet	lt
 8003e34:	425b      	neglt	r3, r3
 8003e36:	f042 0202 	orrlt.w	r2, r2, #2
 8003e3a:	9307      	strge	r3, [sp, #28]
 8003e3c:	9307      	strlt	r3, [sp, #28]
 8003e3e:	bfb8      	it	lt
 8003e40:	9204      	strlt	r2, [sp, #16]
 8003e42:	7823      	ldrb	r3, [r4, #0]
 8003e44:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e46:	d10a      	bne.n	8003e5e <_vfiprintf_r+0x156>
 8003e48:	7863      	ldrb	r3, [r4, #1]
 8003e4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e4c:	d132      	bne.n	8003eb4 <_vfiprintf_r+0x1ac>
 8003e4e:	9b03      	ldr	r3, [sp, #12]
 8003e50:	1d1a      	adds	r2, r3, #4
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	9203      	str	r2, [sp, #12]
 8003e56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e5a:	3402      	adds	r4, #2
 8003e5c:	9305      	str	r3, [sp, #20]
 8003e5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003f34 <_vfiprintf_r+0x22c>
 8003e62:	7821      	ldrb	r1, [r4, #0]
 8003e64:	2203      	movs	r2, #3
 8003e66:	4650      	mov	r0, sl
 8003e68:	f7fc f9c2 	bl	80001f0 <memchr>
 8003e6c:	b138      	cbz	r0, 8003e7e <_vfiprintf_r+0x176>
 8003e6e:	9b04      	ldr	r3, [sp, #16]
 8003e70:	eba0 000a 	sub.w	r0, r0, sl
 8003e74:	2240      	movs	r2, #64	@ 0x40
 8003e76:	4082      	lsls	r2, r0
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	3401      	adds	r4, #1
 8003e7c:	9304      	str	r3, [sp, #16]
 8003e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e82:	4829      	ldr	r0, [pc, #164]	@ (8003f28 <_vfiprintf_r+0x220>)
 8003e84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e88:	2206      	movs	r2, #6
 8003e8a:	f7fc f9b1 	bl	80001f0 <memchr>
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	d03f      	beq.n	8003f12 <_vfiprintf_r+0x20a>
 8003e92:	4b26      	ldr	r3, [pc, #152]	@ (8003f2c <_vfiprintf_r+0x224>)
 8003e94:	bb1b      	cbnz	r3, 8003ede <_vfiprintf_r+0x1d6>
 8003e96:	9b03      	ldr	r3, [sp, #12]
 8003e98:	3307      	adds	r3, #7
 8003e9a:	f023 0307 	bic.w	r3, r3, #7
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	9303      	str	r3, [sp, #12]
 8003ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ea4:	443b      	add	r3, r7
 8003ea6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ea8:	e76a      	b.n	8003d80 <_vfiprintf_r+0x78>
 8003eaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8003eae:	460c      	mov	r4, r1
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	e7a8      	b.n	8003e06 <_vfiprintf_r+0xfe>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	3401      	adds	r4, #1
 8003eb8:	9305      	str	r3, [sp, #20]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	f04f 0c0a 	mov.w	ip, #10
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ec6:	3a30      	subs	r2, #48	@ 0x30
 8003ec8:	2a09      	cmp	r2, #9
 8003eca:	d903      	bls.n	8003ed4 <_vfiprintf_r+0x1cc>
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0c6      	beq.n	8003e5e <_vfiprintf_r+0x156>
 8003ed0:	9105      	str	r1, [sp, #20]
 8003ed2:	e7c4      	b.n	8003e5e <_vfiprintf_r+0x156>
 8003ed4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ed8:	4604      	mov	r4, r0
 8003eda:	2301      	movs	r3, #1
 8003edc:	e7f0      	b.n	8003ec0 <_vfiprintf_r+0x1b8>
 8003ede:	ab03      	add	r3, sp, #12
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	462a      	mov	r2, r5
 8003ee4:	4b12      	ldr	r3, [pc, #72]	@ (8003f30 <_vfiprintf_r+0x228>)
 8003ee6:	a904      	add	r1, sp, #16
 8003ee8:	4630      	mov	r0, r6
 8003eea:	f3af 8000 	nop.w
 8003eee:	4607      	mov	r7, r0
 8003ef0:	1c78      	adds	r0, r7, #1
 8003ef2:	d1d6      	bne.n	8003ea2 <_vfiprintf_r+0x19a>
 8003ef4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ef6:	07d9      	lsls	r1, r3, #31
 8003ef8:	d405      	bmi.n	8003f06 <_vfiprintf_r+0x1fe>
 8003efa:	89ab      	ldrh	r3, [r5, #12]
 8003efc:	059a      	lsls	r2, r3, #22
 8003efe:	d402      	bmi.n	8003f06 <_vfiprintf_r+0x1fe>
 8003f00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f02:	f7ff fddd 	bl	8003ac0 <__retarget_lock_release_recursive>
 8003f06:	89ab      	ldrh	r3, [r5, #12]
 8003f08:	065b      	lsls	r3, r3, #25
 8003f0a:	f53f af1f 	bmi.w	8003d4c <_vfiprintf_r+0x44>
 8003f0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f10:	e71e      	b.n	8003d50 <_vfiprintf_r+0x48>
 8003f12:	ab03      	add	r3, sp, #12
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	462a      	mov	r2, r5
 8003f18:	4b05      	ldr	r3, [pc, #20]	@ (8003f30 <_vfiprintf_r+0x228>)
 8003f1a:	a904      	add	r1, sp, #16
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	f000 f879 	bl	8004014 <_printf_i>
 8003f22:	e7e4      	b.n	8003eee <_vfiprintf_r+0x1e6>
 8003f24:	08004540 	.word	0x08004540
 8003f28:	0800454a 	.word	0x0800454a
 8003f2c:	00000000 	.word	0x00000000
 8003f30:	08003ce3 	.word	0x08003ce3
 8003f34:	08004546 	.word	0x08004546

08003f38 <_printf_common>:
 8003f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f3c:	4616      	mov	r6, r2
 8003f3e:	4698      	mov	r8, r3
 8003f40:	688a      	ldr	r2, [r1, #8]
 8003f42:	690b      	ldr	r3, [r1, #16]
 8003f44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	bfb8      	it	lt
 8003f4c:	4613      	movlt	r3, r2
 8003f4e:	6033      	str	r3, [r6, #0]
 8003f50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f54:	4607      	mov	r7, r0
 8003f56:	460c      	mov	r4, r1
 8003f58:	b10a      	cbz	r2, 8003f5e <_printf_common+0x26>
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	6033      	str	r3, [r6, #0]
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	0699      	lsls	r1, r3, #26
 8003f62:	bf42      	ittt	mi
 8003f64:	6833      	ldrmi	r3, [r6, #0]
 8003f66:	3302      	addmi	r3, #2
 8003f68:	6033      	strmi	r3, [r6, #0]
 8003f6a:	6825      	ldr	r5, [r4, #0]
 8003f6c:	f015 0506 	ands.w	r5, r5, #6
 8003f70:	d106      	bne.n	8003f80 <_printf_common+0x48>
 8003f72:	f104 0a19 	add.w	sl, r4, #25
 8003f76:	68e3      	ldr	r3, [r4, #12]
 8003f78:	6832      	ldr	r2, [r6, #0]
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	42ab      	cmp	r3, r5
 8003f7e:	dc26      	bgt.n	8003fce <_printf_common+0x96>
 8003f80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f84:	6822      	ldr	r2, [r4, #0]
 8003f86:	3b00      	subs	r3, #0
 8003f88:	bf18      	it	ne
 8003f8a:	2301      	movne	r3, #1
 8003f8c:	0692      	lsls	r2, r2, #26
 8003f8e:	d42b      	bmi.n	8003fe8 <_printf_common+0xb0>
 8003f90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f94:	4641      	mov	r1, r8
 8003f96:	4638      	mov	r0, r7
 8003f98:	47c8      	blx	r9
 8003f9a:	3001      	adds	r0, #1
 8003f9c:	d01e      	beq.n	8003fdc <_printf_common+0xa4>
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	6922      	ldr	r2, [r4, #16]
 8003fa2:	f003 0306 	and.w	r3, r3, #6
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	bf02      	ittt	eq
 8003faa:	68e5      	ldreq	r5, [r4, #12]
 8003fac:	6833      	ldreq	r3, [r6, #0]
 8003fae:	1aed      	subeq	r5, r5, r3
 8003fb0:	68a3      	ldr	r3, [r4, #8]
 8003fb2:	bf0c      	ite	eq
 8003fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fb8:	2500      	movne	r5, #0
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	bfc4      	itt	gt
 8003fbe:	1a9b      	subgt	r3, r3, r2
 8003fc0:	18ed      	addgt	r5, r5, r3
 8003fc2:	2600      	movs	r6, #0
 8003fc4:	341a      	adds	r4, #26
 8003fc6:	42b5      	cmp	r5, r6
 8003fc8:	d11a      	bne.n	8004000 <_printf_common+0xc8>
 8003fca:	2000      	movs	r0, #0
 8003fcc:	e008      	b.n	8003fe0 <_printf_common+0xa8>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	4652      	mov	r2, sl
 8003fd2:	4641      	mov	r1, r8
 8003fd4:	4638      	mov	r0, r7
 8003fd6:	47c8      	blx	r9
 8003fd8:	3001      	adds	r0, #1
 8003fda:	d103      	bne.n	8003fe4 <_printf_common+0xac>
 8003fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe4:	3501      	adds	r5, #1
 8003fe6:	e7c6      	b.n	8003f76 <_printf_common+0x3e>
 8003fe8:	18e1      	adds	r1, r4, r3
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	2030      	movs	r0, #48	@ 0x30
 8003fee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ff2:	4422      	add	r2, r4
 8003ff4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ff8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ffc:	3302      	adds	r3, #2
 8003ffe:	e7c7      	b.n	8003f90 <_printf_common+0x58>
 8004000:	2301      	movs	r3, #1
 8004002:	4622      	mov	r2, r4
 8004004:	4641      	mov	r1, r8
 8004006:	4638      	mov	r0, r7
 8004008:	47c8      	blx	r9
 800400a:	3001      	adds	r0, #1
 800400c:	d0e6      	beq.n	8003fdc <_printf_common+0xa4>
 800400e:	3601      	adds	r6, #1
 8004010:	e7d9      	b.n	8003fc6 <_printf_common+0x8e>
	...

08004014 <_printf_i>:
 8004014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004018:	7e0f      	ldrb	r7, [r1, #24]
 800401a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800401c:	2f78      	cmp	r7, #120	@ 0x78
 800401e:	4691      	mov	r9, r2
 8004020:	4680      	mov	r8, r0
 8004022:	460c      	mov	r4, r1
 8004024:	469a      	mov	sl, r3
 8004026:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800402a:	d807      	bhi.n	800403c <_printf_i+0x28>
 800402c:	2f62      	cmp	r7, #98	@ 0x62
 800402e:	d80a      	bhi.n	8004046 <_printf_i+0x32>
 8004030:	2f00      	cmp	r7, #0
 8004032:	f000 80d2 	beq.w	80041da <_printf_i+0x1c6>
 8004036:	2f58      	cmp	r7, #88	@ 0x58
 8004038:	f000 80b9 	beq.w	80041ae <_printf_i+0x19a>
 800403c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004040:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004044:	e03a      	b.n	80040bc <_printf_i+0xa8>
 8004046:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800404a:	2b15      	cmp	r3, #21
 800404c:	d8f6      	bhi.n	800403c <_printf_i+0x28>
 800404e:	a101      	add	r1, pc, #4	@ (adr r1, 8004054 <_printf_i+0x40>)
 8004050:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004054:	080040ad 	.word	0x080040ad
 8004058:	080040c1 	.word	0x080040c1
 800405c:	0800403d 	.word	0x0800403d
 8004060:	0800403d 	.word	0x0800403d
 8004064:	0800403d 	.word	0x0800403d
 8004068:	0800403d 	.word	0x0800403d
 800406c:	080040c1 	.word	0x080040c1
 8004070:	0800403d 	.word	0x0800403d
 8004074:	0800403d 	.word	0x0800403d
 8004078:	0800403d 	.word	0x0800403d
 800407c:	0800403d 	.word	0x0800403d
 8004080:	080041c1 	.word	0x080041c1
 8004084:	080040eb 	.word	0x080040eb
 8004088:	0800417b 	.word	0x0800417b
 800408c:	0800403d 	.word	0x0800403d
 8004090:	0800403d 	.word	0x0800403d
 8004094:	080041e3 	.word	0x080041e3
 8004098:	0800403d 	.word	0x0800403d
 800409c:	080040eb 	.word	0x080040eb
 80040a0:	0800403d 	.word	0x0800403d
 80040a4:	0800403d 	.word	0x0800403d
 80040a8:	08004183 	.word	0x08004183
 80040ac:	6833      	ldr	r3, [r6, #0]
 80040ae:	1d1a      	adds	r2, r3, #4
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6032      	str	r2, [r6, #0]
 80040b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80040bc:	2301      	movs	r3, #1
 80040be:	e09d      	b.n	80041fc <_printf_i+0x1e8>
 80040c0:	6833      	ldr	r3, [r6, #0]
 80040c2:	6820      	ldr	r0, [r4, #0]
 80040c4:	1d19      	adds	r1, r3, #4
 80040c6:	6031      	str	r1, [r6, #0]
 80040c8:	0606      	lsls	r6, r0, #24
 80040ca:	d501      	bpl.n	80040d0 <_printf_i+0xbc>
 80040cc:	681d      	ldr	r5, [r3, #0]
 80040ce:	e003      	b.n	80040d8 <_printf_i+0xc4>
 80040d0:	0645      	lsls	r5, r0, #25
 80040d2:	d5fb      	bpl.n	80040cc <_printf_i+0xb8>
 80040d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040d8:	2d00      	cmp	r5, #0
 80040da:	da03      	bge.n	80040e4 <_printf_i+0xd0>
 80040dc:	232d      	movs	r3, #45	@ 0x2d
 80040de:	426d      	negs	r5, r5
 80040e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040e4:	4859      	ldr	r0, [pc, #356]	@ (800424c <_printf_i+0x238>)
 80040e6:	230a      	movs	r3, #10
 80040e8:	e011      	b.n	800410e <_printf_i+0xfa>
 80040ea:	6821      	ldr	r1, [r4, #0]
 80040ec:	6833      	ldr	r3, [r6, #0]
 80040ee:	0608      	lsls	r0, r1, #24
 80040f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80040f4:	d402      	bmi.n	80040fc <_printf_i+0xe8>
 80040f6:	0649      	lsls	r1, r1, #25
 80040f8:	bf48      	it	mi
 80040fa:	b2ad      	uxthmi	r5, r5
 80040fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80040fe:	4853      	ldr	r0, [pc, #332]	@ (800424c <_printf_i+0x238>)
 8004100:	6033      	str	r3, [r6, #0]
 8004102:	bf14      	ite	ne
 8004104:	230a      	movne	r3, #10
 8004106:	2308      	moveq	r3, #8
 8004108:	2100      	movs	r1, #0
 800410a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800410e:	6866      	ldr	r6, [r4, #4]
 8004110:	60a6      	str	r6, [r4, #8]
 8004112:	2e00      	cmp	r6, #0
 8004114:	bfa2      	ittt	ge
 8004116:	6821      	ldrge	r1, [r4, #0]
 8004118:	f021 0104 	bicge.w	r1, r1, #4
 800411c:	6021      	strge	r1, [r4, #0]
 800411e:	b90d      	cbnz	r5, 8004124 <_printf_i+0x110>
 8004120:	2e00      	cmp	r6, #0
 8004122:	d04b      	beq.n	80041bc <_printf_i+0x1a8>
 8004124:	4616      	mov	r6, r2
 8004126:	fbb5 f1f3 	udiv	r1, r5, r3
 800412a:	fb03 5711 	mls	r7, r3, r1, r5
 800412e:	5dc7      	ldrb	r7, [r0, r7]
 8004130:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004134:	462f      	mov	r7, r5
 8004136:	42bb      	cmp	r3, r7
 8004138:	460d      	mov	r5, r1
 800413a:	d9f4      	bls.n	8004126 <_printf_i+0x112>
 800413c:	2b08      	cmp	r3, #8
 800413e:	d10b      	bne.n	8004158 <_printf_i+0x144>
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	07df      	lsls	r7, r3, #31
 8004144:	d508      	bpl.n	8004158 <_printf_i+0x144>
 8004146:	6923      	ldr	r3, [r4, #16]
 8004148:	6861      	ldr	r1, [r4, #4]
 800414a:	4299      	cmp	r1, r3
 800414c:	bfde      	ittt	le
 800414e:	2330      	movle	r3, #48	@ 0x30
 8004150:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004154:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004158:	1b92      	subs	r2, r2, r6
 800415a:	6122      	str	r2, [r4, #16]
 800415c:	f8cd a000 	str.w	sl, [sp]
 8004160:	464b      	mov	r3, r9
 8004162:	aa03      	add	r2, sp, #12
 8004164:	4621      	mov	r1, r4
 8004166:	4640      	mov	r0, r8
 8004168:	f7ff fee6 	bl	8003f38 <_printf_common>
 800416c:	3001      	adds	r0, #1
 800416e:	d14a      	bne.n	8004206 <_printf_i+0x1f2>
 8004170:	f04f 30ff 	mov.w	r0, #4294967295
 8004174:	b004      	add	sp, #16
 8004176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	f043 0320 	orr.w	r3, r3, #32
 8004180:	6023      	str	r3, [r4, #0]
 8004182:	4833      	ldr	r0, [pc, #204]	@ (8004250 <_printf_i+0x23c>)
 8004184:	2778      	movs	r7, #120	@ 0x78
 8004186:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	6831      	ldr	r1, [r6, #0]
 800418e:	061f      	lsls	r7, r3, #24
 8004190:	f851 5b04 	ldr.w	r5, [r1], #4
 8004194:	d402      	bmi.n	800419c <_printf_i+0x188>
 8004196:	065f      	lsls	r7, r3, #25
 8004198:	bf48      	it	mi
 800419a:	b2ad      	uxthmi	r5, r5
 800419c:	6031      	str	r1, [r6, #0]
 800419e:	07d9      	lsls	r1, r3, #31
 80041a0:	bf44      	itt	mi
 80041a2:	f043 0320 	orrmi.w	r3, r3, #32
 80041a6:	6023      	strmi	r3, [r4, #0]
 80041a8:	b11d      	cbz	r5, 80041b2 <_printf_i+0x19e>
 80041aa:	2310      	movs	r3, #16
 80041ac:	e7ac      	b.n	8004108 <_printf_i+0xf4>
 80041ae:	4827      	ldr	r0, [pc, #156]	@ (800424c <_printf_i+0x238>)
 80041b0:	e7e9      	b.n	8004186 <_printf_i+0x172>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	f023 0320 	bic.w	r3, r3, #32
 80041b8:	6023      	str	r3, [r4, #0]
 80041ba:	e7f6      	b.n	80041aa <_printf_i+0x196>
 80041bc:	4616      	mov	r6, r2
 80041be:	e7bd      	b.n	800413c <_printf_i+0x128>
 80041c0:	6833      	ldr	r3, [r6, #0]
 80041c2:	6825      	ldr	r5, [r4, #0]
 80041c4:	6961      	ldr	r1, [r4, #20]
 80041c6:	1d18      	adds	r0, r3, #4
 80041c8:	6030      	str	r0, [r6, #0]
 80041ca:	062e      	lsls	r6, r5, #24
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	d501      	bpl.n	80041d4 <_printf_i+0x1c0>
 80041d0:	6019      	str	r1, [r3, #0]
 80041d2:	e002      	b.n	80041da <_printf_i+0x1c6>
 80041d4:	0668      	lsls	r0, r5, #25
 80041d6:	d5fb      	bpl.n	80041d0 <_printf_i+0x1bc>
 80041d8:	8019      	strh	r1, [r3, #0]
 80041da:	2300      	movs	r3, #0
 80041dc:	6123      	str	r3, [r4, #16]
 80041de:	4616      	mov	r6, r2
 80041e0:	e7bc      	b.n	800415c <_printf_i+0x148>
 80041e2:	6833      	ldr	r3, [r6, #0]
 80041e4:	1d1a      	adds	r2, r3, #4
 80041e6:	6032      	str	r2, [r6, #0]
 80041e8:	681e      	ldr	r6, [r3, #0]
 80041ea:	6862      	ldr	r2, [r4, #4]
 80041ec:	2100      	movs	r1, #0
 80041ee:	4630      	mov	r0, r6
 80041f0:	f7fb fffe 	bl	80001f0 <memchr>
 80041f4:	b108      	cbz	r0, 80041fa <_printf_i+0x1e6>
 80041f6:	1b80      	subs	r0, r0, r6
 80041f8:	6060      	str	r0, [r4, #4]
 80041fa:	6863      	ldr	r3, [r4, #4]
 80041fc:	6123      	str	r3, [r4, #16]
 80041fe:	2300      	movs	r3, #0
 8004200:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004204:	e7aa      	b.n	800415c <_printf_i+0x148>
 8004206:	6923      	ldr	r3, [r4, #16]
 8004208:	4632      	mov	r2, r6
 800420a:	4649      	mov	r1, r9
 800420c:	4640      	mov	r0, r8
 800420e:	47d0      	blx	sl
 8004210:	3001      	adds	r0, #1
 8004212:	d0ad      	beq.n	8004170 <_printf_i+0x15c>
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	079b      	lsls	r3, r3, #30
 8004218:	d413      	bmi.n	8004242 <_printf_i+0x22e>
 800421a:	68e0      	ldr	r0, [r4, #12]
 800421c:	9b03      	ldr	r3, [sp, #12]
 800421e:	4298      	cmp	r0, r3
 8004220:	bfb8      	it	lt
 8004222:	4618      	movlt	r0, r3
 8004224:	e7a6      	b.n	8004174 <_printf_i+0x160>
 8004226:	2301      	movs	r3, #1
 8004228:	4632      	mov	r2, r6
 800422a:	4649      	mov	r1, r9
 800422c:	4640      	mov	r0, r8
 800422e:	47d0      	blx	sl
 8004230:	3001      	adds	r0, #1
 8004232:	d09d      	beq.n	8004170 <_printf_i+0x15c>
 8004234:	3501      	adds	r5, #1
 8004236:	68e3      	ldr	r3, [r4, #12]
 8004238:	9903      	ldr	r1, [sp, #12]
 800423a:	1a5b      	subs	r3, r3, r1
 800423c:	42ab      	cmp	r3, r5
 800423e:	dcf2      	bgt.n	8004226 <_printf_i+0x212>
 8004240:	e7eb      	b.n	800421a <_printf_i+0x206>
 8004242:	2500      	movs	r5, #0
 8004244:	f104 0619 	add.w	r6, r4, #25
 8004248:	e7f5      	b.n	8004236 <_printf_i+0x222>
 800424a:	bf00      	nop
 800424c:	08004551 	.word	0x08004551
 8004250:	08004562 	.word	0x08004562

08004254 <__sflush_r>:
 8004254:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800425c:	0716      	lsls	r6, r2, #28
 800425e:	4605      	mov	r5, r0
 8004260:	460c      	mov	r4, r1
 8004262:	d454      	bmi.n	800430e <__sflush_r+0xba>
 8004264:	684b      	ldr	r3, [r1, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	dc02      	bgt.n	8004270 <__sflush_r+0x1c>
 800426a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800426c:	2b00      	cmp	r3, #0
 800426e:	dd48      	ble.n	8004302 <__sflush_r+0xae>
 8004270:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004272:	2e00      	cmp	r6, #0
 8004274:	d045      	beq.n	8004302 <__sflush_r+0xae>
 8004276:	2300      	movs	r3, #0
 8004278:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800427c:	682f      	ldr	r7, [r5, #0]
 800427e:	6a21      	ldr	r1, [r4, #32]
 8004280:	602b      	str	r3, [r5, #0]
 8004282:	d030      	beq.n	80042e6 <__sflush_r+0x92>
 8004284:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004286:	89a3      	ldrh	r3, [r4, #12]
 8004288:	0759      	lsls	r1, r3, #29
 800428a:	d505      	bpl.n	8004298 <__sflush_r+0x44>
 800428c:	6863      	ldr	r3, [r4, #4]
 800428e:	1ad2      	subs	r2, r2, r3
 8004290:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004292:	b10b      	cbz	r3, 8004298 <__sflush_r+0x44>
 8004294:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004296:	1ad2      	subs	r2, r2, r3
 8004298:	2300      	movs	r3, #0
 800429a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800429c:	6a21      	ldr	r1, [r4, #32]
 800429e:	4628      	mov	r0, r5
 80042a0:	47b0      	blx	r6
 80042a2:	1c43      	adds	r3, r0, #1
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	d106      	bne.n	80042b6 <__sflush_r+0x62>
 80042a8:	6829      	ldr	r1, [r5, #0]
 80042aa:	291d      	cmp	r1, #29
 80042ac:	d82b      	bhi.n	8004306 <__sflush_r+0xb2>
 80042ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004358 <__sflush_r+0x104>)
 80042b0:	410a      	asrs	r2, r1
 80042b2:	07d6      	lsls	r6, r2, #31
 80042b4:	d427      	bmi.n	8004306 <__sflush_r+0xb2>
 80042b6:	2200      	movs	r2, #0
 80042b8:	6062      	str	r2, [r4, #4]
 80042ba:	04d9      	lsls	r1, r3, #19
 80042bc:	6922      	ldr	r2, [r4, #16]
 80042be:	6022      	str	r2, [r4, #0]
 80042c0:	d504      	bpl.n	80042cc <__sflush_r+0x78>
 80042c2:	1c42      	adds	r2, r0, #1
 80042c4:	d101      	bne.n	80042ca <__sflush_r+0x76>
 80042c6:	682b      	ldr	r3, [r5, #0]
 80042c8:	b903      	cbnz	r3, 80042cc <__sflush_r+0x78>
 80042ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80042cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80042ce:	602f      	str	r7, [r5, #0]
 80042d0:	b1b9      	cbz	r1, 8004302 <__sflush_r+0xae>
 80042d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80042d6:	4299      	cmp	r1, r3
 80042d8:	d002      	beq.n	80042e0 <__sflush_r+0x8c>
 80042da:	4628      	mov	r0, r5
 80042dc:	f7ff fbf2 	bl	8003ac4 <_free_r>
 80042e0:	2300      	movs	r3, #0
 80042e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80042e4:	e00d      	b.n	8004302 <__sflush_r+0xae>
 80042e6:	2301      	movs	r3, #1
 80042e8:	4628      	mov	r0, r5
 80042ea:	47b0      	blx	r6
 80042ec:	4602      	mov	r2, r0
 80042ee:	1c50      	adds	r0, r2, #1
 80042f0:	d1c9      	bne.n	8004286 <__sflush_r+0x32>
 80042f2:	682b      	ldr	r3, [r5, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0c6      	beq.n	8004286 <__sflush_r+0x32>
 80042f8:	2b1d      	cmp	r3, #29
 80042fa:	d001      	beq.n	8004300 <__sflush_r+0xac>
 80042fc:	2b16      	cmp	r3, #22
 80042fe:	d11e      	bne.n	800433e <__sflush_r+0xea>
 8004300:	602f      	str	r7, [r5, #0]
 8004302:	2000      	movs	r0, #0
 8004304:	e022      	b.n	800434c <__sflush_r+0xf8>
 8004306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800430a:	b21b      	sxth	r3, r3
 800430c:	e01b      	b.n	8004346 <__sflush_r+0xf2>
 800430e:	690f      	ldr	r7, [r1, #16]
 8004310:	2f00      	cmp	r7, #0
 8004312:	d0f6      	beq.n	8004302 <__sflush_r+0xae>
 8004314:	0793      	lsls	r3, r2, #30
 8004316:	680e      	ldr	r6, [r1, #0]
 8004318:	bf08      	it	eq
 800431a:	694b      	ldreq	r3, [r1, #20]
 800431c:	600f      	str	r7, [r1, #0]
 800431e:	bf18      	it	ne
 8004320:	2300      	movne	r3, #0
 8004322:	eba6 0807 	sub.w	r8, r6, r7
 8004326:	608b      	str	r3, [r1, #8]
 8004328:	f1b8 0f00 	cmp.w	r8, #0
 800432c:	dde9      	ble.n	8004302 <__sflush_r+0xae>
 800432e:	6a21      	ldr	r1, [r4, #32]
 8004330:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004332:	4643      	mov	r3, r8
 8004334:	463a      	mov	r2, r7
 8004336:	4628      	mov	r0, r5
 8004338:	47b0      	blx	r6
 800433a:	2800      	cmp	r0, #0
 800433c:	dc08      	bgt.n	8004350 <__sflush_r+0xfc>
 800433e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004346:	81a3      	strh	r3, [r4, #12]
 8004348:	f04f 30ff 	mov.w	r0, #4294967295
 800434c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004350:	4407      	add	r7, r0
 8004352:	eba8 0800 	sub.w	r8, r8, r0
 8004356:	e7e7      	b.n	8004328 <__sflush_r+0xd4>
 8004358:	dfbffffe 	.word	0xdfbffffe

0800435c <_fflush_r>:
 800435c:	b538      	push	{r3, r4, r5, lr}
 800435e:	690b      	ldr	r3, [r1, #16]
 8004360:	4605      	mov	r5, r0
 8004362:	460c      	mov	r4, r1
 8004364:	b913      	cbnz	r3, 800436c <_fflush_r+0x10>
 8004366:	2500      	movs	r5, #0
 8004368:	4628      	mov	r0, r5
 800436a:	bd38      	pop	{r3, r4, r5, pc}
 800436c:	b118      	cbz	r0, 8004376 <_fflush_r+0x1a>
 800436e:	6a03      	ldr	r3, [r0, #32]
 8004370:	b90b      	cbnz	r3, 8004376 <_fflush_r+0x1a>
 8004372:	f7ff f9ad 	bl	80036d0 <__sinit>
 8004376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0f3      	beq.n	8004366 <_fflush_r+0xa>
 800437e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004380:	07d0      	lsls	r0, r2, #31
 8004382:	d404      	bmi.n	800438e <_fflush_r+0x32>
 8004384:	0599      	lsls	r1, r3, #22
 8004386:	d402      	bmi.n	800438e <_fflush_r+0x32>
 8004388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800438a:	f7ff fb98 	bl	8003abe <__retarget_lock_acquire_recursive>
 800438e:	4628      	mov	r0, r5
 8004390:	4621      	mov	r1, r4
 8004392:	f7ff ff5f 	bl	8004254 <__sflush_r>
 8004396:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004398:	07da      	lsls	r2, r3, #31
 800439a:	4605      	mov	r5, r0
 800439c:	d4e4      	bmi.n	8004368 <_fflush_r+0xc>
 800439e:	89a3      	ldrh	r3, [r4, #12]
 80043a0:	059b      	lsls	r3, r3, #22
 80043a2:	d4e1      	bmi.n	8004368 <_fflush_r+0xc>
 80043a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043a6:	f7ff fb8b 	bl	8003ac0 <__retarget_lock_release_recursive>
 80043aa:	e7dd      	b.n	8004368 <_fflush_r+0xc>

080043ac <__swhatbuf_r>:
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	460c      	mov	r4, r1
 80043b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b4:	2900      	cmp	r1, #0
 80043b6:	b096      	sub	sp, #88	@ 0x58
 80043b8:	4615      	mov	r5, r2
 80043ba:	461e      	mov	r6, r3
 80043bc:	da0d      	bge.n	80043da <__swhatbuf_r+0x2e>
 80043be:	89a3      	ldrh	r3, [r4, #12]
 80043c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80043c4:	f04f 0100 	mov.w	r1, #0
 80043c8:	bf14      	ite	ne
 80043ca:	2340      	movne	r3, #64	@ 0x40
 80043cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80043d0:	2000      	movs	r0, #0
 80043d2:	6031      	str	r1, [r6, #0]
 80043d4:	602b      	str	r3, [r5, #0]
 80043d6:	b016      	add	sp, #88	@ 0x58
 80043d8:	bd70      	pop	{r4, r5, r6, pc}
 80043da:	466a      	mov	r2, sp
 80043dc:	f000 f848 	bl	8004470 <_fstat_r>
 80043e0:	2800      	cmp	r0, #0
 80043e2:	dbec      	blt.n	80043be <__swhatbuf_r+0x12>
 80043e4:	9901      	ldr	r1, [sp, #4]
 80043e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80043ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80043ee:	4259      	negs	r1, r3
 80043f0:	4159      	adcs	r1, r3
 80043f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043f6:	e7eb      	b.n	80043d0 <__swhatbuf_r+0x24>

080043f8 <__smakebuf_r>:
 80043f8:	898b      	ldrh	r3, [r1, #12]
 80043fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043fc:	079d      	lsls	r5, r3, #30
 80043fe:	4606      	mov	r6, r0
 8004400:	460c      	mov	r4, r1
 8004402:	d507      	bpl.n	8004414 <__smakebuf_r+0x1c>
 8004404:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004408:	6023      	str	r3, [r4, #0]
 800440a:	6123      	str	r3, [r4, #16]
 800440c:	2301      	movs	r3, #1
 800440e:	6163      	str	r3, [r4, #20]
 8004410:	b003      	add	sp, #12
 8004412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004414:	ab01      	add	r3, sp, #4
 8004416:	466a      	mov	r2, sp
 8004418:	f7ff ffc8 	bl	80043ac <__swhatbuf_r>
 800441c:	9f00      	ldr	r7, [sp, #0]
 800441e:	4605      	mov	r5, r0
 8004420:	4639      	mov	r1, r7
 8004422:	4630      	mov	r0, r6
 8004424:	f7ff fbba 	bl	8003b9c <_malloc_r>
 8004428:	b948      	cbnz	r0, 800443e <__smakebuf_r+0x46>
 800442a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800442e:	059a      	lsls	r2, r3, #22
 8004430:	d4ee      	bmi.n	8004410 <__smakebuf_r+0x18>
 8004432:	f023 0303 	bic.w	r3, r3, #3
 8004436:	f043 0302 	orr.w	r3, r3, #2
 800443a:	81a3      	strh	r3, [r4, #12]
 800443c:	e7e2      	b.n	8004404 <__smakebuf_r+0xc>
 800443e:	89a3      	ldrh	r3, [r4, #12]
 8004440:	6020      	str	r0, [r4, #0]
 8004442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004446:	81a3      	strh	r3, [r4, #12]
 8004448:	9b01      	ldr	r3, [sp, #4]
 800444a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800444e:	b15b      	cbz	r3, 8004468 <__smakebuf_r+0x70>
 8004450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004454:	4630      	mov	r0, r6
 8004456:	f000 f81d 	bl	8004494 <_isatty_r>
 800445a:	b128      	cbz	r0, 8004468 <__smakebuf_r+0x70>
 800445c:	89a3      	ldrh	r3, [r4, #12]
 800445e:	f023 0303 	bic.w	r3, r3, #3
 8004462:	f043 0301 	orr.w	r3, r3, #1
 8004466:	81a3      	strh	r3, [r4, #12]
 8004468:	89a3      	ldrh	r3, [r4, #12]
 800446a:	431d      	orrs	r5, r3
 800446c:	81a5      	strh	r5, [r4, #12]
 800446e:	e7cf      	b.n	8004410 <__smakebuf_r+0x18>

08004470 <_fstat_r>:
 8004470:	b538      	push	{r3, r4, r5, lr}
 8004472:	4d07      	ldr	r5, [pc, #28]	@ (8004490 <_fstat_r+0x20>)
 8004474:	2300      	movs	r3, #0
 8004476:	4604      	mov	r4, r0
 8004478:	4608      	mov	r0, r1
 800447a:	4611      	mov	r1, r2
 800447c:	602b      	str	r3, [r5, #0]
 800447e:	f7fc fcbf 	bl	8000e00 <_fstat>
 8004482:	1c43      	adds	r3, r0, #1
 8004484:	d102      	bne.n	800448c <_fstat_r+0x1c>
 8004486:	682b      	ldr	r3, [r5, #0]
 8004488:	b103      	cbz	r3, 800448c <_fstat_r+0x1c>
 800448a:	6023      	str	r3, [r4, #0]
 800448c:	bd38      	pop	{r3, r4, r5, pc}
 800448e:	bf00      	nop
 8004490:	20001be8 	.word	0x20001be8

08004494 <_isatty_r>:
 8004494:	b538      	push	{r3, r4, r5, lr}
 8004496:	4d06      	ldr	r5, [pc, #24]	@ (80044b0 <_isatty_r+0x1c>)
 8004498:	2300      	movs	r3, #0
 800449a:	4604      	mov	r4, r0
 800449c:	4608      	mov	r0, r1
 800449e:	602b      	str	r3, [r5, #0]
 80044a0:	f7fc fcbe 	bl	8000e20 <_isatty>
 80044a4:	1c43      	adds	r3, r0, #1
 80044a6:	d102      	bne.n	80044ae <_isatty_r+0x1a>
 80044a8:	682b      	ldr	r3, [r5, #0]
 80044aa:	b103      	cbz	r3, 80044ae <_isatty_r+0x1a>
 80044ac:	6023      	str	r3, [r4, #0]
 80044ae:	bd38      	pop	{r3, r4, r5, pc}
 80044b0:	20001be8 	.word	0x20001be8

080044b4 <_sbrk_r>:
 80044b4:	b538      	push	{r3, r4, r5, lr}
 80044b6:	4d06      	ldr	r5, [pc, #24]	@ (80044d0 <_sbrk_r+0x1c>)
 80044b8:	2300      	movs	r3, #0
 80044ba:	4604      	mov	r4, r0
 80044bc:	4608      	mov	r0, r1
 80044be:	602b      	str	r3, [r5, #0]
 80044c0:	f7fc fcc6 	bl	8000e50 <_sbrk>
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	d102      	bne.n	80044ce <_sbrk_r+0x1a>
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	b103      	cbz	r3, 80044ce <_sbrk_r+0x1a>
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	bd38      	pop	{r3, r4, r5, pc}
 80044d0:	20001be8 	.word	0x20001be8

080044d4 <_init>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	bf00      	nop
 80044d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044da:	bc08      	pop	{r3}
 80044dc:	469e      	mov	lr, r3
 80044de:	4770      	bx	lr

080044e0 <_fini>:
 80044e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e2:	bf00      	nop
 80044e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e6:	bc08      	pop	{r3}
 80044e8:	469e      	mov	lr, r3
 80044ea:	4770      	bx	lr
